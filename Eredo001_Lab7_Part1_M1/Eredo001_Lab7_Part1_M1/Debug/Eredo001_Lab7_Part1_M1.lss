
Eredo001_Lab7_Part1_M1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000008d4  00000968  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800108  00800108  00000970  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c90  00000000  00000000  00000aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000912  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051d  00000000  00000000  00002046  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00002564  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000544  00000000  00000000  000026d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000329  00000000  00000000  00002c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002f41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0f c1       	rjmp	.+542    	; 0x26c <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ed       	ldi	r30, 0xD4	; 212
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 31       	cpi	r26, 0x19	; 25
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	16 d1       	rcall	.+556    	; 0x2f0 <main>
  c4:	05 c4       	rjmp	.+2058   	; 0x8d0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
  cc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
  d8:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <_avr_timer_cntcurr>
  dc:	70 93 0a 01 	sts	0x010A, r23	; 0x80010a <_avr_timer_cntcurr+0x1>
  e0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_avr_timer_cntcurr+0x2>
  e4:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <_avr_timer_cntcurr+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 112:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 116:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 11a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_avr_timer_cntcurr>
 11e:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <_avr_timer_cntcurr+0x1>
 122:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <_avr_timer_cntcurr+0x2>
 126:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <_avr_timer_cntcurr+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 144:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_avr_timer_cntcurr>
 148:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x1>
 14c:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <_avr_timer_cntcurr+0x2>
 150:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <_avr_timer_cntcurr+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_avr_timer_cntcurr>
 15e:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <_avr_timer_cntcurr+0x1>
 162:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <_avr_timer_cntcurr+0x2>
 166:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
        _avr_timer_cntcurr = _avr_timer_M;
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 180:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 184:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 188:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_avr_timer_cntcurr>
 18c:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <_avr_timer_cntcurr+0x1>
 190:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <_avr_timer_cntcurr+0x2>
 194:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <_avr_timer_cntcurr+0x3>
    }
}
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <delay_ms>:

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
 1aa:	18 16       	cp	r1, r24
 1ac:	19 06       	cpc	r1, r25
 1ae:	5c f0       	brlt	.+22     	; 0x1c6 <delay_ms+0x1c>
 1b0:	08 95       	ret
		for(j=0;j<775;j++) {
			asm("nop");
 1b2:	00 00       	nop
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	31 09       	sbc	r19, r1
/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
		for(j=0;j<775;j++) {
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <delay_ms+0x8>

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
 1ba:	4f 5f       	subi	r20, 0xFF	; 255
 1bc:	5f 4f       	sbci	r21, 0xFF	; 255
 1be:	84 17       	cp	r24, r20
 1c0:	95 07       	cpc	r25, r21
 1c2:	19 f4       	brne	.+6      	; 0x1ca <delay_ms+0x20>
 1c4:	08 95       	ret
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	50 e0       	ldi	r21, 0x00	; 0
#define RS 0				// pin number of uC connected to pin 4 of LCD disp.
#define E 1					// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
 1ca:	27 e0       	ldi	r18, 0x07	; 7
 1cc:	33 e0       	ldi	r19, 0x03	; 3
 1ce:	f1 cf       	rjmp	.-30     	; 0x1b2 <delay_ms+0x8>

000001d0 <LCD_WriteCommand>:
}

/*-------------------------------------------------------------------------*/

void LCD_WriteCommand (unsigned char Command) {
	CLR_BIT(CONTROL_BUS,RS);
 1d0:	10 98       	cbi	0x02, 0	; 2
	DATA_BUS = Command;
 1d2:	88 b9       	out	0x08, r24	; 8
	SET_BIT(CONTROL_BUS,E);
 1d4:	11 9a       	sbi	0x02, 1	; 2
	asm("nop");
 1d6:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 1d8:	11 98       	cbi	0x02, 1	; 2
	delay_ms(2); // ClearScreen requires 1.52ms to execute
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	e5 cf       	rjmp	.-54     	; 0x1aa <delay_ms>
 1e0:	08 95       	ret

000001e2 <LCD_ClearScreen>:
}

void LCD_ClearScreen(void) {
	LCD_WriteCommand(0x01);
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	f5 cf       	rjmp	.-22     	; 0x1d0 <LCD_WriteCommand>
 1e6:	08 95       	ret

000001e8 <LCD_init>:
}

void LCD_init(void) {
	delay_ms(100); //wait for 100 ms for LCD to power up
 1e8:	84 e6       	ldi	r24, 0x64	; 100
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	de df       	rcall	.-68     	; 0x1aa <delay_ms>
	LCD_WriteCommand(0x38);
 1ee:	88 e3       	ldi	r24, 0x38	; 56
 1f0:	ef df       	rcall	.-34     	; 0x1d0 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 1f2:	86 e0       	ldi	r24, 0x06	; 6
 1f4:	ed df       	rcall	.-38     	; 0x1d0 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 1f6:	8f e0       	ldi	r24, 0x0F	; 15
 1f8:	eb df       	rcall	.-42     	; 0x1d0 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	e9 df       	rcall	.-46     	; 0x1d0 <LCD_WriteCommand>
	delay_ms(10);						 
 1fe:	8a e0       	ldi	r24, 0x0A	; 10
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	d3 cf       	rjmp	.-90     	; 0x1aa <delay_ms>
 204:	08 95       	ret

00000206 <LCD_WriteData>:
 206:	10 9a       	sbi	0x02, 0	; 2
}

void LCD_WriteData(unsigned char Data) {
	SET_BIT(CONTROL_BUS,RS);
	DATA_BUS = Data;
 208:	88 b9       	out	0x08, r24	; 8
	SET_BIT(CONTROL_BUS,E);
 20a:	11 9a       	sbi	0x02, 1	; 2
	asm("nop");
 20c:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 20e:	11 98       	cbi	0x02, 1	; 2
	delay_ms(1);
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	ca cf       	rjmp	.-108    	; 0x1aa <delay_ms>
 216:	08 95       	ret

00000218 <LCD_Cursor>:
}

void LCD_Cursor(unsigned char column) {
	if ( column < 17 ) { // 16x2 LCD: column < 17; 16x1 LCD: column < 9
 218:	81 31       	cpi	r24, 0x11	; 17
 21a:	18 f4       	brcc	.+6      	; 0x222 <LCD_Cursor+0xa>
		LCD_WriteCommand(0x80 + column - 1);
 21c:	81 58       	subi	r24, 0x81	; 129
 21e:	d8 cf       	rjmp	.-80     	; 0x1d0 <LCD_WriteCommand>
 220:	08 95       	ret
		} else { // 6x2 LCD: column - 9; 16x1 LCD: column - 1
		LCD_WriteCommand(0xB8 + column - 9);
 222:	81 55       	subi	r24, 0x51	; 81
 224:	d5 cf       	rjmp	.-86     	; 0x1d0 <LCD_WriteCommand>
 226:	08 95       	ret

00000228 <LCD_DisplayString>:
	}
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	18 2f       	mov	r17, r24
 232:	eb 01       	movw	r28, r22
	LCD_ClearScreen();
 234:	d6 df       	rcall	.-84     	; 0x1e2 <LCD_ClearScreen>
	unsigned char c = column;
	while(*string) {
 236:	88 81       	ld	r24, Y
 238:	88 23       	and	r24, r24
 23a:	51 f0       	breq	.+20     	; 0x250 <LCD_DisplayString+0x28>
		LCD_Cursor(c++);
 23c:	01 e0       	ldi	r16, 0x01	; 1
 23e:	01 0f       	add	r16, r17
 240:	81 2f       	mov	r24, r17
 242:	ea df       	rcall	.-44     	; 0x218 <LCD_Cursor>
		LCD_WriteData(*string++);
 244:	89 91       	ld	r24, Y+
 246:	df df       	rcall	.-66     	; 0x206 <LCD_WriteData>
 248:	10 2f       	mov	r17, r16

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
 24a:	88 81       	ld	r24, Y
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
 24c:	81 11       	cpse	r24, r1
 24e:	f6 cf       	rjmp	.-20     	; 0x23c <LCD_DisplayString+0x14>
 250:	df 91       	pop	r29
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	08 95       	ret

0000025a <SPI_SlaveInit>:
 25a:	80 e4       	ldi	r24, 0x40	; 64

unsigned char receivedData = 0;
void SPI_SlaveInit(void)
{
	/* Set MISO output, all others input */
	DDRB = 0x40; PORTB = 0xBF;
 25c:	84 b9       	out	0x04, r24	; 4
 25e:	8f eb       	ldi	r24, 0xBF	; 191
 260:	85 b9       	out	0x05, r24	; 5
	/* Enable SPI */
	SPCR |= (1<<SPE)|(1<<SPIE);
 262:	8c b5       	in	r24, 0x2c	; 44
 264:	80 6c       	ori	r24, 0xC0	; 192
 266:	8c bd       	out	0x2c, r24	; 44
	sei();
 268:	78 94       	sei
 26a:	08 95       	ret

0000026c <__vector_19>:
}

ISR(SPI_STC_vect)
{
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
 276:	8f 93       	push	r24
	///* Wait for reception complete */
	//while(!(SPSR & (1<<SPIF)))
	//;
	///* Return Data Register */
	//return SPDR;
	receivedData = SPDR;
 278:	8e b5       	in	r24, 0x2e	; 46
 27a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
}
 27e:	8f 91       	pop	r24
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <ServantSM>:

unsigned char RecData[10];
enum Servant1_State{init, receive, display} state;

void ServantSM() {
	switch(state) {
 28a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <state>
 28e:	81 30       	cpi	r24, 0x01	; 1
 290:	41 f0       	breq	.+16     	; 0x2a2 <ServantSM+0x18>
 292:	18 f0       	brcs	.+6      	; 0x29a <ServantSM+0x10>
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	49 f0       	breq	.+18     	; 0x2aa <ServantSM+0x20>
 298:	0c c0       	rjmp	.+24     	; 0x2b2 <ServantSM+0x28>
		case init:
		state = receive;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <state>
		break;
 2a0:	0d c0       	rjmp	.+26     	; 0x2bc <ServantSM+0x32>
		
		case receive:
		state = display;
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <state>
 2a8:	1d c0       	rjmp	.+58     	; 0x2e4 <ServantSM+0x5a>
		break;
		
		case display:
		state = receive;
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <state>
		break;
 2b0:	05 c0       	rjmp	.+10     	; 0x2bc <ServantSM+0x32>
	}
	
	switch(state) {
 2b2:	81 30       	cpi	r24, 0x01	; 1
 2b4:	19 f0       	breq	.+6      	; 0x2bc <ServantSM+0x32>
 2b6:	82 30       	cpi	r24, 0x02	; 2
 2b8:	d1 f4       	brne	.+52     	; 0x2ee <ServantSM+0x64>
 2ba:	14 c0       	rjmp	.+40     	; 0x2e4 <ServantSM+0x5a>
		case init:
		break;
		
		case receive: 
		sprintf(RecData, "%d", receivedData);
 2bc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 2c0:	1f 92       	push	r1
 2c2:	8f 93       	push	r24
 2c4:	84 e0       	ldi	r24, 0x04	; 4
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	9f 93       	push	r25
 2ca:	8f 93       	push	r24
 2cc:	8e e0       	ldi	r24, 0x0E	; 14
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	9f 93       	push	r25
 2d2:	8f 93       	push	r24
 2d4:	22 d0       	rcall	.+68     	; 0x31a <sprintf>
		break;
 2d6:	0f 90       	pop	r0
 2d8:	0f 90       	pop	r0
 2da:	0f 90       	pop	r0
 2dc:	0f 90       	pop	r0
 2de:	0f 90       	pop	r0
 2e0:	0f 90       	pop	r0
		
		case display:
		LCD_ClearScreen();
 2e2:	08 95       	ret
 2e4:	7e df       	rcall	.-260    	; 0x1e2 <LCD_ClearScreen>
		LCD_DisplayString(1, RecData);
 2e6:	6e e0       	ldi	r22, 0x0E	; 14
 2e8:	71 e0       	ldi	r23, 0x01	; 1
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	9d cf       	rjmp	.-198    	; 0x228 <LCD_DisplayString>
 2ee:	08 95       	ret

000002f0 <main>:
}


int main(void)
{
	DDRA = 0xFF; PORTA = 0x00;
 2f0:	8f ef       	ldi	r24, 0xFF	; 255
 2f2:	81 b9       	out	0x01, r24	; 1
 2f4:	12 b8       	out	0x02, r1	; 2
	DDRC = 0xFF; PORTC = 0x00;
 2f6:	87 b9       	out	0x07, r24	; 7
 2f8:	18 b8       	out	0x08, r1	; 8
	
	LCD_init();
 2fa:	76 df       	rcall	.-276    	; 0x1e8 <LCD_init>
	SPI_SlaveInit();
 2fc:	ae df       	rcall	.-164    	; 0x25a <SPI_SlaveInit>
	TimerOn();
 2fe:	f5 de       	rcall	.-534    	; 0xea <TimerOn>
 300:	64 e6       	ldi	r22, 0x64	; 100
	TimerSet(100);
 302:	70 e0       	ldi	r23, 0x00	; 0
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	df de       	rcall	.-578    	; 0xc8 <TimerSet>
    /* Replace with your application code */
    while (1) 
    {
		ServantSM();
 30a:	bf df       	rcall	.-130    	; 0x28a <ServantSM>
 30c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <TimerFlag>
		while(!TimerFlag);
 310:	88 23       	and	r24, r24
 312:	e1 f3       	breq	.-8      	; 0x30c <main+0x1c>
 314:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <TimerFlag>
		TimerFlag = 0;
 318:	f8 cf       	rjmp	.-16     	; 0x30a <main+0x1a>

0000031a <sprintf>:
    }
 31a:	0f 93       	push	r16
 31c:	1f 93       	push	r17
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	cd b7       	in	r28, 0x3d	; 61
 324:	de b7       	in	r29, 0x3e	; 62
 326:	2e 97       	sbiw	r28, 0x0e	; 14
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	f8 94       	cli
 32c:	de bf       	out	0x3e, r29	; 62
 32e:	0f be       	out	0x3f, r0	; 63
 330:	cd bf       	out	0x3d, r28	; 61
 332:	0d 89       	ldd	r16, Y+21	; 0x15
 334:	1e 89       	ldd	r17, Y+22	; 0x16
 336:	86 e0       	ldi	r24, 0x06	; 6
 338:	8c 83       	std	Y+4, r24	; 0x04
 33a:	1a 83       	std	Y+2, r17	; 0x02
 33c:	09 83       	std	Y+1, r16	; 0x01
 33e:	8f ef       	ldi	r24, 0xFF	; 255
 340:	9f e7       	ldi	r25, 0x7F	; 127
 342:	9e 83       	std	Y+6, r25	; 0x06
 344:	8d 83       	std	Y+5, r24	; 0x05
 346:	ae 01       	movw	r20, r28
 348:	47 5e       	subi	r20, 0xE7	; 231
 34a:	5f 4f       	sbci	r21, 0xFF	; 255
 34c:	6f 89       	ldd	r22, Y+23	; 0x17
 34e:	78 8d       	ldd	r23, Y+24	; 0x18
 350:	ce 01       	movw	r24, r28
 352:	01 96       	adiw	r24, 0x01	; 1
 354:	10 d0       	rcall	.+32     	; 0x376 <vfprintf>
 356:	ef 81       	ldd	r30, Y+7	; 0x07
 358:	f8 85       	ldd	r31, Y+8	; 0x08
 35a:	e0 0f       	add	r30, r16
 35c:	f1 1f       	adc	r31, r17
 35e:	10 82       	st	Z, r1
 360:	2e 96       	adiw	r28, 0x0e	; 14
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	f8 94       	cli
 366:	de bf       	out	0x3e, r29	; 62
 368:	0f be       	out	0x3f, r0	; 63
 36a:	cd bf       	out	0x3d, r28	; 61
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	0f 91       	pop	r16
 374:	08 95       	ret

00000376 <vfprintf>:
 376:	2f 92       	push	r2
 378:	3f 92       	push	r3
 37a:	4f 92       	push	r4
 37c:	5f 92       	push	r5
 37e:	6f 92       	push	r6
 380:	7f 92       	push	r7
 382:	8f 92       	push	r8
 384:	9f 92       	push	r9
 386:	af 92       	push	r10
 388:	bf 92       	push	r11
 38a:	cf 92       	push	r12
 38c:	df 92       	push	r13
 38e:	ef 92       	push	r14
 390:	ff 92       	push	r15
 392:	0f 93       	push	r16
 394:	1f 93       	push	r17
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
 39e:	2b 97       	sbiw	r28, 0x0b	; 11
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	f8 94       	cli
 3a4:	de bf       	out	0x3e, r29	; 62
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	cd bf       	out	0x3d, r28	; 61
 3aa:	6c 01       	movw	r12, r24
 3ac:	7b 01       	movw	r14, r22
 3ae:	8a 01       	movw	r16, r20
 3b0:	fc 01       	movw	r30, r24
 3b2:	17 82       	std	Z+7, r1	; 0x07
 3b4:	16 82       	std	Z+6, r1	; 0x06
 3b6:	83 81       	ldd	r24, Z+3	; 0x03
 3b8:	81 ff       	sbrs	r24, 1
 3ba:	bf c1       	rjmp	.+894    	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
 3bc:	ce 01       	movw	r24, r28
 3be:	01 96       	adiw	r24, 0x01	; 1
 3c0:	3c 01       	movw	r6, r24
 3c2:	f6 01       	movw	r30, r12
 3c4:	93 81       	ldd	r25, Z+3	; 0x03
 3c6:	f7 01       	movw	r30, r14
 3c8:	93 fd       	sbrc	r25, 3
 3ca:	85 91       	lpm	r24, Z+
 3cc:	93 ff       	sbrs	r25, 3
 3ce:	81 91       	ld	r24, Z+
 3d0:	7f 01       	movw	r14, r30
 3d2:	88 23       	and	r24, r24
 3d4:	09 f4       	brne	.+2      	; 0x3d8 <vfprintf+0x62>
 3d6:	ad c1       	rjmp	.+858    	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
 3d8:	85 32       	cpi	r24, 0x25	; 37
 3da:	39 f4       	brne	.+14     	; 0x3ea <vfprintf+0x74>
 3dc:	93 fd       	sbrc	r25, 3
 3de:	85 91       	lpm	r24, Z+
 3e0:	93 ff       	sbrs	r25, 3
 3e2:	81 91       	ld	r24, Z+
 3e4:	7f 01       	movw	r14, r30
 3e6:	85 32       	cpi	r24, 0x25	; 37
 3e8:	21 f4       	brne	.+8      	; 0x3f2 <vfprintf+0x7c>
 3ea:	b6 01       	movw	r22, r12
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	d6 d1       	rcall	.+940    	; 0x79c <fputc>
 3f0:	e8 cf       	rjmp	.-48     	; 0x3c2 <vfprintf+0x4c>
 3f2:	91 2c       	mov	r9, r1
 3f4:	21 2c       	mov	r2, r1
 3f6:	31 2c       	mov	r3, r1
 3f8:	ff e1       	ldi	r31, 0x1F	; 31
 3fa:	f3 15       	cp	r31, r3
 3fc:	d8 f0       	brcs	.+54     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3fe:	8b 32       	cpi	r24, 0x2B	; 43
 400:	79 f0       	breq	.+30     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 402:	38 f4       	brcc	.+14     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 404:	80 32       	cpi	r24, 0x20	; 32
 406:	79 f0       	breq	.+30     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 408:	83 32       	cpi	r24, 0x23	; 35
 40a:	a1 f4       	brne	.+40     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 40c:	23 2d       	mov	r18, r3
 40e:	20 61       	ori	r18, 0x10	; 16
 410:	1d c0       	rjmp	.+58     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 412:	8d 32       	cpi	r24, 0x2D	; 45
 414:	61 f0       	breq	.+24     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 416:	80 33       	cpi	r24, 0x30	; 48
 418:	69 f4       	brne	.+26     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 41a:	23 2d       	mov	r18, r3
 41c:	21 60       	ori	r18, 0x01	; 1
 41e:	16 c0       	rjmp	.+44     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 420:	83 2d       	mov	r24, r3
 422:	82 60       	ori	r24, 0x02	; 2
 424:	38 2e       	mov	r3, r24
 426:	e3 2d       	mov	r30, r3
 428:	e4 60       	ori	r30, 0x04	; 4
 42a:	3e 2e       	mov	r3, r30
 42c:	2a c0       	rjmp	.+84     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 42e:	f3 2d       	mov	r31, r3
 430:	f8 60       	ori	r31, 0x08	; 8
 432:	1d c0       	rjmp	.+58     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 434:	37 fc       	sbrc	r3, 7
 436:	2d c0       	rjmp	.+90     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 438:	20 ed       	ldi	r18, 0xD0	; 208
 43a:	28 0f       	add	r18, r24
 43c:	2a 30       	cpi	r18, 0x0A	; 10
 43e:	40 f0       	brcs	.+16     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 440:	8e 32       	cpi	r24, 0x2E	; 46
 442:	b9 f4       	brne	.+46     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 444:	36 fc       	sbrc	r3, 6
 446:	75 c1       	rjmp	.+746    	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
 448:	23 2d       	mov	r18, r3
 44a:	20 64       	ori	r18, 0x40	; 64
 44c:	32 2e       	mov	r3, r18
 44e:	19 c0       	rjmp	.+50     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 450:	36 fe       	sbrs	r3, 6
 452:	06 c0       	rjmp	.+12     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 454:	8a e0       	ldi	r24, 0x0A	; 10
 456:	98 9e       	mul	r9, r24
 458:	20 0d       	add	r18, r0
 45a:	11 24       	eor	r1, r1
 45c:	92 2e       	mov	r9, r18
 45e:	11 c0       	rjmp	.+34     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 460:	ea e0       	ldi	r30, 0x0A	; 10
 462:	2e 9e       	mul	r2, r30
 464:	20 0d       	add	r18, r0
 466:	11 24       	eor	r1, r1
 468:	22 2e       	mov	r2, r18
 46a:	f3 2d       	mov	r31, r3
 46c:	f0 62       	ori	r31, 0x20	; 32
 46e:	3f 2e       	mov	r3, r31
 470:	08 c0       	rjmp	.+16     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 472:	8c 36       	cpi	r24, 0x6C	; 108
 474:	21 f4       	brne	.+8      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 476:	83 2d       	mov	r24, r3
 478:	80 68       	ori	r24, 0x80	; 128
 47a:	38 2e       	mov	r3, r24
 47c:	02 c0       	rjmp	.+4      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 47e:	88 36       	cpi	r24, 0x68	; 104
 480:	41 f4       	brne	.+16     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 482:	f7 01       	movw	r30, r14
 484:	93 fd       	sbrc	r25, 3
 486:	85 91       	lpm	r24, Z+
 488:	93 ff       	sbrs	r25, 3
 48a:	81 91       	ld	r24, Z+
 48c:	7f 01       	movw	r14, r30
 48e:	81 11       	cpse	r24, r1
 490:	b3 cf       	rjmp	.-154    	; 0x3f8 <vfprintf+0x82>
 492:	98 2f       	mov	r25, r24
 494:	9f 7d       	andi	r25, 0xDF	; 223
 496:	95 54       	subi	r25, 0x45	; 69
 498:	93 30       	cpi	r25, 0x03	; 3
 49a:	28 f4       	brcc	.+10     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 49c:	0c 5f       	subi	r16, 0xFC	; 252
 49e:	1f 4f       	sbci	r17, 0xFF	; 255
 4a0:	9f e3       	ldi	r25, 0x3F	; 63
 4a2:	99 83       	std	Y+1, r25	; 0x01
 4a4:	0d c0       	rjmp	.+26     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4a6:	83 36       	cpi	r24, 0x63	; 99
 4a8:	31 f0       	breq	.+12     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4aa:	83 37       	cpi	r24, 0x73	; 115
 4ac:	71 f0       	breq	.+28     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4ae:	83 35       	cpi	r24, 0x53	; 83
 4b0:	09 f0       	breq	.+2      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4b2:	55 c0       	rjmp	.+170    	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 4b4:	20 c0       	rjmp	.+64     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4b6:	f8 01       	movw	r30, r16
 4b8:	80 81       	ld	r24, Z
 4ba:	89 83       	std	Y+1, r24	; 0x01
 4bc:	0e 5f       	subi	r16, 0xFE	; 254
 4be:	1f 4f       	sbci	r17, 0xFF	; 255
 4c0:	88 24       	eor	r8, r8
 4c2:	83 94       	inc	r8
 4c4:	91 2c       	mov	r9, r1
 4c6:	53 01       	movw	r10, r6
 4c8:	12 c0       	rjmp	.+36     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4ca:	28 01       	movw	r4, r16
 4cc:	f2 e0       	ldi	r31, 0x02	; 2
 4ce:	4f 0e       	add	r4, r31
 4d0:	51 1c       	adc	r5, r1
 4d2:	f8 01       	movw	r30, r16
 4d4:	a0 80       	ld	r10, Z
 4d6:	b1 80       	ldd	r11, Z+1	; 0x01
 4d8:	36 fe       	sbrs	r3, 6
 4da:	03 c0       	rjmp	.+6      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4dc:	69 2d       	mov	r22, r9
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4e2:	6f ef       	ldi	r22, 0xFF	; 255
 4e4:	7f ef       	ldi	r23, 0xFF	; 255
 4e6:	c5 01       	movw	r24, r10
 4e8:	4e d1       	rcall	.+668    	; 0x786 <strnlen>
 4ea:	4c 01       	movw	r8, r24
 4ec:	82 01       	movw	r16, r4
 4ee:	f3 2d       	mov	r31, r3
 4f0:	ff 77       	andi	r31, 0x7F	; 127
 4f2:	3f 2e       	mov	r3, r31
 4f4:	15 c0       	rjmp	.+42     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 4f6:	28 01       	movw	r4, r16
 4f8:	22 e0       	ldi	r18, 0x02	; 2
 4fa:	42 0e       	add	r4, r18
 4fc:	51 1c       	adc	r5, r1
 4fe:	f8 01       	movw	r30, r16
 500:	a0 80       	ld	r10, Z
 502:	b1 80       	ldd	r11, Z+1	; 0x01
 504:	36 fe       	sbrs	r3, 6
 506:	03 c0       	rjmp	.+6      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 508:	69 2d       	mov	r22, r9
 50a:	70 e0       	ldi	r23, 0x00	; 0
 50c:	02 c0       	rjmp	.+4      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 50e:	6f ef       	ldi	r22, 0xFF	; 255
 510:	7f ef       	ldi	r23, 0xFF	; 255
 512:	c5 01       	movw	r24, r10
 514:	2d d1       	rcall	.+602    	; 0x770 <strnlen_P>
 516:	4c 01       	movw	r8, r24
 518:	f3 2d       	mov	r31, r3
 51a:	f0 68       	ori	r31, 0x80	; 128
 51c:	3f 2e       	mov	r3, r31
 51e:	82 01       	movw	r16, r4
 520:	33 fc       	sbrc	r3, 3
 522:	19 c0       	rjmp	.+50     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 524:	82 2d       	mov	r24, r2
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	88 16       	cp	r8, r24
 52a:	99 06       	cpc	r9, r25
 52c:	a0 f4       	brcc	.+40     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 52e:	b6 01       	movw	r22, r12
 530:	80 e2       	ldi	r24, 0x20	; 32
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	33 d1       	rcall	.+614    	; 0x79c <fputc>
 536:	2a 94       	dec	r2
 538:	f5 cf       	rjmp	.-22     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
 53a:	f5 01       	movw	r30, r10
 53c:	37 fc       	sbrc	r3, 7
 53e:	85 91       	lpm	r24, Z+
 540:	37 fe       	sbrs	r3, 7
 542:	81 91       	ld	r24, Z+
 544:	5f 01       	movw	r10, r30
 546:	b6 01       	movw	r22, r12
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	28 d1       	rcall	.+592    	; 0x79c <fputc>
 54c:	21 10       	cpse	r2, r1
 54e:	2a 94       	dec	r2
 550:	21 e0       	ldi	r18, 0x01	; 1
 552:	82 1a       	sub	r8, r18
 554:	91 08       	sbc	r9, r1
 556:	81 14       	cp	r8, r1
 558:	91 04       	cpc	r9, r1
 55a:	79 f7       	brne	.-34     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 55c:	e1 c0       	rjmp	.+450    	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
 55e:	84 36       	cpi	r24, 0x64	; 100
 560:	11 f0       	breq	.+4      	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
 562:	89 36       	cpi	r24, 0x69	; 105
 564:	39 f5       	brne	.+78     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
 566:	f8 01       	movw	r30, r16
 568:	37 fe       	sbrs	r3, 7
 56a:	07 c0       	rjmp	.+14     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 56c:	60 81       	ld	r22, Z
 56e:	71 81       	ldd	r23, Z+1	; 0x01
 570:	82 81       	ldd	r24, Z+2	; 0x02
 572:	93 81       	ldd	r25, Z+3	; 0x03
 574:	0c 5f       	subi	r16, 0xFC	; 252
 576:	1f 4f       	sbci	r17, 0xFF	; 255
 578:	08 c0       	rjmp	.+16     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 57a:	60 81       	ld	r22, Z
 57c:	71 81       	ldd	r23, Z+1	; 0x01
 57e:	07 2e       	mov	r0, r23
 580:	00 0c       	add	r0, r0
 582:	88 0b       	sbc	r24, r24
 584:	99 0b       	sbc	r25, r25
 586:	0e 5f       	subi	r16, 0xFE	; 254
 588:	1f 4f       	sbci	r17, 0xFF	; 255
 58a:	f3 2d       	mov	r31, r3
 58c:	ff 76       	andi	r31, 0x6F	; 111
 58e:	3f 2e       	mov	r3, r31
 590:	97 ff       	sbrs	r25, 7
 592:	09 c0       	rjmp	.+18     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 594:	90 95       	com	r25
 596:	80 95       	com	r24
 598:	70 95       	com	r23
 59a:	61 95       	neg	r22
 59c:	7f 4f       	sbci	r23, 0xFF	; 255
 59e:	8f 4f       	sbci	r24, 0xFF	; 255
 5a0:	9f 4f       	sbci	r25, 0xFF	; 255
 5a2:	f0 68       	ori	r31, 0x80	; 128
 5a4:	3f 2e       	mov	r3, r31
 5a6:	2a e0       	ldi	r18, 0x0A	; 10
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	a3 01       	movw	r20, r6
 5ac:	33 d1       	rcall	.+614    	; 0x814 <__ultoa_invert>
 5ae:	88 2e       	mov	r8, r24
 5b0:	86 18       	sub	r8, r6
 5b2:	44 c0       	rjmp	.+136    	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
 5b4:	85 37       	cpi	r24, 0x75	; 117
 5b6:	31 f4       	brne	.+12     	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
 5b8:	23 2d       	mov	r18, r3
 5ba:	2f 7e       	andi	r18, 0xEF	; 239
 5bc:	b2 2e       	mov	r11, r18
 5be:	2a e0       	ldi	r18, 0x0A	; 10
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	25 c0       	rjmp	.+74     	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 5c4:	93 2d       	mov	r25, r3
 5c6:	99 7f       	andi	r25, 0xF9	; 249
 5c8:	b9 2e       	mov	r11, r25
 5ca:	8f 36       	cpi	r24, 0x6F	; 111
 5cc:	c1 f0       	breq	.+48     	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
 5ce:	18 f4       	brcc	.+6      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5d0:	88 35       	cpi	r24, 0x58	; 88
 5d2:	79 f0       	breq	.+30     	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
 5d4:	ae c0       	rjmp	.+348    	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
 5d6:	80 37       	cpi	r24, 0x70	; 112
 5d8:	19 f0       	breq	.+6      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
 5da:	88 37       	cpi	r24, 0x78	; 120
 5dc:	21 f0       	breq	.+8      	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 5de:	a9 c0       	rjmp	.+338    	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
 5e0:	e9 2f       	mov	r30, r25
 5e2:	e0 61       	ori	r30, 0x10	; 16
 5e4:	be 2e       	mov	r11, r30
 5e6:	b4 fe       	sbrs	r11, 4
 5e8:	0d c0       	rjmp	.+26     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 5ea:	fb 2d       	mov	r31, r11
 5ec:	f4 60       	ori	r31, 0x04	; 4
 5ee:	bf 2e       	mov	r11, r31
 5f0:	09 c0       	rjmp	.+18     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 5f2:	34 fe       	sbrs	r3, 4
 5f4:	0a c0       	rjmp	.+20     	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
 5f6:	29 2f       	mov	r18, r25
 5f8:	26 60       	ori	r18, 0x06	; 6
 5fa:	b2 2e       	mov	r11, r18
 5fc:	06 c0       	rjmp	.+12     	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
 5fe:	28 e0       	ldi	r18, 0x08	; 8
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	05 c0       	rjmp	.+10     	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 604:	20 e1       	ldi	r18, 0x10	; 16
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	02 c0       	rjmp	.+4      	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 60a:	20 e1       	ldi	r18, 0x10	; 16
 60c:	32 e0       	ldi	r19, 0x02	; 2
 60e:	f8 01       	movw	r30, r16
 610:	b7 fe       	sbrs	r11, 7
 612:	07 c0       	rjmp	.+14     	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 614:	60 81       	ld	r22, Z
 616:	71 81       	ldd	r23, Z+1	; 0x01
 618:	82 81       	ldd	r24, Z+2	; 0x02
 61a:	93 81       	ldd	r25, Z+3	; 0x03
 61c:	0c 5f       	subi	r16, 0xFC	; 252
 61e:	1f 4f       	sbci	r17, 0xFF	; 255
 620:	06 c0       	rjmp	.+12     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 622:	60 81       	ld	r22, Z
 624:	71 81       	ldd	r23, Z+1	; 0x01
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 5f       	subi	r16, 0xFE	; 254
 62c:	1f 4f       	sbci	r17, 0xFF	; 255
 62e:	a3 01       	movw	r20, r6
 630:	f1 d0       	rcall	.+482    	; 0x814 <__ultoa_invert>
 632:	88 2e       	mov	r8, r24
 634:	86 18       	sub	r8, r6
 636:	fb 2d       	mov	r31, r11
 638:	ff 77       	andi	r31, 0x7F	; 127
 63a:	3f 2e       	mov	r3, r31
 63c:	36 fe       	sbrs	r3, 6
 63e:	0d c0       	rjmp	.+26     	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
 640:	23 2d       	mov	r18, r3
 642:	2e 7f       	andi	r18, 0xFE	; 254
 644:	a2 2e       	mov	r10, r18
 646:	89 14       	cp	r8, r9
 648:	58 f4       	brcc	.+22     	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
 64a:	34 fe       	sbrs	r3, 4
 64c:	0b c0       	rjmp	.+22     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
 64e:	32 fc       	sbrc	r3, 2
 650:	09 c0       	rjmp	.+18     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
 652:	83 2d       	mov	r24, r3
 654:	8e 7e       	andi	r24, 0xEE	; 238
 656:	a8 2e       	mov	r10, r24
 658:	05 c0       	rjmp	.+10     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
 65a:	b8 2c       	mov	r11, r8
 65c:	a3 2c       	mov	r10, r3
 65e:	03 c0       	rjmp	.+6      	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
 660:	b8 2c       	mov	r11, r8
 662:	01 c0       	rjmp	.+2      	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
 664:	b9 2c       	mov	r11, r9
 666:	a4 fe       	sbrs	r10, 4
 668:	0f c0       	rjmp	.+30     	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
 66a:	fe 01       	movw	r30, r28
 66c:	e8 0d       	add	r30, r8
 66e:	f1 1d       	adc	r31, r1
 670:	80 81       	ld	r24, Z
 672:	80 33       	cpi	r24, 0x30	; 48
 674:	21 f4       	brne	.+8      	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
 676:	9a 2d       	mov	r25, r10
 678:	99 7e       	andi	r25, 0xE9	; 233
 67a:	a9 2e       	mov	r10, r25
 67c:	09 c0       	rjmp	.+18     	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
 67e:	a2 fe       	sbrs	r10, 2
 680:	06 c0       	rjmp	.+12     	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
 682:	b3 94       	inc	r11
 684:	b3 94       	inc	r11
 686:	04 c0       	rjmp	.+8      	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
 688:	8a 2d       	mov	r24, r10
 68a:	86 78       	andi	r24, 0x86	; 134
 68c:	09 f0       	breq	.+2      	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
 68e:	b3 94       	inc	r11
 690:	a3 fc       	sbrc	r10, 3
 692:	10 c0       	rjmp	.+32     	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
 694:	a0 fe       	sbrs	r10, 0
 696:	06 c0       	rjmp	.+12     	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
 698:	b2 14       	cp	r11, r2
 69a:	80 f4       	brcc	.+32     	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
 69c:	28 0c       	add	r2, r8
 69e:	92 2c       	mov	r9, r2
 6a0:	9b 18       	sub	r9, r11
 6a2:	0d c0       	rjmp	.+26     	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
 6a4:	b2 14       	cp	r11, r2
 6a6:	58 f4       	brcc	.+22     	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
 6a8:	b6 01       	movw	r22, r12
 6aa:	80 e2       	ldi	r24, 0x20	; 32
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	76 d0       	rcall	.+236    	; 0x79c <fputc>
 6b0:	b3 94       	inc	r11
 6b2:	f8 cf       	rjmp	.-16     	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
 6b4:	b2 14       	cp	r11, r2
 6b6:	18 f4       	brcc	.+6      	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
 6b8:	2b 18       	sub	r2, r11
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
 6bc:	98 2c       	mov	r9, r8
 6be:	21 2c       	mov	r2, r1
 6c0:	a4 fe       	sbrs	r10, 4
 6c2:	0f c0       	rjmp	.+30     	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
 6c4:	b6 01       	movw	r22, r12
 6c6:	80 e3       	ldi	r24, 0x30	; 48
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	68 d0       	rcall	.+208    	; 0x79c <fputc>
 6cc:	a2 fe       	sbrs	r10, 2
 6ce:	16 c0       	rjmp	.+44     	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
 6d0:	a1 fc       	sbrc	r10, 1
 6d2:	03 c0       	rjmp	.+6      	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
 6d4:	88 e7       	ldi	r24, 0x78	; 120
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
 6da:	88 e5       	ldi	r24, 0x58	; 88
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	b6 01       	movw	r22, r12
 6e0:	0c c0       	rjmp	.+24     	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
 6e2:	8a 2d       	mov	r24, r10
 6e4:	86 78       	andi	r24, 0x86	; 134
 6e6:	51 f0       	breq	.+20     	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
 6e8:	a1 fe       	sbrs	r10, 1
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <__LOCK_REGION_LENGTH__+0x2f0>
 6ec:	8b e2       	ldi	r24, 0x2B	; 43
 6ee:	01 c0       	rjmp	.+2      	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
 6f0:	80 e2       	ldi	r24, 0x20	; 32
 6f2:	a7 fc       	sbrc	r10, 7
 6f4:	8d e2       	ldi	r24, 0x2D	; 45
 6f6:	b6 01       	movw	r22, r12
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	50 d0       	rcall	.+160    	; 0x79c <fputc>
 6fc:	89 14       	cp	r8, r9
 6fe:	30 f4       	brcc	.+12     	; 0x70c <__LOCK_REGION_LENGTH__+0x30c>
 700:	b6 01       	movw	r22, r12
 702:	80 e3       	ldi	r24, 0x30	; 48
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	4a d0       	rcall	.+148    	; 0x79c <fputc>
 708:	9a 94       	dec	r9
 70a:	f8 cf       	rjmp	.-16     	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
 70c:	8a 94       	dec	r8
 70e:	f3 01       	movw	r30, r6
 710:	e8 0d       	add	r30, r8
 712:	f1 1d       	adc	r31, r1
 714:	80 81       	ld	r24, Z
 716:	b6 01       	movw	r22, r12
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	40 d0       	rcall	.+128    	; 0x79c <fputc>
 71c:	81 10       	cpse	r8, r1
 71e:	f6 cf       	rjmp	.-20     	; 0x70c <__LOCK_REGION_LENGTH__+0x30c>
 720:	22 20       	and	r2, r2
 722:	09 f4       	brne	.+2      	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
 724:	4e ce       	rjmp	.-868    	; 0x3c2 <vfprintf+0x4c>
 726:	b6 01       	movw	r22, r12
 728:	80 e2       	ldi	r24, 0x20	; 32
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	37 d0       	rcall	.+110    	; 0x79c <fputc>
 72e:	2a 94       	dec	r2
 730:	f7 cf       	rjmp	.-18     	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
 732:	f6 01       	movw	r30, r12
 734:	86 81       	ldd	r24, Z+6	; 0x06
 736:	97 81       	ldd	r25, Z+7	; 0x07
 738:	02 c0       	rjmp	.+4      	; 0x73e <__LOCK_REGION_LENGTH__+0x33e>
 73a:	8f ef       	ldi	r24, 0xFF	; 255
 73c:	9f ef       	ldi	r25, 0xFF	; 255
 73e:	2b 96       	adiw	r28, 0x0b	; 11
 740:	0f b6       	in	r0, 0x3f	; 63
 742:	f8 94       	cli
 744:	de bf       	out	0x3e, r29	; 62
 746:	0f be       	out	0x3f, r0	; 63
 748:	cd bf       	out	0x3d, r28	; 61
 74a:	df 91       	pop	r29
 74c:	cf 91       	pop	r28
 74e:	1f 91       	pop	r17
 750:	0f 91       	pop	r16
 752:	ff 90       	pop	r15
 754:	ef 90       	pop	r14
 756:	df 90       	pop	r13
 758:	cf 90       	pop	r12
 75a:	bf 90       	pop	r11
 75c:	af 90       	pop	r10
 75e:	9f 90       	pop	r9
 760:	8f 90       	pop	r8
 762:	7f 90       	pop	r7
 764:	6f 90       	pop	r6
 766:	5f 90       	pop	r5
 768:	4f 90       	pop	r4
 76a:	3f 90       	pop	r3
 76c:	2f 90       	pop	r2
 76e:	08 95       	ret

00000770 <strnlen_P>:
 770:	fc 01       	movw	r30, r24
 772:	05 90       	lpm	r0, Z+
 774:	61 50       	subi	r22, 0x01	; 1
 776:	70 40       	sbci	r23, 0x00	; 0
 778:	01 10       	cpse	r0, r1
 77a:	d8 f7       	brcc	.-10     	; 0x772 <strnlen_P+0x2>
 77c:	80 95       	com	r24
 77e:	90 95       	com	r25
 780:	8e 0f       	add	r24, r30
 782:	9f 1f       	adc	r25, r31
 784:	08 95       	ret

00000786 <strnlen>:
 786:	fc 01       	movw	r30, r24
 788:	61 50       	subi	r22, 0x01	; 1
 78a:	70 40       	sbci	r23, 0x00	; 0
 78c:	01 90       	ld	r0, Z+
 78e:	01 10       	cpse	r0, r1
 790:	d8 f7       	brcc	.-10     	; 0x788 <strnlen+0x2>
 792:	80 95       	com	r24
 794:	90 95       	com	r25
 796:	8e 0f       	add	r24, r30
 798:	9f 1f       	adc	r25, r31
 79a:	08 95       	ret

0000079c <fputc>:
 79c:	0f 93       	push	r16
 79e:	1f 93       	push	r17
 7a0:	cf 93       	push	r28
 7a2:	df 93       	push	r29
 7a4:	fb 01       	movw	r30, r22
 7a6:	23 81       	ldd	r18, Z+3	; 0x03
 7a8:	21 fd       	sbrc	r18, 1
 7aa:	03 c0       	rjmp	.+6      	; 0x7b2 <fputc+0x16>
 7ac:	8f ef       	ldi	r24, 0xFF	; 255
 7ae:	9f ef       	ldi	r25, 0xFF	; 255
 7b0:	2c c0       	rjmp	.+88     	; 0x80a <fputc+0x6e>
 7b2:	22 ff       	sbrs	r18, 2
 7b4:	16 c0       	rjmp	.+44     	; 0x7e2 <fputc+0x46>
 7b6:	46 81       	ldd	r20, Z+6	; 0x06
 7b8:	57 81       	ldd	r21, Z+7	; 0x07
 7ba:	24 81       	ldd	r18, Z+4	; 0x04
 7bc:	35 81       	ldd	r19, Z+5	; 0x05
 7be:	42 17       	cp	r20, r18
 7c0:	53 07       	cpc	r21, r19
 7c2:	44 f4       	brge	.+16     	; 0x7d4 <fputc+0x38>
 7c4:	a0 81       	ld	r26, Z
 7c6:	b1 81       	ldd	r27, Z+1	; 0x01
 7c8:	9d 01       	movw	r18, r26
 7ca:	2f 5f       	subi	r18, 0xFF	; 255
 7cc:	3f 4f       	sbci	r19, 0xFF	; 255
 7ce:	31 83       	std	Z+1, r19	; 0x01
 7d0:	20 83       	st	Z, r18
 7d2:	8c 93       	st	X, r24
 7d4:	26 81       	ldd	r18, Z+6	; 0x06
 7d6:	37 81       	ldd	r19, Z+7	; 0x07
 7d8:	2f 5f       	subi	r18, 0xFF	; 255
 7da:	3f 4f       	sbci	r19, 0xFF	; 255
 7dc:	37 83       	std	Z+7, r19	; 0x07
 7de:	26 83       	std	Z+6, r18	; 0x06
 7e0:	14 c0       	rjmp	.+40     	; 0x80a <fputc+0x6e>
 7e2:	8b 01       	movw	r16, r22
 7e4:	ec 01       	movw	r28, r24
 7e6:	fb 01       	movw	r30, r22
 7e8:	00 84       	ldd	r0, Z+8	; 0x08
 7ea:	f1 85       	ldd	r31, Z+9	; 0x09
 7ec:	e0 2d       	mov	r30, r0
 7ee:	09 95       	icall
 7f0:	89 2b       	or	r24, r25
 7f2:	e1 f6       	brne	.-72     	; 0x7ac <fputc+0x10>
 7f4:	d8 01       	movw	r26, r16
 7f6:	16 96       	adiw	r26, 0x06	; 6
 7f8:	8d 91       	ld	r24, X+
 7fa:	9c 91       	ld	r25, X
 7fc:	17 97       	sbiw	r26, 0x07	; 7
 7fe:	01 96       	adiw	r24, 0x01	; 1
 800:	17 96       	adiw	r26, 0x07	; 7
 802:	9c 93       	st	X, r25
 804:	8e 93       	st	-X, r24
 806:	16 97       	sbiw	r26, 0x06	; 6
 808:	ce 01       	movw	r24, r28
 80a:	df 91       	pop	r29
 80c:	cf 91       	pop	r28
 80e:	1f 91       	pop	r17
 810:	0f 91       	pop	r16
 812:	08 95       	ret

00000814 <__ultoa_invert>:
 814:	fa 01       	movw	r30, r20
 816:	aa 27       	eor	r26, r26
 818:	28 30       	cpi	r18, 0x08	; 8
 81a:	51 f1       	breq	.+84     	; 0x870 <__ultoa_invert+0x5c>
 81c:	20 31       	cpi	r18, 0x10	; 16
 81e:	81 f1       	breq	.+96     	; 0x880 <__ultoa_invert+0x6c>
 820:	e8 94       	clt
 822:	6f 93       	push	r22
 824:	6e 7f       	andi	r22, 0xFE	; 254
 826:	6e 5f       	subi	r22, 0xFE	; 254
 828:	7f 4f       	sbci	r23, 0xFF	; 255
 82a:	8f 4f       	sbci	r24, 0xFF	; 255
 82c:	9f 4f       	sbci	r25, 0xFF	; 255
 82e:	af 4f       	sbci	r26, 0xFF	; 255
 830:	b1 e0       	ldi	r27, 0x01	; 1
 832:	3e d0       	rcall	.+124    	; 0x8b0 <__ultoa_invert+0x9c>
 834:	b4 e0       	ldi	r27, 0x04	; 4
 836:	3c d0       	rcall	.+120    	; 0x8b0 <__ultoa_invert+0x9c>
 838:	67 0f       	add	r22, r23
 83a:	78 1f       	adc	r23, r24
 83c:	89 1f       	adc	r24, r25
 83e:	9a 1f       	adc	r25, r26
 840:	a1 1d       	adc	r26, r1
 842:	68 0f       	add	r22, r24
 844:	79 1f       	adc	r23, r25
 846:	8a 1f       	adc	r24, r26
 848:	91 1d       	adc	r25, r1
 84a:	a1 1d       	adc	r26, r1
 84c:	6a 0f       	add	r22, r26
 84e:	71 1d       	adc	r23, r1
 850:	81 1d       	adc	r24, r1
 852:	91 1d       	adc	r25, r1
 854:	a1 1d       	adc	r26, r1
 856:	20 d0       	rcall	.+64     	; 0x898 <__ultoa_invert+0x84>
 858:	09 f4       	brne	.+2      	; 0x85c <__ultoa_invert+0x48>
 85a:	68 94       	set
 85c:	3f 91       	pop	r19
 85e:	2a e0       	ldi	r18, 0x0A	; 10
 860:	26 9f       	mul	r18, r22
 862:	11 24       	eor	r1, r1
 864:	30 19       	sub	r19, r0
 866:	30 5d       	subi	r19, 0xD0	; 208
 868:	31 93       	st	Z+, r19
 86a:	de f6       	brtc	.-74     	; 0x822 <__ultoa_invert+0xe>
 86c:	cf 01       	movw	r24, r30
 86e:	08 95       	ret
 870:	46 2f       	mov	r20, r22
 872:	47 70       	andi	r20, 0x07	; 7
 874:	40 5d       	subi	r20, 0xD0	; 208
 876:	41 93       	st	Z+, r20
 878:	b3 e0       	ldi	r27, 0x03	; 3
 87a:	0f d0       	rcall	.+30     	; 0x89a <__ultoa_invert+0x86>
 87c:	c9 f7       	brne	.-14     	; 0x870 <__ultoa_invert+0x5c>
 87e:	f6 cf       	rjmp	.-20     	; 0x86c <__ultoa_invert+0x58>
 880:	46 2f       	mov	r20, r22
 882:	4f 70       	andi	r20, 0x0F	; 15
 884:	40 5d       	subi	r20, 0xD0	; 208
 886:	4a 33       	cpi	r20, 0x3A	; 58
 888:	18 f0       	brcs	.+6      	; 0x890 <__ultoa_invert+0x7c>
 88a:	49 5d       	subi	r20, 0xD9	; 217
 88c:	31 fd       	sbrc	r19, 1
 88e:	40 52       	subi	r20, 0x20	; 32
 890:	41 93       	st	Z+, r20
 892:	02 d0       	rcall	.+4      	; 0x898 <__ultoa_invert+0x84>
 894:	a9 f7       	brne	.-22     	; 0x880 <__ultoa_invert+0x6c>
 896:	ea cf       	rjmp	.-44     	; 0x86c <__ultoa_invert+0x58>
 898:	b4 e0       	ldi	r27, 0x04	; 4
 89a:	a6 95       	lsr	r26
 89c:	97 95       	ror	r25
 89e:	87 95       	ror	r24
 8a0:	77 95       	ror	r23
 8a2:	67 95       	ror	r22
 8a4:	ba 95       	dec	r27
 8a6:	c9 f7       	brne	.-14     	; 0x89a <__ultoa_invert+0x86>
 8a8:	00 97       	sbiw	r24, 0x00	; 0
 8aa:	61 05       	cpc	r22, r1
 8ac:	71 05       	cpc	r23, r1
 8ae:	08 95       	ret
 8b0:	9b 01       	movw	r18, r22
 8b2:	ac 01       	movw	r20, r24
 8b4:	0a 2e       	mov	r0, r26
 8b6:	06 94       	lsr	r0
 8b8:	57 95       	ror	r21
 8ba:	47 95       	ror	r20
 8bc:	37 95       	ror	r19
 8be:	27 95       	ror	r18
 8c0:	ba 95       	dec	r27
 8c2:	c9 f7       	brne	.-14     	; 0x8b6 <__ultoa_invert+0xa2>
 8c4:	62 0f       	add	r22, r18
 8c6:	73 1f       	adc	r23, r19
 8c8:	84 1f       	adc	r24, r20
 8ca:	95 1f       	adc	r25, r21
 8cc:	a0 1d       	adc	r26, r0
 8ce:	08 95       	ret

000008d0 <_exit>:
 8d0:	f8 94       	cli

000008d2 <__stop_program>:
 8d2:	ff cf       	rjmp	.-2      	; 0x8d2 <__stop_program>
