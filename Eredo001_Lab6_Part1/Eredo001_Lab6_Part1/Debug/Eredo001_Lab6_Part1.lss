
Eredo001_Lab6_Part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000ace  00000b62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ace  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000037  0080010e  0080010e  00000b70  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f7d  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097f  00000000  00000000  00001c31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006db  00000000  00000000  000025b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  00002c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000686  00000000  00000000  00002e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a0  00000000  00000000  000034b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003b56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	ad c0       	rjmp	.+346    	; 0x190 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ec       	ldi	r30, 0xCE	; 206
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 34       	cpi	r26, 0x45	; 69
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	8e d1       	rcall	.+796    	; 0x3e0 <main>
  c4:	02 c5       	rjmp	.+2564   	; 0xaca <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Poll_task>:
		if( c == 0 ) { return b; }
		a = b;
		b = c;
	}
	return 0;
}
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	89 f0       	breq	.+34     	; 0xee <Poll_task+0x26>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	91 05       	cpc	r25, r1
  d0:	31 f0       	breq	.+12     	; 0xde <Poll_task+0x16>
  d2:	00 97       	sbiw	r24, 0x00	; 0
  d4:	21 f0       	breq	.+8      	; 0xde <Poll_task+0x16>
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	91 05       	cpc	r25, r1
  da:	21 f5       	brne	.+72     	; 0x124 <Poll_task+0x5c>
  dc:	08 c0       	rjmp	.+16     	; 0xee <Poll_task+0x26>
  de:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <TimeCount>
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <TimeCount>
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	08 95       	ret
  ee:	00 99       	sbic	0x00, 0	; 0
  f0:	0a c0       	rjmp	.+20     	; 0x106 <Poll_task+0x3e>
  f2:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <TimeCount>
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <task3+0x5>
  fc:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <task1+0x5>
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	8a b9       	out	0x0a, r24	; 10
 104:	8b b9       	out	0x0b, r24	; 11
 106:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <TimeCount>
 10a:	8a 30       	cpi	r24, 0x0A	; 10
 10c:	49 f4       	brne	.+18     	; 0x120 <Poll_task+0x58>
 10e:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <task3+0x5>
 112:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <task1+0x5>
 116:	1a b8       	out	0x0a, r1	; 10
 118:	1b b8       	out	0x0b, r1	; 11
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	08 95       	ret
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	08 95       	ret

00000126 <TimerSet>:
 126:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 12a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 12e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 132:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 136:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <_avr_timer_cntcurr>
 13a:	70 93 33 01 	sts	0x0133, r23	; 0x800133 <_avr_timer_cntcurr+0x1>
 13e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <_avr_timer_cntcurr+0x2>
 142:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <_avr_timer_cntcurr+0x3>
 146:	08 95       	ret

00000148 <TimerOn>:
 148:	8b e0       	ldi	r24, 0x0B	; 11
 14a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 14e:	8d e7       	ldi	r24, 0x7D	; 125
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 156:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 160:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 164:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 168:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 16c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 170:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 174:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 178:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <_avr_timer_cntcurr>
 17c:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <_avr_timer_cntcurr+0x1>
 180:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <_avr_timer_cntcurr+0x2>
 184:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <_avr_timer_cntcurr+0x3>
 188:	8f b7       	in	r24, 0x3f	; 63
 18a:	80 68       	ori	r24, 0x80	; 128
 18c:	8f bf       	out	0x3f, r24	; 63
 18e:	08 95       	ret

00000190 <__vector_13>:
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	af 93       	push	r26
 1a0:	bf 93       	push	r27
 1a2:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <_avr_timer_cntcurr>
 1a6:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <_avr_timer_cntcurr+0x1>
 1aa:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <_avr_timer_cntcurr+0x2>
 1ae:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <_avr_timer_cntcurr+0x3>
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	a1 09       	sbc	r26, r1
 1b6:	b1 09       	sbc	r27, r1
 1b8:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <_avr_timer_cntcurr>
 1bc:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <_avr_timer_cntcurr+0x1>
 1c0:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <_avr_timer_cntcurr+0x2>
 1c4:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <_avr_timer_cntcurr+0x3>
 1c8:	89 2b       	or	r24, r25
 1ca:	8a 2b       	or	r24, r26
 1cc:	8b 2b       	or	r24, r27
 1ce:	99 f4       	brne	.+38     	; 0x1f6 <__vector_13+0x66>
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <TimerFlag>
 1d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1da:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1de:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1e2:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1e6:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <_avr_timer_cntcurr>
 1ea:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <_avr_timer_cntcurr+0x1>
 1ee:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <_avr_timer_cntcurr+0x2>
 1f2:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <_avr_timer_cntcurr+0x3>
 1f6:	bf 91       	pop	r27
 1f8:	af 91       	pop	r26
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <updateCount>:
}

void updateCount(int incValue) {
    const char MAX_COUNT = 9;
    const char MIN_COUNT = 0;
    unsigned char newCount = count + incValue;
 208:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <count>
 20c:	89 0f       	add	r24, r25
    if (MIN_COUNT <= newCount && newCount <= MAX_COUNT) {
 20e:	8a 30       	cpi	r24, 0x0A	; 10
 210:	10 f4       	brcc	.+4      	; 0x216 <updateCount+0xe>
        count = newCount;
 212:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <count>
 216:	08 95       	ret

00000218 <IncDec_tick>:
unsigned char count;
enum IncDec_States { Start, Wait, IncHold, DecHold, ResetHold };
void updateCount(int);
const unsigned char InitialCount = 3;
int IncDec_tick(int state) {
    switch (state) { // Transitions
 218:	82 30       	cpi	r24, 0x02	; 2
 21a:	91 05       	cpc	r25, r1
 21c:	09 f4       	brne	.+2      	; 0x220 <IncDec_tick+0x8>
 21e:	3c c0       	rjmp	.+120    	; 0x298 <IncDec_tick+0x80>
 220:	34 f4       	brge	.+12     	; 0x22e <IncDec_tick+0x16>
 222:	00 97       	sbiw	r24, 0x00	; 0
 224:	69 f0       	breq	.+26     	; 0x240 <IncDec_tick+0x28>
 226:	81 30       	cpi	r24, 0x01	; 1
 228:	91 05       	cpc	r25, r1
 22a:	81 f0       	breq	.+32     	; 0x24c <IncDec_tick+0x34>
 22c:	56 c0       	rjmp	.+172    	; 0x2da <IncDec_tick+0xc2>
 22e:	83 30       	cpi	r24, 0x03	; 3
 230:	91 05       	cpc	r25, r1
 232:	09 f4       	brne	.+2      	; 0x236 <IncDec_tick+0x1e>
 234:	40 c0       	rjmp	.+128    	; 0x2b6 <IncDec_tick+0x9e>
 236:	84 30       	cpi	r24, 0x04	; 4
 238:	91 05       	cpc	r25, r1
 23a:	09 f4       	brne	.+2      	; 0x23e <IncDec_tick+0x26>
 23c:	48 c0       	rjmp	.+144    	; 0x2ce <IncDec_tick+0xb6>
 23e:	4d c0       	rjmp	.+154    	; 0x2da <IncDec_tick+0xc2>
        case Start:
            count = InitialCount;
 240:	83 e0       	ldi	r24, 0x03	; 3
 242:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <count>
            state = Wait;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
            break;
 24a:	08 95       	ret
        case Wait:
            if (buttons == Inc) {
 24c:	20 b1       	in	r18, 0x00	; 0
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	20 95       	com	r18
 252:	30 95       	com	r19
 254:	26 70       	andi	r18, 0x06	; 6
 256:	33 27       	eor	r19, r19
 258:	22 30       	cpi	r18, 0x02	; 2
 25a:	31 05       	cpc	r19, r1
 25c:	31 f4       	brne	.+12     	; 0x26a <IncDec_tick+0x52>
                updateCount(1);
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	d2 df       	rcall	.-92     	; 0x208 <updateCount>
                state = IncHold;
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	08 95       	ret
            } else if (buttons == Dec) {
 26a:	20 b1       	in	r18, 0x00	; 0
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	20 95       	com	r18
 270:	30 95       	com	r19
 272:	26 70       	andi	r18, 0x06	; 6
 274:	33 27       	eor	r19, r19
 276:	24 30       	cpi	r18, 0x04	; 4
 278:	31 05       	cpc	r19, r1
 27a:	31 f4       	brne	.+12     	; 0x288 <IncDec_tick+0x70>
                updateCount(-1);
 27c:	8f ef       	ldi	r24, 0xFF	; 255
 27e:	9f ef       	ldi	r25, 0xFF	; 255
 280:	c3 df       	rcall	.-122    	; 0x208 <updateCount>
                state = DecHold;
 282:	83 e0       	ldi	r24, 0x03	; 3
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	08 95       	ret
            } else if (buttons == Reset) {
 288:	20 b1       	in	r18, 0x00	; 0
 28a:	26 70       	andi	r18, 0x06	; 6
 28c:	59 f5       	brne	.+86     	; 0x2e4 <IncDec_tick+0xcc>
                count = 0;
 28e:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <count>
                state = ResetHold;
 292:	84 e0       	ldi	r24, 0x04	; 4
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	08 95       	ret
            } else {
                state = Wait;
            }
            break;
        case IncHold:
            if (buttons == Inc) {
 298:	20 b1       	in	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	20 95       	com	r18
 29e:	30 95       	com	r19
 2a0:	26 70       	andi	r18, 0x06	; 6
 2a2:	33 27       	eor	r19, r19
 2a4:	22 30       	cpi	r18, 0x02	; 2
 2a6:	31 05       	cpc	r19, r1
 2a8:	e9 f0       	breq	.+58     	; 0x2e4 <IncDec_tick+0xcc>
                state = IncHold;
            } else if (buttons == Reset) { // Intentional bug. Leave in.
 2aa:	80 b1       	in	r24, 0x00	; 0
 2ac:	86 70       	andi	r24, 0x06	; 6
 2ae:	c1 f4       	brne	.+48     	; 0x2e0 <IncDec_tick+0xc8>
                PORTD = 0xFF;
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
 2b2:	8b b9       	out	0x0b, r24	; 11
 2b4:	ff cf       	rjmp	.-2      	; 0x2b4 <IncDec_tick+0x9c>
            } else {
                state = Wait;
            }
            break;
        case DecHold:
            if (buttons == Dec) {
 2b6:	20 b1       	in	r18, 0x00	; 0
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	20 95       	com	r18
 2bc:	30 95       	com	r19
 2be:	26 70       	andi	r18, 0x06	; 6
 2c0:	33 27       	eor	r19, r19
 2c2:	24 30       	cpi	r18, 0x04	; 4
 2c4:	31 05       	cpc	r19, r1
 2c6:	71 f0       	breq	.+28     	; 0x2e4 <IncDec_tick+0xcc>
                state = DecHold;
            } else {
                state = Wait;
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	08 95       	ret
            }
            break;
        case ResetHold:
            if (buttons == Reset) {
 2ce:	20 b1       	in	r18, 0x00	; 0
 2d0:	26 70       	andi	r18, 0x06	; 6
 2d2:	41 f0       	breq	.+16     	; 0x2e4 <IncDec_tick+0xcc>
                state = ResetHold;
            } else {
                state = Wait;
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	08 95       	ret
            }
            break;
        default:
            state = Wait;
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	08 95       	ret
                state = IncHold;
            } else if (buttons == Reset) { // Intentional bug. Leave in.
                PORTD = 0xFF;
                for(;;);
            } else {
                state = Wait;
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
        case DecHold:
        case ResetHold:
            break;
    }
    return state;
}
 2e4:	08 95       	ret

000002e6 <delay_ms>:

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
 2e6:	18 16       	cp	r1, r24
 2e8:	19 06       	cpc	r1, r25
 2ea:	5c f0       	brlt	.+22     	; 0x302 <delay_ms+0x1c>
 2ec:	08 95       	ret
		for(j=0;j<775;j++) {
			asm("nop");
 2ee:	00 00       	nop
 2f0:	21 50       	subi	r18, 0x01	; 1
 2f2:	31 09       	sbc	r19, r1
/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
		for(j=0;j<775;j++) {
 2f4:	e1 f7       	brne	.-8      	; 0x2ee <delay_ms+0x8>

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
 2f6:	4f 5f       	subi	r20, 0xFF	; 255
 2f8:	5f 4f       	sbci	r21, 0xFF	; 255
 2fa:	84 17       	cp	r24, r20
 2fc:	95 07       	cpc	r25, r21
 2fe:	19 f4       	brne	.+6      	; 0x306 <delay_ms+0x20>
 300:	08 95       	ret
 302:	40 e0       	ldi	r20, 0x00	; 0
 304:	50 e0       	ldi	r21, 0x00	; 0
#define RS 0				// pin number of uC connected to pin 4 of LCD disp.
#define E 1					// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
 306:	27 e0       	ldi	r18, 0x07	; 7
 308:	33 e0       	ldi	r19, 0x03	; 3
 30a:	f1 cf       	rjmp	.-30     	; 0x2ee <delay_ms+0x8>

0000030c <LCD_WriteCommand>:
}

/*-------------------------------------------------------------------------*/

void LCD_WriteCommand (unsigned char Command) {
	CLR_BIT(CONTROL_BUS,RS);
 30c:	28 98       	cbi	0x05, 0	; 5
	DATA_BUS = Command;
 30e:	88 b9       	out	0x08, r24	; 8
	SET_BIT(CONTROL_BUS,E);
 310:	29 9a       	sbi	0x05, 1	; 5
	asm("nop");
 312:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 314:	29 98       	cbi	0x05, 1	; 5
	delay_ms(2); // ClearScreen requires 1.52ms to execute
 316:	82 e0       	ldi	r24, 0x02	; 2
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	e5 cf       	rjmp	.-54     	; 0x2e6 <delay_ms>
 31c:	08 95       	ret

0000031e <LCD_ClearScreen>:
}

void LCD_ClearScreen(void) {
	LCD_WriteCommand(0x01);
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	f5 cf       	rjmp	.-22     	; 0x30c <LCD_WriteCommand>
 322:	08 95       	ret

00000324 <LCD_init>:
}

void LCD_init(void) {
	delay_ms(100); //wait for 100 ms for LCD to power up
 324:	84 e6       	ldi	r24, 0x64	; 100
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	de df       	rcall	.-68     	; 0x2e6 <delay_ms>
	LCD_WriteCommand(0x38);
 32a:	88 e3       	ldi	r24, 0x38	; 56
 32c:	ef df       	rcall	.-34     	; 0x30c <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 32e:	86 e0       	ldi	r24, 0x06	; 6
 330:	ed df       	rcall	.-38     	; 0x30c <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 332:	8f e0       	ldi	r24, 0x0F	; 15
 334:	eb df       	rcall	.-42     	; 0x30c <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	e9 df       	rcall	.-46     	; 0x30c <LCD_WriteCommand>
	delay_ms(10);						 
 33a:	8a e0       	ldi	r24, 0x0A	; 10
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	d3 cf       	rjmp	.-90     	; 0x2e6 <delay_ms>
 340:	08 95       	ret

00000342 <LCD_WriteData>:
 342:	28 9a       	sbi	0x05, 0	; 5
}

void LCD_WriteData(unsigned char Data) {
	SET_BIT(CONTROL_BUS,RS);
	DATA_BUS = Data;
 344:	88 b9       	out	0x08, r24	; 8
	SET_BIT(CONTROL_BUS,E);
 346:	29 9a       	sbi	0x05, 1	; 5
	asm("nop");
 348:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 34a:	29 98       	cbi	0x05, 1	; 5
	delay_ms(1);
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	ca cf       	rjmp	.-108    	; 0x2e6 <delay_ms>
 352:	08 95       	ret

00000354 <LCD_Cursor>:
}

void LCD_Cursor(unsigned char column) {
	if ( column < 17 ) { // 16x2 LCD: column < 17; 16x1 LCD: column < 9
 354:	81 31       	cpi	r24, 0x11	; 17
 356:	18 f4       	brcc	.+6      	; 0x35e <LCD_Cursor+0xa>
		LCD_WriteCommand(0x80 + column - 1);
 358:	81 58       	subi	r24, 0x81	; 129
 35a:	d8 cf       	rjmp	.-80     	; 0x30c <LCD_WriteCommand>
 35c:	08 95       	ret
		} else { // 6x2 LCD: column - 9; 16x1 LCD: column - 1
		LCD_WriteCommand(0xB8 + column - 9);
 35e:	81 55       	subi	r24, 0x51	; 81
 360:	d5 cf       	rjmp	.-86     	; 0x30c <LCD_WriteCommand>
 362:	08 95       	ret

00000364 <LCD_DisplayString>:
	}
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 364:	0f 93       	push	r16
 366:	1f 93       	push	r17
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	18 2f       	mov	r17, r24
 36e:	eb 01       	movw	r28, r22
	LCD_ClearScreen();
 370:	d6 df       	rcall	.-84     	; 0x31e <LCD_ClearScreen>
	unsigned char c = column;
	while(*string) {
 372:	88 81       	ld	r24, Y
 374:	88 23       	and	r24, r24
 376:	51 f0       	breq	.+20     	; 0x38c <LCD_DisplayString+0x28>
		LCD_Cursor(c++);
 378:	01 e0       	ldi	r16, 0x01	; 1
 37a:	01 0f       	add	r16, r17
 37c:	81 2f       	mov	r24, r17
 37e:	ea df       	rcall	.-44     	; 0x354 <LCD_Cursor>
		LCD_WriteData(*string++);
 380:	89 91       	ld	r24, Y+
 382:	df df       	rcall	.-66     	; 0x342 <LCD_WriteData>
 384:	10 2f       	mov	r17, r16

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
 386:	88 81       	ld	r24, Y
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
 388:	81 11       	cpse	r24, r1
 38a:	f6 cf       	rjmp	.-20     	; 0x378 <LCD_DisplayString+0x14>
 38c:	df 91       	pop	r29
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
 38e:	cf 91       	pop	r28
 390:	1f 91       	pop	r17
 392:	0f 91       	pop	r16
 394:	08 95       	ret

00000396 <Timer_task>:
 396:	00 97       	sbiw	r24, 0x00	; 0
}

enum Timer_State{Start_2, Timer}Timer_states;
	
int Timer_task(int Timer_states) {
	switch(Timer_states) {
 398:	31 f0       	breq	.+12     	; 0x3a6 <Timer_task+0x10>
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	91 05       	cpc	r25, r1
 39e:	e9 f0       	breq	.+58     	; 0x3da <Timer_task+0x44>
		case Timer:
		Timer_states = Start_2;
		break;
	}
	
	switch(Timer_states) {
 3a0:	81 30       	cpi	r24, 0x01	; 1
 3a2:	91 05       	cpc	r25, r1
 3a4:	e1 f4       	brne	.+56     	; 0x3de <Timer_task+0x48>
		case Start_2:
		break;
		
		case Timer:
		sprintf(Cnt,"%d", count);
 3a6:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <count>
 3aa:	1f 92       	push	r1
 3ac:	8f 93       	push	r24
 3ae:	8a e0       	ldi	r24, 0x0A	; 10
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	9f 93       	push	r25
 3b4:	8f 93       	push	r24
 3b6:	87 e3       	ldi	r24, 0x37	; 55
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	9f 93       	push	r25
 3bc:	8f 93       	push	r24
 3be:	aa d0       	rcall	.+340    	; 0x514 <sprintf>
		LCD_DisplayString(1, Cnt);
 3c0:	67 e3       	ldi	r22, 0x37	; 55
 3c2:	71 e0       	ldi	r23, 0x01	; 1
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	ce df       	rcall	.-100    	; 0x364 <LCD_DisplayString>
		break;
 3c8:	0f 90       	pop	r0
 3ca:	0f 90       	pop	r0
 3cc:	0f 90       	pop	r0
 3ce:	0f 90       	pop	r0
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	08 95       	ret
		case Start_2:
		Timer_states = Timer;
		break;
		
		case Timer:
		Timer_states = Start_2;
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	90 e0       	ldi	r25, 0x00	; 0
		sprintf(Cnt,"%d", count);
		LCD_DisplayString(1, Cnt);
		break;
	}
	return Timer_states;
}
 3de:	08 95       	ret

000003e0 <main>:


int main(void)
{
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	00 d0       	rcall	.+0      	; 0x3e6 <main+0x6>
 3e6:	00 d0       	rcall	.+0      	; 0x3e8 <main+0x8>
 3e8:	00 d0       	rcall	.+0      	; 0x3ea <main+0xa>
 3ea:	cd b7       	in	r28, 0x3d	; 61
 3ec:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00;PORTA = 0xFF; 
 3ee:	11 b8       	out	0x01, r1	; 1
 3f0:	8f ef       	ldi	r24, 0xFF	; 255
 3f2:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF;PORTD = 0xFF; 
 3f4:	8a b9       	out	0x0a, r24	; 10
 3f6:	8b b9       	out	0x0b, r24	; 11
	DDRB = 0xFF;PORTB = 0x00;
 3f8:	84 b9       	out	0x04, r24	; 4
 3fa:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF;PORTC = 0x00;
 3fc:	87 b9       	out	0x07, r24	; 7
 3fe:	18 b8       	out	0x08, r1	; 8
	unsigned long int SMTick2_period = SMTick2_calc/GCD;
	unsigned long int SMTick3_period = SMTick3_calc/GCD;

	//Declare an array of tasks
	static task task2;
	task *tasks[] = {&task1, &task2, &task3};
 400:	86 e0       	ldi	r24, 0x06	; 6
 402:	e4 e0       	ldi	r30, 0x04	; 4
 404:	f1 e0       	ldi	r31, 0x01	; 1
 406:	de 01       	movw	r26, r28
 408:	11 96       	adiw	r26, 0x01	; 1
 40a:	01 90       	ld	r0, Z+
 40c:	0d 92       	st	X+, r0
 40e:	8a 95       	dec	r24
 410:	e1 f7       	brne	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	
	task1.state = Start;//Task initial state.
 412:	ea e1       	ldi	r30, 0x1A	; 26
 414:	f1 e0       	ldi	r31, 0x01	; 1
 416:	10 82       	st	Z, r1
	task1.active = 0x01;
 418:	21 e0       	ldi	r18, 0x01	; 1
 41a:	25 83       	std	Z+5, r18	; 0x05
	task1.period = SMTick1_period;//Task Period.
 41c:	8a e0       	ldi	r24, 0x0A	; 10
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	a0 e0       	ldi	r26, 0x00	; 0
 422:	b0 e0       	ldi	r27, 0x00	; 0
 424:	81 83       	std	Z+1, r24	; 0x01
 426:	92 83       	std	Z+2, r25	; 0x02
 428:	a3 83       	std	Z+3, r26	; 0x03
 42a:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = SMTick1_period; // Task current elasped time.
 42c:	86 83       	std	Z+6, r24	; 0x06
 42e:	97 83       	std	Z+7, r25	; 0x07
 430:	a0 87       	std	Z+8, r26	; 0x08
 432:	b1 87       	std	Z+9, r27	; 0x09
	task1.TickFct = &IncDec_tick; // Function pointer for the tick.
 434:	8c e0       	ldi	r24, 0x0C	; 12
 436:	91 e0       	ldi	r25, 0x01	; 1
 438:	93 87       	std	Z+11, r25	; 0x0b
 43a:	82 87       	std	Z+10, r24	; 0x0a
	
	task2.state = Start_1;//Task initial state.
 43c:	ee e0       	ldi	r30, 0x0E	; 14
 43e:	f1 e0       	ldi	r31, 0x01	; 1
 440:	10 82       	st	Z, r1
	task2.active = 0x01;
 442:	25 83       	std	Z+5, r18	; 0x05
	task2.period = SMTick2_period;//Task Period.
 444:	85 e0       	ldi	r24, 0x05	; 5
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	a0 e0       	ldi	r26, 0x00	; 0
 44a:	b0 e0       	ldi	r27, 0x00	; 0
 44c:	81 83       	std	Z+1, r24	; 0x01
 44e:	92 83       	std	Z+2, r25	; 0x02
 450:	a3 83       	std	Z+3, r26	; 0x03
 452:	b4 83       	std	Z+4, r27	; 0x04
	task2.elapsedTime = SMTick2_period; // Task current elasped time.
 454:	86 83       	std	Z+6, r24	; 0x06
 456:	97 83       	std	Z+7, r25	; 0x07
 458:	a0 87       	std	Z+8, r26	; 0x08
 45a:	b1 87       	std	Z+9, r27	; 0x09
	task2.TickFct = &Poll_task; // Function pointer for the tick.
 45c:	44 e6       	ldi	r20, 0x64	; 100
 45e:	50 e0       	ldi	r21, 0x00	; 0
 460:	53 87       	std	Z+11, r21	; 0x0b
 462:	42 87       	std	Z+10, r20	; 0x0a
	
	task3.state = Start_2;//Task initial state.
 464:	e6 e2       	ldi	r30, 0x26	; 38
 466:	f1 e0       	ldi	r31, 0x01	; 1
 468:	10 82       	st	Z, r1
	task3.active = 0x01;
 46a:	25 83       	std	Z+5, r18	; 0x05
	task3.period = SMTick3_period;//Task Period.
 46c:	81 83       	std	Z+1, r24	; 0x01
 46e:	92 83       	std	Z+2, r25	; 0x02
 470:	a3 83       	std	Z+3, r26	; 0x03
 472:	b4 83       	std	Z+4, r27	; 0x04
	task3.elapsedTime = SMTick3_period; // Task current elasped time.
 474:	86 83       	std	Z+6, r24	; 0x06
 476:	97 83       	std	Z+7, r25	; 0x07
 478:	a0 87       	std	Z+8, r26	; 0x08
 47a:	b1 87       	std	Z+9, r27	; 0x09
	task3.TickFct = &Timer_task; // Function pointer for the tick.
 47c:	8b ec       	ldi	r24, 0xCB	; 203
 47e:	91 e0       	ldi	r25, 0x01	; 1
 480:	93 87       	std	Z+11, r25	; 0x0b
 482:	82 87       	std	Z+10, r24	; 0x0a
	
	unsigned char i;
	LCD_init();
 484:	4f df       	rcall	.-354    	; 0x324 <LCD_init>
	TimerOn();
 486:	60 de       	rcall	.-832    	; 0x148 <TimerOn>
 488:	6a e0       	ldi	r22, 0x0A	; 10
	TimerSet(GCD);
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	4a de       	rcall	.-876    	; 0x126 <TimerSet>
 492:	6e 01       	movw	r12, r28
 494:	87 e0       	ldi	r24, 0x07	; 7
 496:	c8 0e       	add	r12, r24
 498:	d1 1c       	adc	r13, r1
 49a:	8e 01       	movw	r16, r28
 49c:	0f 5f       	subi	r16, 0xFF	; 255
 49e:	1f 4f       	sbci	r17, 0xFF	; 255
 4a0:	d8 01       	movw	r26, r16
    /* Replace with your application code */
    while (1) 
    {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			if(tasks[i]->active == 0x01) {
 4a2:	ed 90       	ld	r14, X+
 4a4:	fd 90       	ld	r15, X+
 4a6:	8d 01       	movw	r16, r26
 4a8:	f7 01       	movw	r30, r14
 4aa:	85 81       	ldd	r24, Z+5	; 0x05
 4ac:	81 30       	cpi	r24, 0x01	; 1
 4ae:	41 f5       	brne	.+80     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 4b0:	46 81       	ldd	r20, Z+6	; 0x06
				// Task is ready to tick
				if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 4b2:	57 81       	ldd	r21, Z+7	; 0x07
 4b4:	60 85       	ldd	r22, Z+8	; 0x08
 4b6:	71 85       	ldd	r23, Z+9	; 0x09
 4b8:	81 81       	ldd	r24, Z+1	; 0x01
 4ba:	92 81       	ldd	r25, Z+2	; 0x02
 4bc:	a3 81       	ldd	r26, Z+3	; 0x03
 4be:	b4 81       	ldd	r27, Z+4	; 0x04
 4c0:	48 17       	cp	r20, r24
 4c2:	59 07       	cpc	r21, r25
 4c4:	6a 07       	cpc	r22, r26
 4c6:	7b 07       	cpc	r23, r27
 4c8:	79 f4       	brne	.+30     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4ca:	80 81       	ld	r24, Z
					// Setting next state for task
					tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 4cc:	02 84       	ldd	r0, Z+10	; 0x0a
 4ce:	f3 85       	ldd	r31, Z+11	; 0x0b
 4d0:	e0 2d       	mov	r30, r0
 4d2:	08 2e       	mov	r0, r24
 4d4:	00 0c       	add	r0, r0
 4d6:	99 0b       	sbc	r25, r25
 4d8:	09 95       	icall
 4da:	d7 01       	movw	r26, r14
 4dc:	8c 93       	st	X, r24
 4de:	f7 01       	movw	r30, r14
					// Reset the elapsed time for next tick.
					tasks[i]->elapsedTime = 0;
 4e0:	16 82       	std	Z+6, r1	; 0x06
 4e2:	17 82       	std	Z+7, r1	; 0x07
 4e4:	10 86       	std	Z+8, r1	; 0x08
 4e6:	11 86       	std	Z+9, r1	; 0x09
 4e8:	f7 01       	movw	r30, r14
				}
					tasks[i]->elapsedTime += 1;
 4ea:	86 81       	ldd	r24, Z+6	; 0x06
 4ec:	97 81       	ldd	r25, Z+7	; 0x07
 4ee:	a0 85       	ldd	r26, Z+8	; 0x08
 4f0:	b1 85       	ldd	r27, Z+9	; 0x09
 4f2:	01 96       	adiw	r24, 0x01	; 1
 4f4:	a1 1d       	adc	r26, r1
 4f6:	b1 1d       	adc	r27, r1
 4f8:	86 83       	std	Z+6, r24	; 0x06
 4fa:	97 83       	std	Z+7, r25	; 0x07
 4fc:	a0 87       	std	Z+8, r26	; 0x08
 4fe:	b1 87       	std	Z+9, r27	; 0x09
 500:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <TimerFlag>
			}
			while(!TimerFlag);
 504:	88 23       	and	r24, r24
 506:	e1 f3       	breq	.-8      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 508:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <TimerFlag>
			TimerFlag = 0;
 50c:	0c 15       	cp	r16, r12
	
    /* Replace with your application code */
    while (1) 
    {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 50e:	1d 05       	cpc	r17, r13
 510:	39 f6       	brne	.-114    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 512:	c3 cf       	rjmp	.-122    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>

00000514 <sprintf>:
 514:	0f 93       	push	r16
 516:	1f 93       	push	r17
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	cd b7       	in	r28, 0x3d	; 61
 51e:	de b7       	in	r29, 0x3e	; 62
 520:	2e 97       	sbiw	r28, 0x0e	; 14
 522:	0f b6       	in	r0, 0x3f	; 63
 524:	f8 94       	cli
 526:	de bf       	out	0x3e, r29	; 62
 528:	0f be       	out	0x3f, r0	; 63
 52a:	cd bf       	out	0x3d, r28	; 61
 52c:	0d 89       	ldd	r16, Y+21	; 0x15
 52e:	1e 89       	ldd	r17, Y+22	; 0x16
 530:	86 e0       	ldi	r24, 0x06	; 6
 532:	8c 83       	std	Y+4, r24	; 0x04
 534:	1a 83       	std	Y+2, r17	; 0x02
 536:	09 83       	std	Y+1, r16	; 0x01
 538:	8f ef       	ldi	r24, 0xFF	; 255
 53a:	9f e7       	ldi	r25, 0x7F	; 127
 53c:	9e 83       	std	Y+6, r25	; 0x06
 53e:	8d 83       	std	Y+5, r24	; 0x05
 540:	ae 01       	movw	r20, r28
 542:	47 5e       	subi	r20, 0xE7	; 231
 544:	5f 4f       	sbci	r21, 0xFF	; 255
 546:	6f 89       	ldd	r22, Y+23	; 0x17
 548:	78 8d       	ldd	r23, Y+24	; 0x18
 54a:	ce 01       	movw	r24, r28
 54c:	01 96       	adiw	r24, 0x01	; 1
 54e:	10 d0       	rcall	.+32     	; 0x570 <vfprintf>
 550:	ef 81       	ldd	r30, Y+7	; 0x07
 552:	f8 85       	ldd	r31, Y+8	; 0x08
 554:	e0 0f       	add	r30, r16
 556:	f1 1f       	adc	r31, r17
 558:	10 82       	st	Z, r1
 55a:	2e 96       	adiw	r28, 0x0e	; 14
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	f8 94       	cli
 560:	de bf       	out	0x3e, r29	; 62
 562:	0f be       	out	0x3f, r0	; 63
 564:	cd bf       	out	0x3d, r28	; 61
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	1f 91       	pop	r17
 56c:	0f 91       	pop	r16
 56e:	08 95       	ret

00000570 <vfprintf>:
 570:	2f 92       	push	r2
 572:	3f 92       	push	r3
 574:	4f 92       	push	r4
 576:	5f 92       	push	r5
 578:	6f 92       	push	r6
 57a:	7f 92       	push	r7
 57c:	8f 92       	push	r8
 57e:	9f 92       	push	r9
 580:	af 92       	push	r10
 582:	bf 92       	push	r11
 584:	cf 92       	push	r12
 586:	df 92       	push	r13
 588:	ef 92       	push	r14
 58a:	ff 92       	push	r15
 58c:	0f 93       	push	r16
 58e:	1f 93       	push	r17
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
 598:	2b 97       	sbiw	r28, 0x0b	; 11
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	f8 94       	cli
 59e:	de bf       	out	0x3e, r29	; 62
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	cd bf       	out	0x3d, r28	; 61
 5a4:	6c 01       	movw	r12, r24
 5a6:	7b 01       	movw	r14, r22
 5a8:	8a 01       	movw	r16, r20
 5aa:	fc 01       	movw	r30, r24
 5ac:	17 82       	std	Z+7, r1	; 0x07
 5ae:	16 82       	std	Z+6, r1	; 0x06
 5b0:	83 81       	ldd	r24, Z+3	; 0x03
 5b2:	81 ff       	sbrs	r24, 1
 5b4:	bf c1       	rjmp	.+894    	; 0x934 <vfprintf+0x3c4>
 5b6:	ce 01       	movw	r24, r28
 5b8:	01 96       	adiw	r24, 0x01	; 1
 5ba:	3c 01       	movw	r6, r24
 5bc:	f6 01       	movw	r30, r12
 5be:	93 81       	ldd	r25, Z+3	; 0x03
 5c0:	f7 01       	movw	r30, r14
 5c2:	93 fd       	sbrc	r25, 3
 5c4:	85 91       	lpm	r24, Z+
 5c6:	93 ff       	sbrs	r25, 3
 5c8:	81 91       	ld	r24, Z+
 5ca:	7f 01       	movw	r14, r30
 5cc:	88 23       	and	r24, r24
 5ce:	09 f4       	brne	.+2      	; 0x5d2 <vfprintf+0x62>
 5d0:	ad c1       	rjmp	.+858    	; 0x92c <vfprintf+0x3bc>
 5d2:	85 32       	cpi	r24, 0x25	; 37
 5d4:	39 f4       	brne	.+14     	; 0x5e4 <vfprintf+0x74>
 5d6:	93 fd       	sbrc	r25, 3
 5d8:	85 91       	lpm	r24, Z+
 5da:	93 ff       	sbrs	r25, 3
 5dc:	81 91       	ld	r24, Z+
 5de:	7f 01       	movw	r14, r30
 5e0:	85 32       	cpi	r24, 0x25	; 37
 5e2:	21 f4       	brne	.+8      	; 0x5ec <vfprintf+0x7c>
 5e4:	b6 01       	movw	r22, r12
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	d6 d1       	rcall	.+940    	; 0x996 <fputc>
 5ea:	e8 cf       	rjmp	.-48     	; 0x5bc <vfprintf+0x4c>
 5ec:	91 2c       	mov	r9, r1
 5ee:	21 2c       	mov	r2, r1
 5f0:	31 2c       	mov	r3, r1
 5f2:	ff e1       	ldi	r31, 0x1F	; 31
 5f4:	f3 15       	cp	r31, r3
 5f6:	d8 f0       	brcs	.+54     	; 0x62e <vfprintf+0xbe>
 5f8:	8b 32       	cpi	r24, 0x2B	; 43
 5fa:	79 f0       	breq	.+30     	; 0x61a <vfprintf+0xaa>
 5fc:	38 f4       	brcc	.+14     	; 0x60c <vfprintf+0x9c>
 5fe:	80 32       	cpi	r24, 0x20	; 32
 600:	79 f0       	breq	.+30     	; 0x620 <vfprintf+0xb0>
 602:	83 32       	cpi	r24, 0x23	; 35
 604:	a1 f4       	brne	.+40     	; 0x62e <vfprintf+0xbe>
 606:	23 2d       	mov	r18, r3
 608:	20 61       	ori	r18, 0x10	; 16
 60a:	1d c0       	rjmp	.+58     	; 0x646 <vfprintf+0xd6>
 60c:	8d 32       	cpi	r24, 0x2D	; 45
 60e:	61 f0       	breq	.+24     	; 0x628 <vfprintf+0xb8>
 610:	80 33       	cpi	r24, 0x30	; 48
 612:	69 f4       	brne	.+26     	; 0x62e <vfprintf+0xbe>
 614:	23 2d       	mov	r18, r3
 616:	21 60       	ori	r18, 0x01	; 1
 618:	16 c0       	rjmp	.+44     	; 0x646 <vfprintf+0xd6>
 61a:	83 2d       	mov	r24, r3
 61c:	82 60       	ori	r24, 0x02	; 2
 61e:	38 2e       	mov	r3, r24
 620:	e3 2d       	mov	r30, r3
 622:	e4 60       	ori	r30, 0x04	; 4
 624:	3e 2e       	mov	r3, r30
 626:	2a c0       	rjmp	.+84     	; 0x67c <vfprintf+0x10c>
 628:	f3 2d       	mov	r31, r3
 62a:	f8 60       	ori	r31, 0x08	; 8
 62c:	1d c0       	rjmp	.+58     	; 0x668 <vfprintf+0xf8>
 62e:	37 fc       	sbrc	r3, 7
 630:	2d c0       	rjmp	.+90     	; 0x68c <vfprintf+0x11c>
 632:	20 ed       	ldi	r18, 0xD0	; 208
 634:	28 0f       	add	r18, r24
 636:	2a 30       	cpi	r18, 0x0A	; 10
 638:	40 f0       	brcs	.+16     	; 0x64a <vfprintf+0xda>
 63a:	8e 32       	cpi	r24, 0x2E	; 46
 63c:	b9 f4       	brne	.+46     	; 0x66c <vfprintf+0xfc>
 63e:	36 fc       	sbrc	r3, 6
 640:	75 c1       	rjmp	.+746    	; 0x92c <vfprintf+0x3bc>
 642:	23 2d       	mov	r18, r3
 644:	20 64       	ori	r18, 0x40	; 64
 646:	32 2e       	mov	r3, r18
 648:	19 c0       	rjmp	.+50     	; 0x67c <vfprintf+0x10c>
 64a:	36 fe       	sbrs	r3, 6
 64c:	06 c0       	rjmp	.+12     	; 0x65a <vfprintf+0xea>
 64e:	8a e0       	ldi	r24, 0x0A	; 10
 650:	98 9e       	mul	r9, r24
 652:	20 0d       	add	r18, r0
 654:	11 24       	eor	r1, r1
 656:	92 2e       	mov	r9, r18
 658:	11 c0       	rjmp	.+34     	; 0x67c <vfprintf+0x10c>
 65a:	ea e0       	ldi	r30, 0x0A	; 10
 65c:	2e 9e       	mul	r2, r30
 65e:	20 0d       	add	r18, r0
 660:	11 24       	eor	r1, r1
 662:	22 2e       	mov	r2, r18
 664:	f3 2d       	mov	r31, r3
 666:	f0 62       	ori	r31, 0x20	; 32
 668:	3f 2e       	mov	r3, r31
 66a:	08 c0       	rjmp	.+16     	; 0x67c <vfprintf+0x10c>
 66c:	8c 36       	cpi	r24, 0x6C	; 108
 66e:	21 f4       	brne	.+8      	; 0x678 <vfprintf+0x108>
 670:	83 2d       	mov	r24, r3
 672:	80 68       	ori	r24, 0x80	; 128
 674:	38 2e       	mov	r3, r24
 676:	02 c0       	rjmp	.+4      	; 0x67c <vfprintf+0x10c>
 678:	88 36       	cpi	r24, 0x68	; 104
 67a:	41 f4       	brne	.+16     	; 0x68c <vfprintf+0x11c>
 67c:	f7 01       	movw	r30, r14
 67e:	93 fd       	sbrc	r25, 3
 680:	85 91       	lpm	r24, Z+
 682:	93 ff       	sbrs	r25, 3
 684:	81 91       	ld	r24, Z+
 686:	7f 01       	movw	r14, r30
 688:	81 11       	cpse	r24, r1
 68a:	b3 cf       	rjmp	.-154    	; 0x5f2 <vfprintf+0x82>
 68c:	98 2f       	mov	r25, r24
 68e:	9f 7d       	andi	r25, 0xDF	; 223
 690:	95 54       	subi	r25, 0x45	; 69
 692:	93 30       	cpi	r25, 0x03	; 3
 694:	28 f4       	brcc	.+10     	; 0x6a0 <vfprintf+0x130>
 696:	0c 5f       	subi	r16, 0xFC	; 252
 698:	1f 4f       	sbci	r17, 0xFF	; 255
 69a:	9f e3       	ldi	r25, 0x3F	; 63
 69c:	99 83       	std	Y+1, r25	; 0x01
 69e:	0d c0       	rjmp	.+26     	; 0x6ba <vfprintf+0x14a>
 6a0:	83 36       	cpi	r24, 0x63	; 99
 6a2:	31 f0       	breq	.+12     	; 0x6b0 <vfprintf+0x140>
 6a4:	83 37       	cpi	r24, 0x73	; 115
 6a6:	71 f0       	breq	.+28     	; 0x6c4 <vfprintf+0x154>
 6a8:	83 35       	cpi	r24, 0x53	; 83
 6aa:	09 f0       	breq	.+2      	; 0x6ae <vfprintf+0x13e>
 6ac:	55 c0       	rjmp	.+170    	; 0x758 <vfprintf+0x1e8>
 6ae:	20 c0       	rjmp	.+64     	; 0x6f0 <vfprintf+0x180>
 6b0:	f8 01       	movw	r30, r16
 6b2:	80 81       	ld	r24, Z
 6b4:	89 83       	std	Y+1, r24	; 0x01
 6b6:	0e 5f       	subi	r16, 0xFE	; 254
 6b8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ba:	88 24       	eor	r8, r8
 6bc:	83 94       	inc	r8
 6be:	91 2c       	mov	r9, r1
 6c0:	53 01       	movw	r10, r6
 6c2:	12 c0       	rjmp	.+36     	; 0x6e8 <vfprintf+0x178>
 6c4:	28 01       	movw	r4, r16
 6c6:	f2 e0       	ldi	r31, 0x02	; 2
 6c8:	4f 0e       	add	r4, r31
 6ca:	51 1c       	adc	r5, r1
 6cc:	f8 01       	movw	r30, r16
 6ce:	a0 80       	ld	r10, Z
 6d0:	b1 80       	ldd	r11, Z+1	; 0x01
 6d2:	36 fe       	sbrs	r3, 6
 6d4:	03 c0       	rjmp	.+6      	; 0x6dc <vfprintf+0x16c>
 6d6:	69 2d       	mov	r22, r9
 6d8:	70 e0       	ldi	r23, 0x00	; 0
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <vfprintf+0x170>
 6dc:	6f ef       	ldi	r22, 0xFF	; 255
 6de:	7f ef       	ldi	r23, 0xFF	; 255
 6e0:	c5 01       	movw	r24, r10
 6e2:	4e d1       	rcall	.+668    	; 0x980 <strnlen>
 6e4:	4c 01       	movw	r8, r24
 6e6:	82 01       	movw	r16, r4
 6e8:	f3 2d       	mov	r31, r3
 6ea:	ff 77       	andi	r31, 0x7F	; 127
 6ec:	3f 2e       	mov	r3, r31
 6ee:	15 c0       	rjmp	.+42     	; 0x71a <vfprintf+0x1aa>
 6f0:	28 01       	movw	r4, r16
 6f2:	22 e0       	ldi	r18, 0x02	; 2
 6f4:	42 0e       	add	r4, r18
 6f6:	51 1c       	adc	r5, r1
 6f8:	f8 01       	movw	r30, r16
 6fa:	a0 80       	ld	r10, Z
 6fc:	b1 80       	ldd	r11, Z+1	; 0x01
 6fe:	36 fe       	sbrs	r3, 6
 700:	03 c0       	rjmp	.+6      	; 0x708 <vfprintf+0x198>
 702:	69 2d       	mov	r22, r9
 704:	70 e0       	ldi	r23, 0x00	; 0
 706:	02 c0       	rjmp	.+4      	; 0x70c <vfprintf+0x19c>
 708:	6f ef       	ldi	r22, 0xFF	; 255
 70a:	7f ef       	ldi	r23, 0xFF	; 255
 70c:	c5 01       	movw	r24, r10
 70e:	2d d1       	rcall	.+602    	; 0x96a <strnlen_P>
 710:	4c 01       	movw	r8, r24
 712:	f3 2d       	mov	r31, r3
 714:	f0 68       	ori	r31, 0x80	; 128
 716:	3f 2e       	mov	r3, r31
 718:	82 01       	movw	r16, r4
 71a:	33 fc       	sbrc	r3, 3
 71c:	19 c0       	rjmp	.+50     	; 0x750 <vfprintf+0x1e0>
 71e:	82 2d       	mov	r24, r2
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	88 16       	cp	r8, r24
 724:	99 06       	cpc	r9, r25
 726:	a0 f4       	brcc	.+40     	; 0x750 <vfprintf+0x1e0>
 728:	b6 01       	movw	r22, r12
 72a:	80 e2       	ldi	r24, 0x20	; 32
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	33 d1       	rcall	.+614    	; 0x996 <fputc>
 730:	2a 94       	dec	r2
 732:	f5 cf       	rjmp	.-22     	; 0x71e <vfprintf+0x1ae>
 734:	f5 01       	movw	r30, r10
 736:	37 fc       	sbrc	r3, 7
 738:	85 91       	lpm	r24, Z+
 73a:	37 fe       	sbrs	r3, 7
 73c:	81 91       	ld	r24, Z+
 73e:	5f 01       	movw	r10, r30
 740:	b6 01       	movw	r22, r12
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	28 d1       	rcall	.+592    	; 0x996 <fputc>
 746:	21 10       	cpse	r2, r1
 748:	2a 94       	dec	r2
 74a:	21 e0       	ldi	r18, 0x01	; 1
 74c:	82 1a       	sub	r8, r18
 74e:	91 08       	sbc	r9, r1
 750:	81 14       	cp	r8, r1
 752:	91 04       	cpc	r9, r1
 754:	79 f7       	brne	.-34     	; 0x734 <vfprintf+0x1c4>
 756:	e1 c0       	rjmp	.+450    	; 0x91a <vfprintf+0x3aa>
 758:	84 36       	cpi	r24, 0x64	; 100
 75a:	11 f0       	breq	.+4      	; 0x760 <vfprintf+0x1f0>
 75c:	89 36       	cpi	r24, 0x69	; 105
 75e:	39 f5       	brne	.+78     	; 0x7ae <vfprintf+0x23e>
 760:	f8 01       	movw	r30, r16
 762:	37 fe       	sbrs	r3, 7
 764:	07 c0       	rjmp	.+14     	; 0x774 <vfprintf+0x204>
 766:	60 81       	ld	r22, Z
 768:	71 81       	ldd	r23, Z+1	; 0x01
 76a:	82 81       	ldd	r24, Z+2	; 0x02
 76c:	93 81       	ldd	r25, Z+3	; 0x03
 76e:	0c 5f       	subi	r16, 0xFC	; 252
 770:	1f 4f       	sbci	r17, 0xFF	; 255
 772:	08 c0       	rjmp	.+16     	; 0x784 <vfprintf+0x214>
 774:	60 81       	ld	r22, Z
 776:	71 81       	ldd	r23, Z+1	; 0x01
 778:	07 2e       	mov	r0, r23
 77a:	00 0c       	add	r0, r0
 77c:	88 0b       	sbc	r24, r24
 77e:	99 0b       	sbc	r25, r25
 780:	0e 5f       	subi	r16, 0xFE	; 254
 782:	1f 4f       	sbci	r17, 0xFF	; 255
 784:	f3 2d       	mov	r31, r3
 786:	ff 76       	andi	r31, 0x6F	; 111
 788:	3f 2e       	mov	r3, r31
 78a:	97 ff       	sbrs	r25, 7
 78c:	09 c0       	rjmp	.+18     	; 0x7a0 <vfprintf+0x230>
 78e:	90 95       	com	r25
 790:	80 95       	com	r24
 792:	70 95       	com	r23
 794:	61 95       	neg	r22
 796:	7f 4f       	sbci	r23, 0xFF	; 255
 798:	8f 4f       	sbci	r24, 0xFF	; 255
 79a:	9f 4f       	sbci	r25, 0xFF	; 255
 79c:	f0 68       	ori	r31, 0x80	; 128
 79e:	3f 2e       	mov	r3, r31
 7a0:	2a e0       	ldi	r18, 0x0A	; 10
 7a2:	30 e0       	ldi	r19, 0x00	; 0
 7a4:	a3 01       	movw	r20, r6
 7a6:	33 d1       	rcall	.+614    	; 0xa0e <__ultoa_invert>
 7a8:	88 2e       	mov	r8, r24
 7aa:	86 18       	sub	r8, r6
 7ac:	44 c0       	rjmp	.+136    	; 0x836 <vfprintf+0x2c6>
 7ae:	85 37       	cpi	r24, 0x75	; 117
 7b0:	31 f4       	brne	.+12     	; 0x7be <vfprintf+0x24e>
 7b2:	23 2d       	mov	r18, r3
 7b4:	2f 7e       	andi	r18, 0xEF	; 239
 7b6:	b2 2e       	mov	r11, r18
 7b8:	2a e0       	ldi	r18, 0x0A	; 10
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	25 c0       	rjmp	.+74     	; 0x808 <vfprintf+0x298>
 7be:	93 2d       	mov	r25, r3
 7c0:	99 7f       	andi	r25, 0xF9	; 249
 7c2:	b9 2e       	mov	r11, r25
 7c4:	8f 36       	cpi	r24, 0x6F	; 111
 7c6:	c1 f0       	breq	.+48     	; 0x7f8 <vfprintf+0x288>
 7c8:	18 f4       	brcc	.+6      	; 0x7d0 <vfprintf+0x260>
 7ca:	88 35       	cpi	r24, 0x58	; 88
 7cc:	79 f0       	breq	.+30     	; 0x7ec <vfprintf+0x27c>
 7ce:	ae c0       	rjmp	.+348    	; 0x92c <vfprintf+0x3bc>
 7d0:	80 37       	cpi	r24, 0x70	; 112
 7d2:	19 f0       	breq	.+6      	; 0x7da <vfprintf+0x26a>
 7d4:	88 37       	cpi	r24, 0x78	; 120
 7d6:	21 f0       	breq	.+8      	; 0x7e0 <vfprintf+0x270>
 7d8:	a9 c0       	rjmp	.+338    	; 0x92c <vfprintf+0x3bc>
 7da:	e9 2f       	mov	r30, r25
 7dc:	e0 61       	ori	r30, 0x10	; 16
 7de:	be 2e       	mov	r11, r30
 7e0:	b4 fe       	sbrs	r11, 4
 7e2:	0d c0       	rjmp	.+26     	; 0x7fe <vfprintf+0x28e>
 7e4:	fb 2d       	mov	r31, r11
 7e6:	f4 60       	ori	r31, 0x04	; 4
 7e8:	bf 2e       	mov	r11, r31
 7ea:	09 c0       	rjmp	.+18     	; 0x7fe <vfprintf+0x28e>
 7ec:	34 fe       	sbrs	r3, 4
 7ee:	0a c0       	rjmp	.+20     	; 0x804 <vfprintf+0x294>
 7f0:	29 2f       	mov	r18, r25
 7f2:	26 60       	ori	r18, 0x06	; 6
 7f4:	b2 2e       	mov	r11, r18
 7f6:	06 c0       	rjmp	.+12     	; 0x804 <vfprintf+0x294>
 7f8:	28 e0       	ldi	r18, 0x08	; 8
 7fa:	30 e0       	ldi	r19, 0x00	; 0
 7fc:	05 c0       	rjmp	.+10     	; 0x808 <vfprintf+0x298>
 7fe:	20 e1       	ldi	r18, 0x10	; 16
 800:	30 e0       	ldi	r19, 0x00	; 0
 802:	02 c0       	rjmp	.+4      	; 0x808 <vfprintf+0x298>
 804:	20 e1       	ldi	r18, 0x10	; 16
 806:	32 e0       	ldi	r19, 0x02	; 2
 808:	f8 01       	movw	r30, r16
 80a:	b7 fe       	sbrs	r11, 7
 80c:	07 c0       	rjmp	.+14     	; 0x81c <vfprintf+0x2ac>
 80e:	60 81       	ld	r22, Z
 810:	71 81       	ldd	r23, Z+1	; 0x01
 812:	82 81       	ldd	r24, Z+2	; 0x02
 814:	93 81       	ldd	r25, Z+3	; 0x03
 816:	0c 5f       	subi	r16, 0xFC	; 252
 818:	1f 4f       	sbci	r17, 0xFF	; 255
 81a:	06 c0       	rjmp	.+12     	; 0x828 <vfprintf+0x2b8>
 81c:	60 81       	ld	r22, Z
 81e:	71 81       	ldd	r23, Z+1	; 0x01
 820:	80 e0       	ldi	r24, 0x00	; 0
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	0e 5f       	subi	r16, 0xFE	; 254
 826:	1f 4f       	sbci	r17, 0xFF	; 255
 828:	a3 01       	movw	r20, r6
 82a:	f1 d0       	rcall	.+482    	; 0xa0e <__ultoa_invert>
 82c:	88 2e       	mov	r8, r24
 82e:	86 18       	sub	r8, r6
 830:	fb 2d       	mov	r31, r11
 832:	ff 77       	andi	r31, 0x7F	; 127
 834:	3f 2e       	mov	r3, r31
 836:	36 fe       	sbrs	r3, 6
 838:	0d c0       	rjmp	.+26     	; 0x854 <vfprintf+0x2e4>
 83a:	23 2d       	mov	r18, r3
 83c:	2e 7f       	andi	r18, 0xFE	; 254
 83e:	a2 2e       	mov	r10, r18
 840:	89 14       	cp	r8, r9
 842:	58 f4       	brcc	.+22     	; 0x85a <vfprintf+0x2ea>
 844:	34 fe       	sbrs	r3, 4
 846:	0b c0       	rjmp	.+22     	; 0x85e <vfprintf+0x2ee>
 848:	32 fc       	sbrc	r3, 2
 84a:	09 c0       	rjmp	.+18     	; 0x85e <vfprintf+0x2ee>
 84c:	83 2d       	mov	r24, r3
 84e:	8e 7e       	andi	r24, 0xEE	; 238
 850:	a8 2e       	mov	r10, r24
 852:	05 c0       	rjmp	.+10     	; 0x85e <vfprintf+0x2ee>
 854:	b8 2c       	mov	r11, r8
 856:	a3 2c       	mov	r10, r3
 858:	03 c0       	rjmp	.+6      	; 0x860 <vfprintf+0x2f0>
 85a:	b8 2c       	mov	r11, r8
 85c:	01 c0       	rjmp	.+2      	; 0x860 <vfprintf+0x2f0>
 85e:	b9 2c       	mov	r11, r9
 860:	a4 fe       	sbrs	r10, 4
 862:	0f c0       	rjmp	.+30     	; 0x882 <vfprintf+0x312>
 864:	fe 01       	movw	r30, r28
 866:	e8 0d       	add	r30, r8
 868:	f1 1d       	adc	r31, r1
 86a:	80 81       	ld	r24, Z
 86c:	80 33       	cpi	r24, 0x30	; 48
 86e:	21 f4       	brne	.+8      	; 0x878 <vfprintf+0x308>
 870:	9a 2d       	mov	r25, r10
 872:	99 7e       	andi	r25, 0xE9	; 233
 874:	a9 2e       	mov	r10, r25
 876:	09 c0       	rjmp	.+18     	; 0x88a <vfprintf+0x31a>
 878:	a2 fe       	sbrs	r10, 2
 87a:	06 c0       	rjmp	.+12     	; 0x888 <vfprintf+0x318>
 87c:	b3 94       	inc	r11
 87e:	b3 94       	inc	r11
 880:	04 c0       	rjmp	.+8      	; 0x88a <vfprintf+0x31a>
 882:	8a 2d       	mov	r24, r10
 884:	86 78       	andi	r24, 0x86	; 134
 886:	09 f0       	breq	.+2      	; 0x88a <vfprintf+0x31a>
 888:	b3 94       	inc	r11
 88a:	a3 fc       	sbrc	r10, 3
 88c:	10 c0       	rjmp	.+32     	; 0x8ae <vfprintf+0x33e>
 88e:	a0 fe       	sbrs	r10, 0
 890:	06 c0       	rjmp	.+12     	; 0x89e <vfprintf+0x32e>
 892:	b2 14       	cp	r11, r2
 894:	80 f4       	brcc	.+32     	; 0x8b6 <vfprintf+0x346>
 896:	28 0c       	add	r2, r8
 898:	92 2c       	mov	r9, r2
 89a:	9b 18       	sub	r9, r11
 89c:	0d c0       	rjmp	.+26     	; 0x8b8 <vfprintf+0x348>
 89e:	b2 14       	cp	r11, r2
 8a0:	58 f4       	brcc	.+22     	; 0x8b8 <vfprintf+0x348>
 8a2:	b6 01       	movw	r22, r12
 8a4:	80 e2       	ldi	r24, 0x20	; 32
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	76 d0       	rcall	.+236    	; 0x996 <fputc>
 8aa:	b3 94       	inc	r11
 8ac:	f8 cf       	rjmp	.-16     	; 0x89e <vfprintf+0x32e>
 8ae:	b2 14       	cp	r11, r2
 8b0:	18 f4       	brcc	.+6      	; 0x8b8 <vfprintf+0x348>
 8b2:	2b 18       	sub	r2, r11
 8b4:	02 c0       	rjmp	.+4      	; 0x8ba <vfprintf+0x34a>
 8b6:	98 2c       	mov	r9, r8
 8b8:	21 2c       	mov	r2, r1
 8ba:	a4 fe       	sbrs	r10, 4
 8bc:	0f c0       	rjmp	.+30     	; 0x8dc <vfprintf+0x36c>
 8be:	b6 01       	movw	r22, r12
 8c0:	80 e3       	ldi	r24, 0x30	; 48
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	68 d0       	rcall	.+208    	; 0x996 <fputc>
 8c6:	a2 fe       	sbrs	r10, 2
 8c8:	16 c0       	rjmp	.+44     	; 0x8f6 <vfprintf+0x386>
 8ca:	a1 fc       	sbrc	r10, 1
 8cc:	03 c0       	rjmp	.+6      	; 0x8d4 <vfprintf+0x364>
 8ce:	88 e7       	ldi	r24, 0x78	; 120
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <vfprintf+0x368>
 8d4:	88 e5       	ldi	r24, 0x58	; 88
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	b6 01       	movw	r22, r12
 8da:	0c c0       	rjmp	.+24     	; 0x8f4 <vfprintf+0x384>
 8dc:	8a 2d       	mov	r24, r10
 8de:	86 78       	andi	r24, 0x86	; 134
 8e0:	51 f0       	breq	.+20     	; 0x8f6 <vfprintf+0x386>
 8e2:	a1 fe       	sbrs	r10, 1
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <vfprintf+0x37a>
 8e6:	8b e2       	ldi	r24, 0x2B	; 43
 8e8:	01 c0       	rjmp	.+2      	; 0x8ec <vfprintf+0x37c>
 8ea:	80 e2       	ldi	r24, 0x20	; 32
 8ec:	a7 fc       	sbrc	r10, 7
 8ee:	8d e2       	ldi	r24, 0x2D	; 45
 8f0:	b6 01       	movw	r22, r12
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	50 d0       	rcall	.+160    	; 0x996 <fputc>
 8f6:	89 14       	cp	r8, r9
 8f8:	30 f4       	brcc	.+12     	; 0x906 <vfprintf+0x396>
 8fa:	b6 01       	movw	r22, r12
 8fc:	80 e3       	ldi	r24, 0x30	; 48
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	4a d0       	rcall	.+148    	; 0x996 <fputc>
 902:	9a 94       	dec	r9
 904:	f8 cf       	rjmp	.-16     	; 0x8f6 <vfprintf+0x386>
 906:	8a 94       	dec	r8
 908:	f3 01       	movw	r30, r6
 90a:	e8 0d       	add	r30, r8
 90c:	f1 1d       	adc	r31, r1
 90e:	80 81       	ld	r24, Z
 910:	b6 01       	movw	r22, r12
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	40 d0       	rcall	.+128    	; 0x996 <fputc>
 916:	81 10       	cpse	r8, r1
 918:	f6 cf       	rjmp	.-20     	; 0x906 <vfprintf+0x396>
 91a:	22 20       	and	r2, r2
 91c:	09 f4       	brne	.+2      	; 0x920 <vfprintf+0x3b0>
 91e:	4e ce       	rjmp	.-868    	; 0x5bc <vfprintf+0x4c>
 920:	b6 01       	movw	r22, r12
 922:	80 e2       	ldi	r24, 0x20	; 32
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	37 d0       	rcall	.+110    	; 0x996 <fputc>
 928:	2a 94       	dec	r2
 92a:	f7 cf       	rjmp	.-18     	; 0x91a <vfprintf+0x3aa>
 92c:	f6 01       	movw	r30, r12
 92e:	86 81       	ldd	r24, Z+6	; 0x06
 930:	97 81       	ldd	r25, Z+7	; 0x07
 932:	02 c0       	rjmp	.+4      	; 0x938 <vfprintf+0x3c8>
 934:	8f ef       	ldi	r24, 0xFF	; 255
 936:	9f ef       	ldi	r25, 0xFF	; 255
 938:	2b 96       	adiw	r28, 0x0b	; 11
 93a:	0f b6       	in	r0, 0x3f	; 63
 93c:	f8 94       	cli
 93e:	de bf       	out	0x3e, r29	; 62
 940:	0f be       	out	0x3f, r0	; 63
 942:	cd bf       	out	0x3d, r28	; 61
 944:	df 91       	pop	r29
 946:	cf 91       	pop	r28
 948:	1f 91       	pop	r17
 94a:	0f 91       	pop	r16
 94c:	ff 90       	pop	r15
 94e:	ef 90       	pop	r14
 950:	df 90       	pop	r13
 952:	cf 90       	pop	r12
 954:	bf 90       	pop	r11
 956:	af 90       	pop	r10
 958:	9f 90       	pop	r9
 95a:	8f 90       	pop	r8
 95c:	7f 90       	pop	r7
 95e:	6f 90       	pop	r6
 960:	5f 90       	pop	r5
 962:	4f 90       	pop	r4
 964:	3f 90       	pop	r3
 966:	2f 90       	pop	r2
 968:	08 95       	ret

0000096a <strnlen_P>:
 96a:	fc 01       	movw	r30, r24
 96c:	05 90       	lpm	r0, Z+
 96e:	61 50       	subi	r22, 0x01	; 1
 970:	70 40       	sbci	r23, 0x00	; 0
 972:	01 10       	cpse	r0, r1
 974:	d8 f7       	brcc	.-10     	; 0x96c <strnlen_P+0x2>
 976:	80 95       	com	r24
 978:	90 95       	com	r25
 97a:	8e 0f       	add	r24, r30
 97c:	9f 1f       	adc	r25, r31
 97e:	08 95       	ret

00000980 <strnlen>:
 980:	fc 01       	movw	r30, r24
 982:	61 50       	subi	r22, 0x01	; 1
 984:	70 40       	sbci	r23, 0x00	; 0
 986:	01 90       	ld	r0, Z+
 988:	01 10       	cpse	r0, r1
 98a:	d8 f7       	brcc	.-10     	; 0x982 <strnlen+0x2>
 98c:	80 95       	com	r24
 98e:	90 95       	com	r25
 990:	8e 0f       	add	r24, r30
 992:	9f 1f       	adc	r25, r31
 994:	08 95       	ret

00000996 <fputc>:
 996:	0f 93       	push	r16
 998:	1f 93       	push	r17
 99a:	cf 93       	push	r28
 99c:	df 93       	push	r29
 99e:	fb 01       	movw	r30, r22
 9a0:	23 81       	ldd	r18, Z+3	; 0x03
 9a2:	21 fd       	sbrc	r18, 1
 9a4:	03 c0       	rjmp	.+6      	; 0x9ac <fputc+0x16>
 9a6:	8f ef       	ldi	r24, 0xFF	; 255
 9a8:	9f ef       	ldi	r25, 0xFF	; 255
 9aa:	2c c0       	rjmp	.+88     	; 0xa04 <fputc+0x6e>
 9ac:	22 ff       	sbrs	r18, 2
 9ae:	16 c0       	rjmp	.+44     	; 0x9dc <fputc+0x46>
 9b0:	46 81       	ldd	r20, Z+6	; 0x06
 9b2:	57 81       	ldd	r21, Z+7	; 0x07
 9b4:	24 81       	ldd	r18, Z+4	; 0x04
 9b6:	35 81       	ldd	r19, Z+5	; 0x05
 9b8:	42 17       	cp	r20, r18
 9ba:	53 07       	cpc	r21, r19
 9bc:	44 f4       	brge	.+16     	; 0x9ce <fputc+0x38>
 9be:	a0 81       	ld	r26, Z
 9c0:	b1 81       	ldd	r27, Z+1	; 0x01
 9c2:	9d 01       	movw	r18, r26
 9c4:	2f 5f       	subi	r18, 0xFF	; 255
 9c6:	3f 4f       	sbci	r19, 0xFF	; 255
 9c8:	31 83       	std	Z+1, r19	; 0x01
 9ca:	20 83       	st	Z, r18
 9cc:	8c 93       	st	X, r24
 9ce:	26 81       	ldd	r18, Z+6	; 0x06
 9d0:	37 81       	ldd	r19, Z+7	; 0x07
 9d2:	2f 5f       	subi	r18, 0xFF	; 255
 9d4:	3f 4f       	sbci	r19, 0xFF	; 255
 9d6:	37 83       	std	Z+7, r19	; 0x07
 9d8:	26 83       	std	Z+6, r18	; 0x06
 9da:	14 c0       	rjmp	.+40     	; 0xa04 <fputc+0x6e>
 9dc:	8b 01       	movw	r16, r22
 9de:	ec 01       	movw	r28, r24
 9e0:	fb 01       	movw	r30, r22
 9e2:	00 84       	ldd	r0, Z+8	; 0x08
 9e4:	f1 85       	ldd	r31, Z+9	; 0x09
 9e6:	e0 2d       	mov	r30, r0
 9e8:	09 95       	icall
 9ea:	89 2b       	or	r24, r25
 9ec:	e1 f6       	brne	.-72     	; 0x9a6 <fputc+0x10>
 9ee:	d8 01       	movw	r26, r16
 9f0:	16 96       	adiw	r26, 0x06	; 6
 9f2:	8d 91       	ld	r24, X+
 9f4:	9c 91       	ld	r25, X
 9f6:	17 97       	sbiw	r26, 0x07	; 7
 9f8:	01 96       	adiw	r24, 0x01	; 1
 9fa:	17 96       	adiw	r26, 0x07	; 7
 9fc:	9c 93       	st	X, r25
 9fe:	8e 93       	st	-X, r24
 a00:	16 97       	sbiw	r26, 0x06	; 6
 a02:	ce 01       	movw	r24, r28
 a04:	df 91       	pop	r29
 a06:	cf 91       	pop	r28
 a08:	1f 91       	pop	r17
 a0a:	0f 91       	pop	r16
 a0c:	08 95       	ret

00000a0e <__ultoa_invert>:
 a0e:	fa 01       	movw	r30, r20
 a10:	aa 27       	eor	r26, r26
 a12:	28 30       	cpi	r18, 0x08	; 8
 a14:	51 f1       	breq	.+84     	; 0xa6a <__ultoa_invert+0x5c>
 a16:	20 31       	cpi	r18, 0x10	; 16
 a18:	81 f1       	breq	.+96     	; 0xa7a <__ultoa_invert+0x6c>
 a1a:	e8 94       	clt
 a1c:	6f 93       	push	r22
 a1e:	6e 7f       	andi	r22, 0xFE	; 254
 a20:	6e 5f       	subi	r22, 0xFE	; 254
 a22:	7f 4f       	sbci	r23, 0xFF	; 255
 a24:	8f 4f       	sbci	r24, 0xFF	; 255
 a26:	9f 4f       	sbci	r25, 0xFF	; 255
 a28:	af 4f       	sbci	r26, 0xFF	; 255
 a2a:	b1 e0       	ldi	r27, 0x01	; 1
 a2c:	3e d0       	rcall	.+124    	; 0xaaa <__ultoa_invert+0x9c>
 a2e:	b4 e0       	ldi	r27, 0x04	; 4
 a30:	3c d0       	rcall	.+120    	; 0xaaa <__ultoa_invert+0x9c>
 a32:	67 0f       	add	r22, r23
 a34:	78 1f       	adc	r23, r24
 a36:	89 1f       	adc	r24, r25
 a38:	9a 1f       	adc	r25, r26
 a3a:	a1 1d       	adc	r26, r1
 a3c:	68 0f       	add	r22, r24
 a3e:	79 1f       	adc	r23, r25
 a40:	8a 1f       	adc	r24, r26
 a42:	91 1d       	adc	r25, r1
 a44:	a1 1d       	adc	r26, r1
 a46:	6a 0f       	add	r22, r26
 a48:	71 1d       	adc	r23, r1
 a4a:	81 1d       	adc	r24, r1
 a4c:	91 1d       	adc	r25, r1
 a4e:	a1 1d       	adc	r26, r1
 a50:	20 d0       	rcall	.+64     	; 0xa92 <__ultoa_invert+0x84>
 a52:	09 f4       	brne	.+2      	; 0xa56 <__ultoa_invert+0x48>
 a54:	68 94       	set
 a56:	3f 91       	pop	r19
 a58:	2a e0       	ldi	r18, 0x0A	; 10
 a5a:	26 9f       	mul	r18, r22
 a5c:	11 24       	eor	r1, r1
 a5e:	30 19       	sub	r19, r0
 a60:	30 5d       	subi	r19, 0xD0	; 208
 a62:	31 93       	st	Z+, r19
 a64:	de f6       	brtc	.-74     	; 0xa1c <__ultoa_invert+0xe>
 a66:	cf 01       	movw	r24, r30
 a68:	08 95       	ret
 a6a:	46 2f       	mov	r20, r22
 a6c:	47 70       	andi	r20, 0x07	; 7
 a6e:	40 5d       	subi	r20, 0xD0	; 208
 a70:	41 93       	st	Z+, r20
 a72:	b3 e0       	ldi	r27, 0x03	; 3
 a74:	0f d0       	rcall	.+30     	; 0xa94 <__ultoa_invert+0x86>
 a76:	c9 f7       	brne	.-14     	; 0xa6a <__ultoa_invert+0x5c>
 a78:	f6 cf       	rjmp	.-20     	; 0xa66 <__ultoa_invert+0x58>
 a7a:	46 2f       	mov	r20, r22
 a7c:	4f 70       	andi	r20, 0x0F	; 15
 a7e:	40 5d       	subi	r20, 0xD0	; 208
 a80:	4a 33       	cpi	r20, 0x3A	; 58
 a82:	18 f0       	brcs	.+6      	; 0xa8a <__ultoa_invert+0x7c>
 a84:	49 5d       	subi	r20, 0xD9	; 217
 a86:	31 fd       	sbrc	r19, 1
 a88:	40 52       	subi	r20, 0x20	; 32
 a8a:	41 93       	st	Z+, r20
 a8c:	02 d0       	rcall	.+4      	; 0xa92 <__ultoa_invert+0x84>
 a8e:	a9 f7       	brne	.-22     	; 0xa7a <__ultoa_invert+0x6c>
 a90:	ea cf       	rjmp	.-44     	; 0xa66 <__ultoa_invert+0x58>
 a92:	b4 e0       	ldi	r27, 0x04	; 4
 a94:	a6 95       	lsr	r26
 a96:	97 95       	ror	r25
 a98:	87 95       	ror	r24
 a9a:	77 95       	ror	r23
 a9c:	67 95       	ror	r22
 a9e:	ba 95       	dec	r27
 aa0:	c9 f7       	brne	.-14     	; 0xa94 <__ultoa_invert+0x86>
 aa2:	00 97       	sbiw	r24, 0x00	; 0
 aa4:	61 05       	cpc	r22, r1
 aa6:	71 05       	cpc	r23, r1
 aa8:	08 95       	ret
 aaa:	9b 01       	movw	r18, r22
 aac:	ac 01       	movw	r20, r24
 aae:	0a 2e       	mov	r0, r26
 ab0:	06 94       	lsr	r0
 ab2:	57 95       	ror	r21
 ab4:	47 95       	ror	r20
 ab6:	37 95       	ror	r19
 ab8:	27 95       	ror	r18
 aba:	ba 95       	dec	r27
 abc:	c9 f7       	brne	.-14     	; 0xab0 <__ultoa_invert+0xa2>
 abe:	62 0f       	add	r22, r18
 ac0:	73 1f       	adc	r23, r19
 ac2:	84 1f       	adc	r24, r20
 ac4:	95 1f       	adc	r25, r21
 ac6:	a0 1d       	adc	r26, r0
 ac8:	08 95       	ret

00000aca <_exit>:
 aca:	f8 94       	cli

00000acc <__stop_program>:
 acc:	ff cf       	rjmp	.-2      	; 0xacc <__stop_program>
