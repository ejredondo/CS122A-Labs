
Eredo001_Lab4_Part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000c42  00000cd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063e  00800110  00800110  00000ce6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ce6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028a5  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ef2  00000000  00000000  00003815  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017d7  00000000  00000000  00004707  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005b4  00000000  00000000  00005ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f52  00000000  00000000  00006494  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ef4  00000000  00000000  000073e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  000092da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	9d c2       	rjmp	.+1338   	; 0x570 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e4       	ldi	r30, 0x42	; 66
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 34       	cpi	r26, 0x4E	; 78
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	f3 d0       	rcall	.+486    	; 0x2aa <main>
  c4:	bc c5       	rjmp	.+2936   	; 0xc3e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
  ce:	0b d4       	rcall	.+2070   	; 0x8e6 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
  d0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
  d4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
  d8:	89 2b       	or	r24, r25
  da:	31 f4       	brne	.+12     	; 0xe8 <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  dc:	85 e1       	ldi	r24, 0x15	; 21
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
  e4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  e8:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <xNextFreeByte>
  ec:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <xNextFreeByte+0x1>
  f0:	c9 01       	movw	r24, r18
  f2:	8c 0f       	add	r24, r28
  f4:	9d 1f       	adc	r25, r29
  f6:	8b 3d       	cpi	r24, 0xDB	; 219
  f8:	45 e0       	ldi	r20, 0x05	; 5
  fa:	94 07       	cpc	r25, r20
  fc:	70 f4       	brcc	.+28     	; 0x11a <pvPortMalloc+0x52>
  fe:	28 17       	cp	r18, r24
 100:	39 07       	cpc	r19, r25
 102:	70 f4       	brcc	.+28     	; 0x120 <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 104:	c0 91 10 01 	lds	r28, 0x0110	; 0x800110 <__data_end>
 108:	d0 91 11 01 	lds	r29, 0x0111	; 0x800111 <__data_end+0x1>
 10c:	c2 0f       	add	r28, r18
 10e:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
 110:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <xNextFreeByte+0x1>
 114:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <xNextFreeByte>
 118:	05 c0       	rjmp	.+10     	; 0x124 <pvPortMalloc+0x5c>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
 11a:	c0 e0       	ldi	r28, 0x00	; 0
 11c:	d0 e0       	ldi	r29, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <pvPortMalloc+0x5c>
 120:	c0 e0       	ldi	r28, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 122:	d0 e0       	ldi	r29, 0x00	; 0
 124:	9d d4       	rcall	.+2362   	; 0xa60 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 126:	ce 01       	movw	r24, r28
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 12e:	08 95       	ret

00000130 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 130:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 132:	03 96       	adiw	r24, 0x03	; 3
 134:	92 83       	std	Z+2, r25	; 0x02
 136:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	3f ef       	ldi	r19, 0xFF	; 255
 13c:	34 83       	std	Z+4, r19	; 0x04
 13e:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 140:	96 83       	std	Z+6, r25	; 0x06
 142:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 144:	90 87       	std	Z+8, r25	; 0x08
 146:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 148:	10 82       	st	Z, r1
 14a:	08 95       	ret

0000014c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 14c:	fc 01       	movw	r30, r24
 14e:	11 86       	std	Z+9, r1	; 0x09
 150:	10 86       	std	Z+8, r1	; 0x08
 152:	08 95       	ret

00000154 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	9c 01       	movw	r18, r24
 15a:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
 15c:	dc 01       	movw	r26, r24
 15e:	11 96       	adiw	r26, 0x01	; 1
 160:	cd 91       	ld	r28, X+
 162:	dc 91       	ld	r29, X
 164:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 166:	d3 83       	std	Z+3, r29	; 0x03
 168:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 16a:	8c 81       	ldd	r24, Y+4	; 0x04
 16c:	9d 81       	ldd	r25, Y+5	; 0x05
 16e:	95 83       	std	Z+5, r25	; 0x05
 170:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 172:	8c 81       	ldd	r24, Y+4	; 0x04
 174:	9d 81       	ldd	r25, Y+5	; 0x05
 176:	dc 01       	movw	r26, r24
 178:	13 96       	adiw	r26, 0x03	; 3
 17a:	7c 93       	st	X, r23
 17c:	6e 93       	st	-X, r22
 17e:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
 180:	7d 83       	std	Y+5, r23	; 0x05
 182:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 184:	31 87       	std	Z+9, r19	; 0x09
 186:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
 188:	f9 01       	movw	r30, r18
 18a:	80 81       	ld	r24, Z
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	80 83       	st	Z, r24
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 19c:	48 81       	ld	r20, Y
 19e:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 1a0:	4f 3f       	cpi	r20, 0xFF	; 255
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	52 07       	cpc	r21, r18
 1a6:	21 f4       	brne	.+8      	; 0x1b0 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 1a8:	fc 01       	movw	r30, r24
 1aa:	a7 81       	ldd	r26, Z+7	; 0x07
 1ac:	b0 85       	ldd	r27, Z+8	; 0x08
 1ae:	0d c0       	rjmp	.+26     	; 0x1ca <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 1b0:	dc 01       	movw	r26, r24
 1b2:	13 96       	adiw	r26, 0x03	; 3
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <vListInsert+0x22>
 1b6:	df 01       	movw	r26, r30
 1b8:	12 96       	adiw	r26, 0x02	; 2
 1ba:	ed 91       	ld	r30, X+
 1bc:	fc 91       	ld	r31, X
 1be:	13 97       	sbiw	r26, 0x03	; 3
 1c0:	20 81       	ld	r18, Z
 1c2:	31 81       	ldd	r19, Z+1	; 0x01
 1c4:	42 17       	cp	r20, r18
 1c6:	53 07       	cpc	r21, r19
 1c8:	b0 f7       	brcc	.-20     	; 0x1b6 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1ca:	12 96       	adiw	r26, 0x02	; 2
 1cc:	ed 91       	ld	r30, X+
 1ce:	fc 91       	ld	r31, X
 1d0:	13 97       	sbiw	r26, 0x03	; 3
 1d2:	fb 83       	std	Y+3, r31	; 0x03
 1d4:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 1d6:	d5 83       	std	Z+5, r29	; 0x05
 1d8:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
 1da:	bd 83       	std	Y+5, r27	; 0x05
 1dc:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
 1de:	13 96       	adiw	r26, 0x03	; 3
 1e0:	dc 93       	st	X, r29
 1e2:	ce 93       	st	-X, r28
 1e4:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 1e6:	99 87       	std	Y+9, r25	; 0x09
 1e8:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 81       	ld	r18, Z
 1ee:	2f 5f       	subi	r18, 0xFF	; 255
 1f0:	20 83       	st	Z, r18
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 1fe:	a0 85       	ldd	r26, Z+8	; 0x08
 200:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 202:	c2 81       	ldd	r28, Z+2	; 0x02
 204:	d3 81       	ldd	r29, Z+3	; 0x03
 206:	84 81       	ldd	r24, Z+4	; 0x04
 208:	95 81       	ldd	r25, Z+5	; 0x05
 20a:	9d 83       	std	Y+5, r25	; 0x05
 20c:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20e:	c4 81       	ldd	r28, Z+4	; 0x04
 210:	d5 81       	ldd	r29, Z+5	; 0x05
 212:	82 81       	ldd	r24, Z+2	; 0x02
 214:	93 81       	ldd	r25, Z+3	; 0x03
 216:	9b 83       	std	Y+3, r25	; 0x03
 218:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 21a:	11 96       	adiw	r26, 0x01	; 1
 21c:	8d 91       	ld	r24, X+
 21e:	9c 91       	ld	r25, X
 220:	12 97       	sbiw	r26, 0x02	; 2
 222:	e8 17       	cp	r30, r24
 224:	f9 07       	cpc	r31, r25
 226:	31 f4       	brne	.+12     	; 0x234 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 228:	84 81       	ldd	r24, Z+4	; 0x04
 22a:	95 81       	ldd	r25, Z+5	; 0x05
 22c:	12 96       	adiw	r26, 0x02	; 2
 22e:	9c 93       	st	X, r25
 230:	8e 93       	st	-X, r24
 232:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 234:	11 86       	std	Z+9, r1	; 0x09
 236:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 238:	8c 91       	ld	r24, X
 23a:	81 50       	subi	r24, 0x01	; 1
 23c:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
 23e:	8c 91       	ld	r24, X
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <LEDS_Tick>:
	led_state = INIT;
}

void LEDS_Tick(){
	//Actions
	switch(led_state){
 246:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <led_state>
 24a:	88 23       	and	r24, r24
 24c:	19 f0       	breq	.+6      	; 0x254 <LEDS_Tick+0xe>
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	19 f0       	breq	.+6      	; 0x258 <LEDS_Tick+0x12>
 252:	05 c0       	rjmp	.+10     	; 0x25e <LEDS_Tick+0x18>
		case INIT:
		PORTD = 0;
 254:	1b b8       	out	0x0b, r1	; 11
		break;
 256:	04 c0       	rjmp	.+8      	; 0x260 <LEDS_Tick+0x1a>
		case L0:
		PORTD = 21;
 258:	85 e1       	ldi	r24, 0x15	; 21
 25a:	8b b9       	out	0x0b, r24	; 11
		break;
 25c:	01 c0       	rjmp	.+2      	; 0x260 <LEDS_Tick+0x1a>
		default:
		PORTD = 0;
 25e:	1b b8       	out	0x0b, r1	; 11
		break;
	}
	//Transitions
	switch(led_state){
 260:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <led_state>
 264:	88 23       	and	r24, r24
 266:	19 f0       	breq	.+6      	; 0x26e <LEDS_Tick+0x28>
		case INIT:
		led_state = L0;
		break;
		case L0:
		led_state = INIT;
 268:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <led_state>
 26c:	08 95       	ret
		break;
	}
	//Transitions
	switch(led_state){
		case INIT:
		led_state = L0;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <led_state>
 274:	08 95       	ret

00000276 <LedSecTask>:
#include "task.h"
#include "croutine.h"
enum LEDState {INIT,L0} led_state;

void LEDS_Init(){
	led_state = INIT;
 276:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <led_state>
}

void LedSecTask() {
	LEDS_Init();
	for(;;) {
		LEDS_Tick();
 27a:	e5 df       	rcall	.-54     	; 0x246 <LEDS_Tick>
		vTaskDelay(1000);
 27c:	88 ee       	ldi	r24, 0xE8	; 232
 27e:	93 e0       	ldi	r25, 0x03	; 3
 280:	68 d4       	rcall	.+2256   	; 0xb52 <vTaskDelay>
 282:	fb cf       	rjmp	.-10     	; 0x27a <LedSecTask+0x4>

00000284 <StartSecPulse>:
	}
}

void StartSecPulse(unsigned portBASE_TYPE Priority) {
 284:	ef 92       	push	r14
 286:	ff 92       	push	r15
 288:	0f 93       	push	r16
	xTaskCreate(LedSecTask,
 28a:	e1 2c       	mov	r14, r1
 28c:	f1 2c       	mov	r15, r1
 28e:	08 2f       	mov	r16, r24
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	45 e5       	ldi	r20, 0x55	; 85
 296:	50 e0       	ldi	r21, 0x00	; 0
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	71 e0       	ldi	r23, 0x01	; 1
 29c:	8b e3       	ldi	r24, 0x3B	; 59
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	fd d1       	rcall	.+1018   	; 0x69c <xTaskCreate>
	(signed portCHAR *)"LedSecTask",
	configMINIMAL_STACK_SIZE,
	NULL,
	Priority,
	NULL );
}
 2a2:	0f 91       	pop	r16
 2a4:	ff 90       	pop	r15
 2a6:	ef 90       	pop	r14
 2a8:	08 95       	ret

000002aa <main>:

int main(void) {
	DDRA = 0x00; PORTA=0xFF;
 2aa:	11 b8       	out	0x01, r1	; 1
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
 2ae:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF; PORTD = 0x00;
 2b0:	8a b9       	out	0x0a, r24	; 10
 2b2:	1b b8       	out	0x0b, r1	; 11
	//Start Tasks
	StartSecPulse(1);
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	e6 df       	rcall	.-52     	; 0x284 <StartSecPulse>
	//RunSchedular
	vTaskStartScheduler();
 2b8:	ee d2       	rcall	.+1500   	; 0x896 <vTaskStartScheduler>
 2ba:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	08 95       	ret

000002c0 <pxPortInitialiseStack>:
 2c0:	31 e1       	ldi	r19, 0x11	; 17
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 2c2:	fc 01       	movw	r30, r24
 2c4:	30 83       	st	Z, r19
 2c6:	31 97       	sbiw	r30, 0x01	; 1
 2c8:	22 e2       	ldi	r18, 0x22	; 34
 2ca:	20 83       	st	Z, r18
 2cc:	31 97       	sbiw	r30, 0x01	; 1
 2ce:	a3 e3       	ldi	r26, 0x33	; 51
 2d0:	a0 83       	st	Z, r26
 2d2:	31 97       	sbiw	r30, 0x01	; 1
 2d4:	60 83       	st	Z, r22
 2d6:	31 97       	sbiw	r30, 0x01	; 1
 2d8:	70 83       	st	Z, r23
 2da:	31 97       	sbiw	r30, 0x01	; 1
 2dc:	10 82       	st	Z, r1
 2de:	31 97       	sbiw	r30, 0x01	; 1
 2e0:	60 e8       	ldi	r22, 0x80	; 128
 2e2:	60 83       	st	Z, r22
 2e4:	31 97       	sbiw	r30, 0x01	; 1
 2e6:	10 82       	st	Z, r1
 2e8:	31 97       	sbiw	r30, 0x01	; 1
 2ea:	62 e0       	ldi	r22, 0x02	; 2
 2ec:	60 83       	st	Z, r22
 2ee:	31 97       	sbiw	r30, 0x01	; 1
 2f0:	63 e0       	ldi	r22, 0x03	; 3
 2f2:	60 83       	st	Z, r22
 2f4:	31 97       	sbiw	r30, 0x01	; 1
 2f6:	64 e0       	ldi	r22, 0x04	; 4
 2f8:	60 83       	st	Z, r22
 2fa:	31 97       	sbiw	r30, 0x01	; 1
 2fc:	65 e0       	ldi	r22, 0x05	; 5
 2fe:	60 83       	st	Z, r22
 300:	31 97       	sbiw	r30, 0x01	; 1
 302:	66 e0       	ldi	r22, 0x06	; 6
 304:	60 83       	st	Z, r22
 306:	31 97       	sbiw	r30, 0x01	; 1
 308:	67 e0       	ldi	r22, 0x07	; 7
 30a:	60 83       	st	Z, r22
 30c:	31 97       	sbiw	r30, 0x01	; 1
 30e:	68 e0       	ldi	r22, 0x08	; 8
 310:	60 83       	st	Z, r22
 312:	31 97       	sbiw	r30, 0x01	; 1
 314:	69 e0       	ldi	r22, 0x09	; 9
 316:	60 83       	st	Z, r22
 318:	31 97       	sbiw	r30, 0x01	; 1
 31a:	60 e1       	ldi	r22, 0x10	; 16
 31c:	60 83       	st	Z, r22
 31e:	31 97       	sbiw	r30, 0x01	; 1
 320:	30 83       	st	Z, r19
 322:	31 97       	sbiw	r30, 0x01	; 1
 324:	32 e1       	ldi	r19, 0x12	; 18
 326:	30 83       	st	Z, r19
 328:	31 97       	sbiw	r30, 0x01	; 1
 32a:	33 e1       	ldi	r19, 0x13	; 19
 32c:	30 83       	st	Z, r19
 32e:	31 97       	sbiw	r30, 0x01	; 1
 330:	34 e1       	ldi	r19, 0x14	; 20
 332:	30 83       	st	Z, r19
 334:	31 97       	sbiw	r30, 0x01	; 1
 336:	35 e1       	ldi	r19, 0x15	; 21
 338:	30 83       	st	Z, r19
 33a:	31 97       	sbiw	r30, 0x01	; 1
 33c:	36 e1       	ldi	r19, 0x16	; 22
 33e:	30 83       	st	Z, r19
 340:	31 97       	sbiw	r30, 0x01	; 1
 342:	37 e1       	ldi	r19, 0x17	; 23
 344:	30 83       	st	Z, r19
 346:	31 97       	sbiw	r30, 0x01	; 1
 348:	38 e1       	ldi	r19, 0x18	; 24
 34a:	30 83       	st	Z, r19
 34c:	31 97       	sbiw	r30, 0x01	; 1
 34e:	39 e1       	ldi	r19, 0x19	; 25
 350:	30 83       	st	Z, r19
 352:	31 97       	sbiw	r30, 0x01	; 1
 354:	30 e2       	ldi	r19, 0x20	; 32
 356:	30 83       	st	Z, r19
 358:	31 97       	sbiw	r30, 0x01	; 1
 35a:	31 e2       	ldi	r19, 0x21	; 33
 35c:	30 83       	st	Z, r19
 35e:	31 97       	sbiw	r30, 0x01	; 1
 360:	20 83       	st	Z, r18
 362:	31 97       	sbiw	r30, 0x01	; 1
 364:	23 e2       	ldi	r18, 0x23	; 35
 366:	20 83       	st	Z, r18
 368:	31 97       	sbiw	r30, 0x01	; 1
 36a:	40 83       	st	Z, r20
 36c:	31 97       	sbiw	r30, 0x01	; 1
 36e:	50 83       	st	Z, r21
 370:	31 97       	sbiw	r30, 0x01	; 1
 372:	26 e2       	ldi	r18, 0x26	; 38
 374:	20 83       	st	Z, r18
 376:	31 97       	sbiw	r30, 0x01	; 1
 378:	27 e2       	ldi	r18, 0x27	; 39
 37a:	20 83       	st	Z, r18
 37c:	31 97       	sbiw	r30, 0x01	; 1
 37e:	28 e2       	ldi	r18, 0x28	; 40
 380:	20 83       	st	Z, r18
 382:	31 97       	sbiw	r30, 0x01	; 1
 384:	29 e2       	ldi	r18, 0x29	; 41
 386:	20 83       	st	Z, r18
 388:	31 97       	sbiw	r30, 0x01	; 1
 38a:	20 e3       	ldi	r18, 0x30	; 48
 38c:	20 83       	st	Z, r18
 38e:	31 97       	sbiw	r30, 0x01	; 1
 390:	21 e3       	ldi	r18, 0x31	; 49
 392:	20 83       	st	Z, r18
 394:	86 97       	sbiw	r24, 0x26	; 38
 396:	08 95       	ret

00000398 <xPortStartScheduler>:
 398:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 39c:	8c e7       	ldi	r24, 0x7C	; 124
 39e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 3a2:	8b e0       	ldi	r24, 0x0B	; 11
 3a4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3a8:	ef e6       	ldi	r30, 0x6F	; 111
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	82 60       	ori	r24, 0x02	; 2
 3b0:	80 83       	st	Z, r24
 3b2:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 3b6:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 3ba:	cd 91       	ld	r28, X+
 3bc:	cd bf       	out	0x3d, r28	; 61
 3be:	dd 91       	ld	r29, X+
 3c0:	de bf       	out	0x3e, r29	; 62
 3c2:	ff 91       	pop	r31
 3c4:	ef 91       	pop	r30
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	bf 91       	pop	r27
 3cc:	af 91       	pop	r26
 3ce:	9f 91       	pop	r25
 3d0:	8f 91       	pop	r24
 3d2:	7f 91       	pop	r23
 3d4:	6f 91       	pop	r22
 3d6:	5f 91       	pop	r21
 3d8:	4f 91       	pop	r20
 3da:	3f 91       	pop	r19
 3dc:	2f 91       	pop	r18
 3de:	1f 91       	pop	r17
 3e0:	0f 91       	pop	r16
 3e2:	ff 90       	pop	r15
 3e4:	ef 90       	pop	r14
 3e6:	df 90       	pop	r13
 3e8:	cf 90       	pop	r12
 3ea:	bf 90       	pop	r11
 3ec:	af 90       	pop	r10
 3ee:	9f 90       	pop	r9
 3f0:	8f 90       	pop	r8
 3f2:	7f 90       	pop	r7
 3f4:	6f 90       	pop	r6
 3f6:	5f 90       	pop	r5
 3f8:	4f 90       	pop	r4
 3fa:	3f 90       	pop	r3
 3fc:	2f 90       	pop	r2
 3fe:	1f 90       	pop	r1
 400:	0f 90       	pop	r0
 402:	0f be       	out	0x3f, r0	; 63
 404:	0f 90       	pop	r0
 406:	08 95       	ret
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	08 95       	ret

0000040c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 40c:	0f 92       	push	r0
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	f8 94       	cli
 412:	0f 92       	push	r0
 414:	1f 92       	push	r1
 416:	11 24       	eor	r1, r1
 418:	2f 92       	push	r2
 41a:	3f 92       	push	r3
 41c:	4f 92       	push	r4
 41e:	5f 92       	push	r5
 420:	6f 92       	push	r6
 422:	7f 92       	push	r7
 424:	8f 92       	push	r8
 426:	9f 92       	push	r9
 428:	af 92       	push	r10
 42a:	bf 92       	push	r11
 42c:	cf 92       	push	r12
 42e:	df 92       	push	r13
 430:	ef 92       	push	r14
 432:	ff 92       	push	r15
 434:	0f 93       	push	r16
 436:	1f 93       	push	r17
 438:	2f 93       	push	r18
 43a:	3f 93       	push	r19
 43c:	4f 93       	push	r20
 43e:	5f 93       	push	r21
 440:	6f 93       	push	r22
 442:	7f 93       	push	r23
 444:	8f 93       	push	r24
 446:	9f 93       	push	r25
 448:	af 93       	push	r26
 44a:	bf 93       	push	r27
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	ef 93       	push	r30
 452:	ff 93       	push	r31
 454:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 458:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 45c:	0d b6       	in	r0, 0x3d	; 61
 45e:	0d 92       	st	X+, r0
 460:	0e b6       	in	r0, 0x3e	; 62
 462:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 464:	86 d3       	rcall	.+1804   	; 0xb72 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 466:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 46a:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 46e:	cd 91       	ld	r28, X+
 470:	cd bf       	out	0x3d, r28	; 61
 472:	dd 91       	ld	r29, X+
 474:	de bf       	out	0x3e, r29	; 62
 476:	ff 91       	pop	r31
 478:	ef 91       	pop	r30
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	bf 91       	pop	r27
 480:	af 91       	pop	r26
 482:	9f 91       	pop	r25
 484:	8f 91       	pop	r24
 486:	7f 91       	pop	r23
 488:	6f 91       	pop	r22
 48a:	5f 91       	pop	r21
 48c:	4f 91       	pop	r20
 48e:	3f 91       	pop	r19
 490:	2f 91       	pop	r18
 492:	1f 91       	pop	r17
 494:	0f 91       	pop	r16
 496:	ff 90       	pop	r15
 498:	ef 90       	pop	r14
 49a:	df 90       	pop	r13
 49c:	cf 90       	pop	r12
 49e:	bf 90       	pop	r11
 4a0:	af 90       	pop	r10
 4a2:	9f 90       	pop	r9
 4a4:	8f 90       	pop	r8
 4a6:	7f 90       	pop	r7
 4a8:	6f 90       	pop	r6
 4aa:	5f 90       	pop	r5
 4ac:	4f 90       	pop	r4
 4ae:	3f 90       	pop	r3
 4b0:	2f 90       	pop	r2
 4b2:	1f 90       	pop	r1
 4b4:	0f 90       	pop	r0
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	0f 90       	pop	r0

	asm volatile ( "ret" );
 4ba:	08 95       	ret

000004bc <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 4bc:	0f 92       	push	r0
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	f8 94       	cli
 4c2:	0f 92       	push	r0
 4c4:	1f 92       	push	r1
 4c6:	11 24       	eor	r1, r1
 4c8:	2f 92       	push	r2
 4ca:	3f 92       	push	r3
 4cc:	4f 92       	push	r4
 4ce:	5f 92       	push	r5
 4d0:	6f 92       	push	r6
 4d2:	7f 92       	push	r7
 4d4:	8f 92       	push	r8
 4d6:	9f 92       	push	r9
 4d8:	af 92       	push	r10
 4da:	bf 92       	push	r11
 4dc:	cf 92       	push	r12
 4de:	df 92       	push	r13
 4e0:	ef 92       	push	r14
 4e2:	ff 92       	push	r15
 4e4:	0f 93       	push	r16
 4e6:	1f 93       	push	r17
 4e8:	2f 93       	push	r18
 4ea:	3f 93       	push	r19
 4ec:	4f 93       	push	r20
 4ee:	5f 93       	push	r21
 4f0:	6f 93       	push	r22
 4f2:	7f 93       	push	r23
 4f4:	8f 93       	push	r24
 4f6:	9f 93       	push	r25
 4f8:	af 93       	push	r26
 4fa:	bf 93       	push	r27
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	ef 93       	push	r30
 502:	ff 93       	push	r31
 504:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 508:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 50c:	0d b6       	in	r0, 0x3d	; 61
 50e:	0d 92       	st	X+, r0
 510:	0e b6       	in	r0, 0x3e	; 62
 512:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 514:	ee d1       	rcall	.+988    	; 0x8f2 <xTaskIncrementTick>
 516:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 518:	2c d3       	rcall	.+1624   	; 0xb72 <vTaskSwitchContext>
 51a:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
	}
	portRESTORE_CONTEXT();
 51e:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 522:	cd 91       	ld	r28, X+
 524:	cd bf       	out	0x3d, r28	; 61
 526:	dd 91       	ld	r29, X+
 528:	de bf       	out	0x3e, r29	; 62
 52a:	ff 91       	pop	r31
 52c:	ef 91       	pop	r30
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	bf 91       	pop	r27
 534:	af 91       	pop	r26
 536:	9f 91       	pop	r25
 538:	8f 91       	pop	r24
 53a:	7f 91       	pop	r23
 53c:	6f 91       	pop	r22
 53e:	5f 91       	pop	r21
 540:	4f 91       	pop	r20
 542:	3f 91       	pop	r19
 544:	2f 91       	pop	r18
 546:	1f 91       	pop	r17
 548:	0f 91       	pop	r16
 54a:	ff 90       	pop	r15
 54c:	ef 90       	pop	r14
 54e:	df 90       	pop	r13
 550:	cf 90       	pop	r12
 552:	bf 90       	pop	r11
 554:	af 90       	pop	r10
 556:	9f 90       	pop	r9
 558:	8f 90       	pop	r8
 55a:	7f 90       	pop	r7
 55c:	6f 90       	pop	r6
 55e:	5f 90       	pop	r5
 560:	4f 90       	pop	r4
 562:	3f 90       	pop	r3
 564:	2f 90       	pop	r2
 566:	1f 90       	pop	r1
 568:	0f 90       	pop	r0
 56a:	0f be       	out	0x3f, r0	; 63
 56c:	0f 90       	pop	r0
 56e:	08 95       	ret

00000570 <__vector_13>:

	asm volatile ( "ret" );
 570:	a5 df       	rcall	.-182    	; 0x4bc <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
 572:	18 95       	reti

00000574 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 574:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 578:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 57c:	80 81       	ld	r24, Z
 57e:	81 11       	cpse	r24, r1
 580:	07 c0       	rjmp	.+14     	; 0x590 <prvResetNextTaskUnblockTime+0x1c>
 582:	8f ef       	ldi	r24, 0xFF	; 255
 584:	9f ef       	ldi	r25, 0xFF	; 255
 586:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 58a:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 58e:	08 95       	ret
 590:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 594:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 598:	05 80       	ldd	r0, Z+5	; 0x05
 59a:	f6 81       	ldd	r31, Z+6	; 0x06
 59c:	e0 2d       	mov	r30, r0
 59e:	06 80       	ldd	r0, Z+6	; 0x06
 5a0:	f7 81       	ldd	r31, Z+7	; 0x07
 5a2:	e0 2d       	mov	r30, r0
 5a4:	82 81       	ldd	r24, Z+2	; 0x02
 5a6:	93 81       	ldd	r25, Z+3	; 0x03
 5a8:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 5ac:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 5b0:	08 95       	ret

000005b2 <prvIdleTask>:
 5b2:	0f ef       	ldi	r16, 0xFF	; 255
 5b4:	16 e0       	ldi	r17, 0x06	; 6
 5b6:	0f 2e       	mov	r0, r31
 5b8:	f7 e2       	ldi	r31, 0x27	; 39
 5ba:	ef 2e       	mov	r14, r31
 5bc:	f7 e0       	ldi	r31, 0x07	; 7
 5be:	ff 2e       	mov	r15, r31
 5c0:	f0 2d       	mov	r31, r0
 5c2:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 5c6:	88 23       	and	r24, r24
 5c8:	11 f1       	breq	.+68     	; 0x60e <prvIdleTask+0x5c>
 5ca:	0f b6       	in	r0, 0x3f	; 63
 5cc:	f8 94       	cli
 5ce:	0f 92       	push	r0
 5d0:	d8 01       	movw	r26, r16
 5d2:	15 96       	adiw	r26, 0x05	; 5
 5d4:	ed 91       	ld	r30, X+
 5d6:	fc 91       	ld	r31, X
 5d8:	16 97       	sbiw	r26, 0x06	; 6
 5da:	c6 81       	ldd	r28, Z+6	; 0x06
 5dc:	d7 81       	ldd	r29, Z+7	; 0x07
 5de:	ce 01       	movw	r24, r28
 5e0:	02 96       	adiw	r24, 0x02	; 2
 5e2:	0a de       	rcall	.-1004   	; 0x1f8 <uxListRemove>
 5e4:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 5e8:	81 50       	subi	r24, 0x01	; 1
 5ea:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <uxCurrentNumberOfTasks>
 5ee:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 5f2:	81 50       	subi	r24, 0x01	; 1
 5f4:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 5f8:	0f 90       	pop	r0
 5fa:	0f be       	out	0x3f, r0	; 63
 5fc:	8f 89       	ldd	r24, Y+23	; 0x17
 5fe:	98 8d       	ldd	r25, Y+24	; 0x18
 600:	96 dd       	rcall	.-1236   	; 0x12e <vPortFree>
 602:	ce 01       	movw	r24, r28
 604:	94 dd       	rcall	.-1240   	; 0x12e <vPortFree>
 606:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 60a:	81 11       	cpse	r24, r1
 60c:	de cf       	rjmp	.-68     	; 0x5ca <prvIdleTask+0x18>
 60e:	f7 01       	movw	r30, r14
 610:	80 81       	ld	r24, Z
 612:	82 30       	cpi	r24, 0x02	; 2
 614:	b0 f2       	brcs	.-84     	; 0x5c2 <prvIdleTask+0x10>
 616:	fa de       	rcall	.-524    	; 0x40c <vPortYield>
 618:	d4 cf       	rjmp	.-88     	; 0x5c2 <prvIdleTask+0x10>

0000061a <prvAddCurrentTaskToDelayedList>:
 61a:	0f 93       	push	r16
 61c:	1f 93       	push	r17
 61e:	cf 93       	push	r28
 620:	df 93       	push	r29
 622:	ec 01       	movw	r28, r24
 624:	00 91 fb 06 	lds	r16, 0x06FB	; 0x8006fb <xTickCount>
 628:	10 91 fc 06 	lds	r17, 0x06FC	; 0x8006fc <xTickCount+0x1>
 62c:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <pxCurrentTCB>
 630:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 634:	02 96       	adiw	r24, 0x02	; 2
 636:	e0 dd       	rcall	.-1088   	; 0x1f8 <uxListRemove>
 638:	c0 0f       	add	r28, r16
 63a:	d1 1f       	adc	r29, r17
 63c:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 640:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 644:	d3 83       	std	Z+3, r29	; 0x03
 646:	c2 83       	std	Z+2, r28	; 0x02
 648:	c0 17       	cp	r28, r16
 64a:	d1 07       	cpc	r29, r17
 64c:	60 f4       	brcc	.+24     	; 0x666 <prvAddCurrentTaskToDelayedList+0x4c>
 64e:	60 91 4b 07 	lds	r22, 0x074B	; 0x80074b <pxCurrentTCB>
 652:	70 91 4c 07 	lds	r23, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 656:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <pxOverflowDelayedTaskList>
 65a:	90 91 12 07 	lds	r25, 0x0712	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 65e:	6e 5f       	subi	r22, 0xFE	; 254
 660:	7f 4f       	sbci	r23, 0xFF	; 255
 662:	99 dd       	rcall	.-1230   	; 0x196 <vListInsert>
 664:	16 c0       	rjmp	.+44     	; 0x692 <prvAddCurrentTaskToDelayedList+0x78>
 666:	60 91 4b 07 	lds	r22, 0x074B	; 0x80074b <pxCurrentTCB>
 66a:	70 91 4c 07 	lds	r23, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 66e:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
 672:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 676:	6e 5f       	subi	r22, 0xFE	; 254
 678:	7f 4f       	sbci	r23, 0xFF	; 255
 67a:	8d dd       	rcall	.-1254   	; 0x196 <vListInsert>
 67c:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <xNextTaskUnblockTime>
 680:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 684:	c8 17       	cp	r28, r24
 686:	d9 07       	cpc	r29, r25
 688:	20 f4       	brcc	.+8      	; 0x692 <prvAddCurrentTaskToDelayedList+0x78>
 68a:	d0 93 f4 06 	sts	0x06F4, r29	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 68e:	c0 93 f3 06 	sts	0x06F3, r28	; 0x8006f3 <xNextTaskUnblockTime>
 692:	df 91       	pop	r29
 694:	cf 91       	pop	r28
 696:	1f 91       	pop	r17
 698:	0f 91       	pop	r16
 69a:	08 95       	ret

0000069c <xTaskCreate>:
 69c:	4f 92       	push	r4
 69e:	5f 92       	push	r5
 6a0:	6f 92       	push	r6
 6a2:	7f 92       	push	r7
 6a4:	8f 92       	push	r8
 6a6:	9f 92       	push	r9
 6a8:	af 92       	push	r10
 6aa:	bf 92       	push	r11
 6ac:	cf 92       	push	r12
 6ae:	df 92       	push	r13
 6b0:	ef 92       	push	r14
 6b2:	ff 92       	push	r15
 6b4:	0f 93       	push	r16
 6b6:	cf 93       	push	r28
 6b8:	df 93       	push	r29
 6ba:	4c 01       	movw	r8, r24
 6bc:	6b 01       	movw	r12, r22
 6be:	5a 01       	movw	r10, r20
 6c0:	29 01       	movw	r4, r18
 6c2:	ca 01       	movw	r24, r20
 6c4:	01 dd       	rcall	.-1534   	; 0xc8 <pvPortMalloc>
 6c6:	3c 01       	movw	r6, r24
 6c8:	89 2b       	or	r24, r25
 6ca:	09 f4       	brne	.+2      	; 0x6ce <xTaskCreate+0x32>
 6cc:	d3 c0       	rjmp	.+422    	; 0x874 <xTaskCreate+0x1d8>
 6ce:	86 e2       	ldi	r24, 0x26	; 38
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	fa dc       	rcall	.-1548   	; 0xc8 <pvPortMalloc>
 6d4:	ec 01       	movw	r28, r24
 6d6:	89 2b       	or	r24, r25
 6d8:	59 f0       	breq	.+22     	; 0x6f0 <xTaskCreate+0x54>
 6da:	78 8e       	std	Y+24, r7	; 0x18
 6dc:	6f 8a       	std	Y+23, r6	; 0x17
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	a8 1a       	sub	r10, r24
 6e2:	b1 08       	sbc	r11, r1
 6e4:	a6 0c       	add	r10, r6
 6e6:	b7 1c       	adc	r11, r7
 6e8:	c1 14       	cp	r12, r1
 6ea:	d1 04       	cpc	r13, r1
 6ec:	21 f4       	brne	.+8      	; 0x6f6 <xTaskCreate+0x5a>
 6ee:	1f c0       	rjmp	.+62     	; 0x72e <xTaskCreate+0x92>
 6f0:	c3 01       	movw	r24, r6
 6f2:	1d dd       	rcall	.-1478   	; 0x12e <vPortFree>
 6f4:	bf c0       	rjmp	.+382    	; 0x874 <xTaskCreate+0x1d8>
 6f6:	d6 01       	movw	r26, r12
 6f8:	8c 91       	ld	r24, X
 6fa:	89 8f       	std	Y+25, r24	; 0x19
 6fc:	8c 91       	ld	r24, X
 6fe:	88 23       	and	r24, r24
 700:	a1 f0       	breq	.+40     	; 0x72a <xTaskCreate+0x8e>
 702:	ae 01       	movw	r20, r28
 704:	46 5e       	subi	r20, 0xE6	; 230
 706:	5f 4f       	sbci	r21, 0xFF	; 255
 708:	f6 01       	movw	r30, r12
 70a:	31 96       	adiw	r30, 0x01	; 1
 70c:	b8 e0       	ldi	r27, 0x08	; 8
 70e:	cb 0e       	add	r12, r27
 710:	d1 1c       	adc	r13, r1
 712:	cf 01       	movw	r24, r30
 714:	21 91       	ld	r18, Z+
 716:	da 01       	movw	r26, r20
 718:	2d 93       	st	X+, r18
 71a:	ad 01       	movw	r20, r26
 71c:	dc 01       	movw	r26, r24
 71e:	8c 91       	ld	r24, X
 720:	88 23       	and	r24, r24
 722:	19 f0       	breq	.+6      	; 0x72a <xTaskCreate+0x8e>
 724:	ec 15       	cp	r30, r12
 726:	fd 05       	cpc	r31, r13
 728:	a1 f7       	brne	.-24     	; 0x712 <xTaskCreate+0x76>
 72a:	18 a2       	std	Y+32, r1	; 0x20
 72c:	01 c0       	rjmp	.+2      	; 0x730 <xTaskCreate+0x94>
 72e:	19 8e       	std	Y+25, r1	; 0x19
 730:	04 30       	cpi	r16, 0x04	; 4
 732:	08 f0       	brcs	.+2      	; 0x736 <xTaskCreate+0x9a>
 734:	03 e0       	ldi	r16, 0x03	; 3
 736:	0e 8b       	std	Y+22, r16	; 0x16
 738:	6e 01       	movw	r12, r28
 73a:	b2 e0       	ldi	r27, 0x02	; 2
 73c:	cb 0e       	add	r12, r27
 73e:	d1 1c       	adc	r13, r1
 740:	c6 01       	movw	r24, r12
 742:	04 dd       	rcall	.-1528   	; 0x14c <vListInitialiseItem>
 744:	ce 01       	movw	r24, r28
 746:	0c 96       	adiw	r24, 0x0c	; 12
 748:	01 dd       	rcall	.-1534   	; 0x14c <vListInitialiseItem>
 74a:	d9 87       	std	Y+9, r29	; 0x09
 74c:	c8 87       	std	Y+8, r28	; 0x08
 74e:	84 e0       	ldi	r24, 0x04	; 4
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	80 1b       	sub	r24, r16
 754:	91 09       	sbc	r25, r1
 756:	9d 87       	std	Y+13, r25	; 0x0d
 758:	8c 87       	std	Y+12, r24	; 0x0c
 75a:	db 8b       	std	Y+19, r29	; 0x13
 75c:	ca 8b       	std	Y+18, r28	; 0x12
 75e:	19 a2       	std	Y+33, r1	; 0x21
 760:	1a a2       	std	Y+34, r1	; 0x22
 762:	1b a2       	std	Y+35, r1	; 0x23
 764:	1c a2       	std	Y+36, r1	; 0x24
 766:	1d a2       	std	Y+37, r1	; 0x25
 768:	a2 01       	movw	r20, r4
 76a:	b4 01       	movw	r22, r8
 76c:	c5 01       	movw	r24, r10
 76e:	a8 dd       	rcall	.-1200   	; 0x2c0 <pxPortInitialiseStack>
 770:	99 83       	std	Y+1, r25	; 0x01
 772:	88 83       	st	Y, r24
 774:	e1 14       	cp	r14, r1
 776:	f1 04       	cpc	r15, r1
 778:	19 f0       	breq	.+6      	; 0x780 <xTaskCreate+0xe4>
 77a:	f7 01       	movw	r30, r14
 77c:	d1 83       	std	Z+1, r29	; 0x01
 77e:	c0 83       	st	Z, r28
 780:	0f b6       	in	r0, 0x3f	; 63
 782:	f8 94       	cli
 784:	0f 92       	push	r0
 786:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 78a:	8f 5f       	subi	r24, 0xFF	; 255
 78c:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <uxCurrentNumberOfTasks>
 790:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <pxCurrentTCB>
 794:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 798:	89 2b       	or	r24, r25
 79a:	69 f5       	brne	.+90     	; 0x7f6 <xTaskCreate+0x15a>
 79c:	d0 93 4c 07 	sts	0x074C, r29	; 0x80074c <pxCurrentTCB+0x1>
 7a0:	c0 93 4b 07 	sts	0x074B, r28	; 0x80074b <pxCurrentTCB>
 7a4:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 7a8:	81 30       	cpi	r24, 0x01	; 1
 7aa:	a9 f5       	brne	.+106    	; 0x816 <xTaskCreate+0x17a>
 7ac:	87 e2       	ldi	r24, 0x27	; 39
 7ae:	97 e0       	ldi	r25, 0x07	; 7
 7b0:	bf dc       	rcall	.-1666   	; 0x130 <vListInitialise>
 7b2:	80 e3       	ldi	r24, 0x30	; 48
 7b4:	97 e0       	ldi	r25, 0x07	; 7
 7b6:	bc dc       	rcall	.-1672   	; 0x130 <vListInitialise>
 7b8:	89 e3       	ldi	r24, 0x39	; 57
 7ba:	97 e0       	ldi	r25, 0x07	; 7
 7bc:	b9 dc       	rcall	.-1678   	; 0x130 <vListInitialise>
 7be:	82 e4       	ldi	r24, 0x42	; 66
 7c0:	97 e0       	ldi	r25, 0x07	; 7
 7c2:	b6 dc       	rcall	.-1684   	; 0x130 <vListInitialise>
 7c4:	8e e1       	ldi	r24, 0x1E	; 30
 7c6:	97 e0       	ldi	r25, 0x07	; 7
 7c8:	b3 dc       	rcall	.-1690   	; 0x130 <vListInitialise>
 7ca:	85 e1       	ldi	r24, 0x15	; 21
 7cc:	97 e0       	ldi	r25, 0x07	; 7
 7ce:	b0 dc       	rcall	.-1696   	; 0x130 <vListInitialise>
 7d0:	88 e0       	ldi	r24, 0x08	; 8
 7d2:	97 e0       	ldi	r25, 0x07	; 7
 7d4:	ad dc       	rcall	.-1702   	; 0x130 <vListInitialise>
 7d6:	8f ef       	ldi	r24, 0xFF	; 255
 7d8:	96 e0       	ldi	r25, 0x06	; 6
 7da:	aa dc       	rcall	.-1708   	; 0x130 <vListInitialise>
 7dc:	8e e1       	ldi	r24, 0x1E	; 30
 7de:	97 e0       	ldi	r25, 0x07	; 7
 7e0:	90 93 14 07 	sts	0x0714, r25	; 0x800714 <pxDelayedTaskList+0x1>
 7e4:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <pxDelayedTaskList>
 7e8:	85 e1       	ldi	r24, 0x15	; 21
 7ea:	97 e0       	ldi	r25, 0x07	; 7
 7ec:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 7f0:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <pxOverflowDelayedTaskList>
 7f4:	10 c0       	rjmp	.+32     	; 0x816 <xTaskCreate+0x17a>
 7f6:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <xSchedulerRunning>
 7fa:	81 11       	cpse	r24, r1
 7fc:	0c c0       	rjmp	.+24     	; 0x816 <xTaskCreate+0x17a>
 7fe:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 802:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 806:	96 89       	ldd	r25, Z+22	; 0x16
 808:	8e 89       	ldd	r24, Y+22	; 0x16
 80a:	89 17       	cp	r24, r25
 80c:	20 f0       	brcs	.+8      	; 0x816 <xTaskCreate+0x17a>
 80e:	d0 93 4c 07 	sts	0x074C, r29	; 0x80074c <pxCurrentTCB+0x1>
 812:	c0 93 4b 07 	sts	0x074B, r28	; 0x80074b <pxCurrentTCB>
 816:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxTaskNumber>
 81a:	8f 5f       	subi	r24, 0xFF	; 255
 81c:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <uxTaskNumber>
 820:	8e 89       	ldd	r24, Y+22	; 0x16
 822:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 826:	98 17       	cp	r25, r24
 828:	10 f4       	brcc	.+4      	; 0x82e <xTaskCreate+0x192>
 82a:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopReadyPriority>
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	9c 01       	movw	r18, r24
 832:	22 0f       	add	r18, r18
 834:	33 1f       	adc	r19, r19
 836:	22 0f       	add	r18, r18
 838:	33 1f       	adc	r19, r19
 83a:	22 0f       	add	r18, r18
 83c:	33 1f       	adc	r19, r19
 83e:	82 0f       	add	r24, r18
 840:	93 1f       	adc	r25, r19
 842:	b6 01       	movw	r22, r12
 844:	89 5d       	subi	r24, 0xD9	; 217
 846:	98 4f       	sbci	r25, 0xF8	; 248
 848:	85 dc       	rcall	.-1782   	; 0x154 <vListInsertEnd>
 84a:	0f 90       	pop	r0
 84c:	0f be       	out	0x3f, r0	; 63
 84e:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <xSchedulerRunning>
 852:	88 23       	and	r24, r24
 854:	59 f0       	breq	.+22     	; 0x86c <xTaskCreate+0x1d0>
 856:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 85a:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 85e:	96 89       	ldd	r25, Z+22	; 0x16
 860:	8e 89       	ldd	r24, Y+22	; 0x16
 862:	98 17       	cp	r25, r24
 864:	28 f4       	brcc	.+10     	; 0x870 <xTaskCreate+0x1d4>
 866:	d2 dd       	rcall	.-1116   	; 0x40c <vPortYield>
 868:	81 e0       	ldi	r24, 0x01	; 1
 86a:	05 c0       	rjmp	.+10     	; 0x876 <xTaskCreate+0x1da>
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	03 c0       	rjmp	.+6      	; 0x876 <xTaskCreate+0x1da>
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	01 c0       	rjmp	.+2      	; 0x876 <xTaskCreate+0x1da>
 874:	8f ef       	ldi	r24, 0xFF	; 255
 876:	df 91       	pop	r29
 878:	cf 91       	pop	r28
 87a:	0f 91       	pop	r16
 87c:	ff 90       	pop	r15
 87e:	ef 90       	pop	r14
 880:	df 90       	pop	r13
 882:	cf 90       	pop	r12
 884:	bf 90       	pop	r11
 886:	af 90       	pop	r10
 888:	9f 90       	pop	r9
 88a:	8f 90       	pop	r8
 88c:	7f 90       	pop	r7
 88e:	6f 90       	pop	r6
 890:	5f 90       	pop	r5
 892:	4f 90       	pop	r4
 894:	08 95       	ret

00000896 <vTaskStartScheduler>:
 896:	ef 92       	push	r14
 898:	ff 92       	push	r15
 89a:	0f 93       	push	r16
 89c:	0f 2e       	mov	r0, r31
 89e:	f1 ef       	ldi	r31, 0xF1	; 241
 8a0:	ef 2e       	mov	r14, r31
 8a2:	f6 e0       	ldi	r31, 0x06	; 6
 8a4:	ff 2e       	mov	r15, r31
 8a6:	f0 2d       	mov	r31, r0
 8a8:	00 e0       	ldi	r16, 0x00	; 0
 8aa:	20 e0       	ldi	r18, 0x00	; 0
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	45 e5       	ldi	r20, 0x55	; 85
 8b0:	50 e0       	ldi	r21, 0x00	; 0
 8b2:	6b e0       	ldi	r22, 0x0B	; 11
 8b4:	71 e0       	ldi	r23, 0x01	; 1
 8b6:	89 ed       	ldi	r24, 0xD9	; 217
 8b8:	92 e0       	ldi	r25, 0x02	; 2
 8ba:	f0 de       	rcall	.-544    	; 0x69c <xTaskCreate>
 8bc:	81 30       	cpi	r24, 0x01	; 1
 8be:	79 f4       	brne	.+30     	; 0x8de <vTaskStartScheduler+0x48>
 8c0:	f8 94       	cli
 8c2:	8f ef       	ldi	r24, 0xFF	; 255
 8c4:	9f ef       	ldi	r25, 0xFF	; 255
 8c6:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 8ca:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 8ce:	81 e0       	ldi	r24, 0x01	; 1
 8d0:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <xSchedulerRunning>
 8d4:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <xTickCount+0x1>
 8d8:	10 92 fb 06 	sts	0x06FB, r1	; 0x8006fb <xTickCount>
 8dc:	5d dd       	rcall	.-1350   	; 0x398 <xPortStartScheduler>
 8de:	0f 91       	pop	r16
 8e0:	ff 90       	pop	r15
 8e2:	ef 90       	pop	r14
 8e4:	08 95       	ret

000008e6 <vTaskSuspendAll>:
 8e6:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 8ea:	8f 5f       	subi	r24, 0xFF	; 255
 8ec:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <uxSchedulerSuspended>
 8f0:	08 95       	ret

000008f2 <xTaskIncrementTick>:
 8f2:	cf 92       	push	r12
 8f4:	df 92       	push	r13
 8f6:	ef 92       	push	r14
 8f8:	ff 92       	push	r15
 8fa:	0f 93       	push	r16
 8fc:	1f 93       	push	r17
 8fe:	cf 93       	push	r28
 900:	df 93       	push	r29
 902:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 906:	81 11       	cpse	r24, r1
 908:	95 c0       	rjmp	.+298    	; 0xa34 <xTaskIncrementTick+0x142>
 90a:	e0 90 fb 06 	lds	r14, 0x06FB	; 0x8006fb <xTickCount>
 90e:	f0 90 fc 06 	lds	r15, 0x06FC	; 0x8006fc <xTickCount+0x1>
 912:	8f ef       	ldi	r24, 0xFF	; 255
 914:	e8 1a       	sub	r14, r24
 916:	f8 0a       	sbc	r15, r24
 918:	f0 92 fc 06 	sts	0x06FC, r15	; 0x8006fc <xTickCount+0x1>
 91c:	e0 92 fb 06 	sts	0x06FB, r14	; 0x8006fb <xTickCount>
 920:	e1 14       	cp	r14, r1
 922:	f1 04       	cpc	r15, r1
 924:	b1 f4       	brne	.+44     	; 0x952 <xTaskIncrementTick+0x60>
 926:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
 92a:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 92e:	20 91 11 07 	lds	r18, 0x0711	; 0x800711 <pxOverflowDelayedTaskList>
 932:	30 91 12 07 	lds	r19, 0x0712	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 936:	30 93 14 07 	sts	0x0714, r19	; 0x800714 <pxDelayedTaskList+0x1>
 93a:	20 93 13 07 	sts	0x0713, r18	; 0x800713 <pxDelayedTaskList>
 93e:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 942:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <pxOverflowDelayedTaskList>
 946:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <xNumOfOverflows>
 94a:	8f 5f       	subi	r24, 0xFF	; 255
 94c:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <xNumOfOverflows>
 950:	11 de       	rcall	.-990    	; 0x574 <prvResetNextTaskUnblockTime>
 952:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <xNextTaskUnblockTime>
 956:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 95a:	e8 16       	cp	r14, r24
 95c:	f9 06       	cpc	r15, r25
 95e:	10 f4       	brcc	.+4      	; 0x964 <xTaskIncrementTick+0x72>
 960:	d1 2c       	mov	r13, r1
 962:	50 c0       	rjmp	.+160    	; 0xa04 <xTaskIncrementTick+0x112>
 964:	d1 2c       	mov	r13, r1
 966:	cc 24       	eor	r12, r12
 968:	c3 94       	inc	r12
 96a:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 96e:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 972:	80 81       	ld	r24, Z
 974:	81 11       	cpse	r24, r1
 976:	07 c0       	rjmp	.+14     	; 0x986 <xTaskIncrementTick+0x94>
 978:	8f ef       	ldi	r24, 0xFF	; 255
 97a:	9f ef       	ldi	r25, 0xFF	; 255
 97c:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 980:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 984:	3f c0       	rjmp	.+126    	; 0xa04 <xTaskIncrementTick+0x112>
 986:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 98a:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 98e:	05 80       	ldd	r0, Z+5	; 0x05
 990:	f6 81       	ldd	r31, Z+6	; 0x06
 992:	e0 2d       	mov	r30, r0
 994:	c6 81       	ldd	r28, Z+6	; 0x06
 996:	d7 81       	ldd	r29, Z+7	; 0x07
 998:	8a 81       	ldd	r24, Y+2	; 0x02
 99a:	9b 81       	ldd	r25, Y+3	; 0x03
 99c:	e8 16       	cp	r14, r24
 99e:	f9 06       	cpc	r15, r25
 9a0:	28 f4       	brcc	.+10     	; 0x9ac <xTaskIncrementTick+0xba>
 9a2:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 9a6:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 9aa:	2c c0       	rjmp	.+88     	; 0xa04 <xTaskIncrementTick+0x112>
 9ac:	8e 01       	movw	r16, r28
 9ae:	0e 5f       	subi	r16, 0xFE	; 254
 9b0:	1f 4f       	sbci	r17, 0xFF	; 255
 9b2:	c8 01       	movw	r24, r16
 9b4:	21 dc       	rcall	.-1982   	; 0x1f8 <uxListRemove>
 9b6:	8c 89       	ldd	r24, Y+20	; 0x14
 9b8:	9d 89       	ldd	r25, Y+21	; 0x15
 9ba:	89 2b       	or	r24, r25
 9bc:	19 f0       	breq	.+6      	; 0x9c4 <xTaskIncrementTick+0xd2>
 9be:	ce 01       	movw	r24, r28
 9c0:	0c 96       	adiw	r24, 0x0c	; 12
 9c2:	1a dc       	rcall	.-1996   	; 0x1f8 <uxListRemove>
 9c4:	8e 89       	ldd	r24, Y+22	; 0x16
 9c6:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 9ca:	98 17       	cp	r25, r24
 9cc:	10 f4       	brcc	.+4      	; 0x9d2 <xTaskIncrementTick+0xe0>
 9ce:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopReadyPriority>
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	9c 01       	movw	r18, r24
 9d6:	22 0f       	add	r18, r18
 9d8:	33 1f       	adc	r19, r19
 9da:	22 0f       	add	r18, r18
 9dc:	33 1f       	adc	r19, r19
 9de:	22 0f       	add	r18, r18
 9e0:	33 1f       	adc	r19, r19
 9e2:	82 0f       	add	r24, r18
 9e4:	93 1f       	adc	r25, r19
 9e6:	b8 01       	movw	r22, r16
 9e8:	89 5d       	subi	r24, 0xD9	; 217
 9ea:	98 4f       	sbci	r25, 0xF8	; 248
 9ec:	b3 db       	rcall	.-2202   	; 0x154 <vListInsertEnd>
 9ee:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 9f2:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 9f6:	9e 89       	ldd	r25, Y+22	; 0x16
 9f8:	86 89       	ldd	r24, Z+22	; 0x16
 9fa:	98 17       	cp	r25, r24
 9fc:	08 f4       	brcc	.+2      	; 0xa00 <xTaskIncrementTick+0x10e>
 9fe:	b5 cf       	rjmp	.-150    	; 0x96a <xTaskIncrementTick+0x78>
 a00:	dc 2c       	mov	r13, r12
 a02:	b3 cf       	rjmp	.-154    	; 0x96a <xTaskIncrementTick+0x78>
 a04:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 a08:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 a0c:	86 89       	ldd	r24, Z+22	; 0x16
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	fc 01       	movw	r30, r24
 a12:	ee 0f       	add	r30, r30
 a14:	ff 1f       	adc	r31, r31
 a16:	ee 0f       	add	r30, r30
 a18:	ff 1f       	adc	r31, r31
 a1a:	ee 0f       	add	r30, r30
 a1c:	ff 1f       	adc	r31, r31
 a1e:	8e 0f       	add	r24, r30
 a20:	9f 1f       	adc	r25, r31
 a22:	fc 01       	movw	r30, r24
 a24:	e9 5d       	subi	r30, 0xD9	; 217
 a26:	f8 4f       	sbci	r31, 0xF8	; 248
 a28:	80 81       	ld	r24, Z
 a2a:	82 30       	cpi	r24, 0x02	; 2
 a2c:	48 f0       	brcs	.+18     	; 0xa40 <xTaskIncrementTick+0x14e>
 a2e:	dd 24       	eor	r13, r13
 a30:	d3 94       	inc	r13
 a32:	06 c0       	rjmp	.+12     	; 0xa40 <xTaskIncrementTick+0x14e>
 a34:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <uxPendedTicks>
 a38:	8f 5f       	subi	r24, 0xFF	; 255
 a3a:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <uxPendedTicks>
 a3e:	d1 2c       	mov	r13, r1
 a40:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <xYieldPending>
 a44:	88 23       	and	r24, r24
 a46:	11 f0       	breq	.+4      	; 0xa4c <xTaskIncrementTick+0x15a>
 a48:	dd 24       	eor	r13, r13
 a4a:	d3 94       	inc	r13
 a4c:	8d 2d       	mov	r24, r13
 a4e:	df 91       	pop	r29
 a50:	cf 91       	pop	r28
 a52:	1f 91       	pop	r17
 a54:	0f 91       	pop	r16
 a56:	ff 90       	pop	r15
 a58:	ef 90       	pop	r14
 a5a:	df 90       	pop	r13
 a5c:	cf 90       	pop	r12
 a5e:	08 95       	ret

00000a60 <xTaskResumeAll>:
 a60:	df 92       	push	r13
 a62:	ef 92       	push	r14
 a64:	ff 92       	push	r15
 a66:	0f 93       	push	r16
 a68:	1f 93       	push	r17
 a6a:	cf 93       	push	r28
 a6c:	df 93       	push	r29
 a6e:	0f b6       	in	r0, 0x3f	; 63
 a70:	f8 94       	cli
 a72:	0f 92       	push	r0
 a74:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 a78:	81 50       	subi	r24, 0x01	; 1
 a7a:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <uxSchedulerSuspended>
 a7e:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 a82:	81 11       	cpse	r24, r1
 a84:	59 c0       	rjmp	.+178    	; 0xb38 <xTaskResumeAll+0xd8>
 a86:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 a8a:	81 11       	cpse	r24, r1
 a8c:	30 c0       	rjmp	.+96     	; 0xaee <xTaskResumeAll+0x8e>
 a8e:	57 c0       	rjmp	.+174    	; 0xb3e <xTaskResumeAll+0xde>
 a90:	d7 01       	movw	r26, r14
 a92:	15 96       	adiw	r26, 0x05	; 5
 a94:	ed 91       	ld	r30, X+
 a96:	fc 91       	ld	r31, X
 a98:	16 97       	sbiw	r26, 0x06	; 6
 a9a:	c6 81       	ldd	r28, Z+6	; 0x06
 a9c:	d7 81       	ldd	r29, Z+7	; 0x07
 a9e:	ce 01       	movw	r24, r28
 aa0:	0c 96       	adiw	r24, 0x0c	; 12
 aa2:	aa db       	rcall	.-2220   	; 0x1f8 <uxListRemove>
 aa4:	8e 01       	movw	r16, r28
 aa6:	0e 5f       	subi	r16, 0xFE	; 254
 aa8:	1f 4f       	sbci	r17, 0xFF	; 255
 aaa:	c8 01       	movw	r24, r16
 aac:	a5 db       	rcall	.-2230   	; 0x1f8 <uxListRemove>
 aae:	8e 89       	ldd	r24, Y+22	; 0x16
 ab0:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 ab4:	98 17       	cp	r25, r24
 ab6:	10 f4       	brcc	.+4      	; 0xabc <xTaskResumeAll+0x5c>
 ab8:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopReadyPriority>
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	9c 01       	movw	r18, r24
 ac0:	22 0f       	add	r18, r18
 ac2:	33 1f       	adc	r19, r19
 ac4:	22 0f       	add	r18, r18
 ac6:	33 1f       	adc	r19, r19
 ac8:	22 0f       	add	r18, r18
 aca:	33 1f       	adc	r19, r19
 acc:	82 0f       	add	r24, r18
 ace:	93 1f       	adc	r25, r19
 ad0:	b8 01       	movw	r22, r16
 ad2:	89 5d       	subi	r24, 0xD9	; 217
 ad4:	98 4f       	sbci	r25, 0xF8	; 248
 ad6:	3e db       	rcall	.-2436   	; 0x154 <vListInsertEnd>
 ad8:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 adc:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 ae0:	9e 89       	ldd	r25, Y+22	; 0x16
 ae2:	86 89       	ldd	r24, Z+22	; 0x16
 ae4:	98 17       	cp	r25, r24
 ae6:	68 f0       	brcs	.+26     	; 0xb02 <xTaskResumeAll+0xa2>
 ae8:	d0 92 f7 06 	sts	0x06F7, r13	; 0x8006f7 <xYieldPending>
 aec:	0a c0       	rjmp	.+20     	; 0xb02 <xTaskResumeAll+0xa2>
 aee:	c0 e0       	ldi	r28, 0x00	; 0
 af0:	d0 e0       	ldi	r29, 0x00	; 0
 af2:	0f 2e       	mov	r0, r31
 af4:	f8 e0       	ldi	r31, 0x08	; 8
 af6:	ef 2e       	mov	r14, r31
 af8:	f7 e0       	ldi	r31, 0x07	; 7
 afa:	ff 2e       	mov	r15, r31
 afc:	f0 2d       	mov	r31, r0
 afe:	dd 24       	eor	r13, r13
 b00:	d3 94       	inc	r13
 b02:	f7 01       	movw	r30, r14
 b04:	80 81       	ld	r24, Z
 b06:	81 11       	cpse	r24, r1
 b08:	c3 cf       	rjmp	.-122    	; 0xa90 <xTaskResumeAll+0x30>
 b0a:	cd 2b       	or	r28, r29
 b0c:	09 f0       	breq	.+2      	; 0xb10 <xTaskResumeAll+0xb0>
 b0e:	32 dd       	rcall	.-1436   	; 0x574 <prvResetNextTaskUnblockTime>
 b10:	c0 91 f8 06 	lds	r28, 0x06F8	; 0x8006f8 <uxPendedTicks>
 b14:	cc 23       	and	r28, r28
 b16:	49 f0       	breq	.+18     	; 0xb2a <xTaskResumeAll+0xca>
 b18:	d1 e0       	ldi	r29, 0x01	; 1
 b1a:	eb de       	rcall	.-554    	; 0x8f2 <xTaskIncrementTick>
 b1c:	81 11       	cpse	r24, r1
 b1e:	d0 93 f7 06 	sts	0x06F7, r29	; 0x8006f7 <xYieldPending>
 b22:	c1 50       	subi	r28, 0x01	; 1
 b24:	d1 f7       	brne	.-12     	; 0xb1a <xTaskResumeAll+0xba>
 b26:	10 92 f8 06 	sts	0x06F8, r1	; 0x8006f8 <uxPendedTicks>
 b2a:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <xYieldPending>
 b2e:	88 23       	and	r24, r24
 b30:	29 f0       	breq	.+10     	; 0xb3c <xTaskResumeAll+0xdc>
 b32:	6c dc       	rcall	.-1832   	; 0x40c <vPortYield>
 b34:	81 e0       	ldi	r24, 0x01	; 1
 b36:	03 c0       	rjmp	.+6      	; 0xb3e <xTaskResumeAll+0xde>
 b38:	80 e0       	ldi	r24, 0x00	; 0
 b3a:	01 c0       	rjmp	.+2      	; 0xb3e <xTaskResumeAll+0xde>
 b3c:	80 e0       	ldi	r24, 0x00	; 0
 b3e:	0f 90       	pop	r0
 b40:	0f be       	out	0x3f, r0	; 63
 b42:	df 91       	pop	r29
 b44:	cf 91       	pop	r28
 b46:	1f 91       	pop	r17
 b48:	0f 91       	pop	r16
 b4a:	ff 90       	pop	r15
 b4c:	ef 90       	pop	r14
 b4e:	df 90       	pop	r13
 b50:	08 95       	ret

00000b52 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 b52:	cf 93       	push	r28
 b54:	df 93       	push	r29
 b56:	ec 01       	movw	r28, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 b58:	89 2b       	or	r24, r25
 b5a:	39 f0       	breq	.+14     	; 0xb6a <vTaskDelay+0x18>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 b5c:	c4 de       	rcall	.-632    	; 0x8e6 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 b5e:	60 e0       	ldi	r22, 0x00	; 0
 b60:	ce 01       	movw	r24, r28
			}
			xAlreadyYielded = xTaskResumeAll();
 b62:	5b dd       	rcall	.-1354   	; 0x61a <prvAddCurrentTaskToDelayedList>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 b64:	7d df       	rcall	.-262    	; 0xa60 <xTaskResumeAll>
 b66:	81 11       	cpse	r24, r1
		{
			portYIELD_WITHIN_API();
 b68:	01 c0       	rjmp	.+2      	; 0xb6c <vTaskDelay+0x1a>
 b6a:	50 dc       	rcall	.-1888   	; 0x40c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 b6c:	df 91       	pop	r29
 b6e:	cf 91       	pop	r28
 b70:	08 95       	ret

00000b72 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 b72:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 b76:	88 23       	and	r24, r24
 b78:	21 f0       	breq	.+8      	; 0xb82 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 b7a:	81 e0       	ldi	r24, 0x01	; 1
 b7c:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <xYieldPending>
 b80:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
 b82:	10 92 f7 06 	sts	0x06F7, r1	; 0x8006f7 <xYieldPending>
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 b86:	20 91 fa 06 	lds	r18, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 b8a:	82 2f       	mov	r24, r18
 b8c:	90 e0       	ldi	r25, 0x00	; 0
 b8e:	fc 01       	movw	r30, r24
 b90:	ee 0f       	add	r30, r30
 b92:	ff 1f       	adc	r31, r31
 b94:	ee 0f       	add	r30, r30
 b96:	ff 1f       	adc	r31, r31
 b98:	ee 0f       	add	r30, r30
 b9a:	ff 1f       	adc	r31, r31
 b9c:	e8 0f       	add	r30, r24
 b9e:	f9 1f       	adc	r31, r25
 ba0:	e9 5d       	subi	r30, 0xD9	; 217
 ba2:	f8 4f       	sbci	r31, 0xF8	; 248
 ba4:	30 81       	ld	r19, Z
 ba6:	31 11       	cpse	r19, r1
 ba8:	11 c0       	rjmp	.+34     	; 0xbcc <vTaskSwitchContext+0x5a>
 baa:	21 50       	subi	r18, 0x01	; 1
 bac:	82 2f       	mov	r24, r18
 bae:	90 e0       	ldi	r25, 0x00	; 0
 bb0:	fc 01       	movw	r30, r24
 bb2:	ee 0f       	add	r30, r30
 bb4:	ff 1f       	adc	r31, r31
 bb6:	ee 0f       	add	r30, r30
 bb8:	ff 1f       	adc	r31, r31
 bba:	ee 0f       	add	r30, r30
 bbc:	ff 1f       	adc	r31, r31
 bbe:	e8 0f       	add	r30, r24
 bc0:	f9 1f       	adc	r31, r25
 bc2:	e9 5d       	subi	r30, 0xD9	; 217
 bc4:	f8 4f       	sbci	r31, 0xF8	; 248
 bc6:	30 81       	ld	r19, Z
 bc8:	33 23       	and	r19, r19
 bca:	79 f3       	breq	.-34     	; 0xbaa <vTaskSwitchContext+0x38>
 bcc:	ac 01       	movw	r20, r24
 bce:	44 0f       	add	r20, r20
 bd0:	55 1f       	adc	r21, r21
 bd2:	44 0f       	add	r20, r20
 bd4:	55 1f       	adc	r21, r21
 bd6:	44 0f       	add	r20, r20
 bd8:	55 1f       	adc	r21, r21
 bda:	48 0f       	add	r20, r24
 bdc:	59 1f       	adc	r21, r25
 bde:	da 01       	movw	r26, r20
 be0:	a9 5d       	subi	r26, 0xD9	; 217
 be2:	b8 4f       	sbci	r27, 0xF8	; 248
 be4:	11 96       	adiw	r26, 0x01	; 1
 be6:	ed 91       	ld	r30, X+
 be8:	fc 91       	ld	r31, X
 bea:	12 97       	sbiw	r26, 0x02	; 2
 bec:	02 80       	ldd	r0, Z+2	; 0x02
 bee:	f3 81       	ldd	r31, Z+3	; 0x03
 bf0:	e0 2d       	mov	r30, r0
 bf2:	12 96       	adiw	r26, 0x02	; 2
 bf4:	fc 93       	st	X, r31
 bf6:	ee 93       	st	-X, r30
 bf8:	11 97       	sbiw	r26, 0x01	; 1
 bfa:	46 5d       	subi	r20, 0xD6	; 214
 bfc:	58 4f       	sbci	r21, 0xF8	; 248
 bfe:	e4 17       	cp	r30, r20
 c00:	f5 07       	cpc	r31, r21
 c02:	29 f4       	brne	.+10     	; 0xc0e <vTaskSwitchContext+0x9c>
 c04:	42 81       	ldd	r20, Z+2	; 0x02
 c06:	53 81       	ldd	r21, Z+3	; 0x03
 c08:	fd 01       	movw	r30, r26
 c0a:	52 83       	std	Z+2, r21	; 0x02
 c0c:	41 83       	std	Z+1, r20	; 0x01
 c0e:	fc 01       	movw	r30, r24
 c10:	ee 0f       	add	r30, r30
 c12:	ff 1f       	adc	r31, r31
 c14:	ee 0f       	add	r30, r30
 c16:	ff 1f       	adc	r31, r31
 c18:	ee 0f       	add	r30, r30
 c1a:	ff 1f       	adc	r31, r31
 c1c:	8e 0f       	add	r24, r30
 c1e:	9f 1f       	adc	r25, r31
 c20:	fc 01       	movw	r30, r24
 c22:	e9 5d       	subi	r30, 0xD9	; 217
 c24:	f8 4f       	sbci	r31, 0xF8	; 248
 c26:	01 80       	ldd	r0, Z+1	; 0x01
 c28:	f2 81       	ldd	r31, Z+2	; 0x02
 c2a:	e0 2d       	mov	r30, r0
 c2c:	86 81       	ldd	r24, Z+6	; 0x06
 c2e:	97 81       	ldd	r25, Z+7	; 0x07
 c30:	90 93 4c 07 	sts	0x074C, r25	; 0x80074c <pxCurrentTCB+0x1>
 c34:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <pxCurrentTCB>
 c38:	20 93 fa 06 	sts	0x06FA, r18	; 0x8006fa <uxTopReadyPriority>
 c3c:	08 95       	ret

00000c3e <_exit>:
 c3e:	f8 94       	cli

00000c40 <__stop_program>:
 c40:	ff cf       	rjmp	.-2      	; 0xc40 <__stop_program>
