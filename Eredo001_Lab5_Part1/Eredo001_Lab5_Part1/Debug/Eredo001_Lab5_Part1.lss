
Eredo001_Lab5_Part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000462  000004f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000462  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800104  00800104  000004fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000052c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009fd  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000878  00000000  00000000  00000fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ed  00000000  00000000  00001849  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  00001d38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a3  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000338  00000000  00000000  00002373  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000026ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	b9 c0       	rjmp	.+370    	; 0x1a8 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e6       	ldi	r30, 0x62	; 98
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 30       	cpi	r26, 0x0B	; 11
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a8 d1       	rcall	.+848    	; 0x414 <main>
  c4:	cc c1       	rjmp	.+920    	; 0x45e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	00 d0       	rcall	.+0      	; 0xce <TimerSet+0x6>
  ce:	00 d0       	rcall	.+0      	; 0xd0 <TimerSet+0x8>
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	69 83       	std	Y+1, r22	; 0x01
  d6:	7a 83       	std	Y+2, r23	; 0x02
  d8:	8b 83       	std	Y+3, r24	; 0x03
  da:	9c 83       	std	Y+4, r25	; 0x04
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	9a 81       	ldd	r25, Y+2	; 0x02
  e0:	ab 81       	ldd	r26, Y+3	; 0x03
  e2:	bc 81       	ldd	r27, Y+4	; 0x04
  e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  e8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ec:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  f0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
  f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  fc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 100:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 104:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 108:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 10c:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 110:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
 114:	00 00       	nop
 116:	0f 90       	pop	r0
 118:	0f 90       	pop	r0
 11a:	0f 90       	pop	r0
 11c:	0f 90       	pop	r0
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <TimerOn>:
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	81 e8       	ldi	r24, 0x81	; 129
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	2b e0       	ldi	r18, 0x0B	; 11
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
 136:	88 e8       	ldi	r24, 0x88	; 136
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	2d e7       	ldi	r18, 0x7D	; 125
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	fc 01       	movw	r30, r24
 140:	31 83       	std	Z+1, r19	; 0x01
 142:	20 83       	st	Z, r18
 144:	8f e6       	ldi	r24, 0x6F	; 111
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	22 e0       	ldi	r18, 0x02	; 2
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
 14e:	84 e8       	ldi	r24, 0x84	; 132
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	fc 01       	movw	r30, r24
 154:	11 82       	std	Z+1, r1	; 0x01
 156:	10 82       	st	Z, r1
 158:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 160:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 164:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 168:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 16c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 170:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 174:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
 178:	8f e5       	ldi	r24, 0x5F	; 95
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	2f e5       	ldi	r18, 0x5F	; 95
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	f9 01       	movw	r30, r18
 182:	20 81       	ld	r18, Z
 184:	20 68       	ori	r18, 0x80	; 128
 186:	fc 01       	movw	r30, r24
 188:	20 83       	st	Z, r18
 18a:	00 00       	nop
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <TimerISR>:

void TimerISR() {
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
}
 1a0:	00 00       	nop
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <__vector_13>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 1b8:	0f 92       	push	r0
 1ba:	2f 93       	push	r18
 1bc:	3f 93       	push	r19
 1be:	4f 93       	push	r20
 1c0:	5f 93       	push	r21
 1c2:	6f 93       	push	r22
 1c4:	7f 93       	push	r23
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	af 93       	push	r26
 1cc:	bf 93       	push	r27
 1ce:	ef 93       	push	r30
 1d0:	ff 93       	push	r31
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 1da:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_cntcurr>
 1de:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_cntcurr+0x1>
 1e2:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x2>
 1e6:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x3>
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	a1 09       	sbc	r26, r1
 1ee:	b1 09       	sbc	r27, r1
 1f0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 1f4:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 1f8:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 1fc:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 200:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_cntcurr>
 204:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_cntcurr+0x1>
 208:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x2>
 20c:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x3>
 210:	89 2b       	or	r24, r25
 212:	8a 2b       	or	r24, r26
 214:	8b 2b       	or	r24, r27
 216:	89 f4       	brne	.+34     	; 0x23a <__vector_13+0x92>
		TimerISR(); 				// Call the ISR that the user uses
 218:	bc df       	rcall	.-136    	; 0x192 <TimerISR>
        _avr_timer_cntcurr = _avr_timer_M;
 21a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 21e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 222:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 226:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 22a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 22e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 232:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 236:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
    }
}
 23a:	00 00       	nop
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	bf 91       	pop	r27
 246:	af 91       	pop	r26
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	7f 91       	pop	r23
 24e:	6f 91       	pop	r22
 250:	5f 91       	pop	r21
 252:	4f 91       	pop	r20
 254:	3f 91       	pop	r19
 256:	2f 91       	pop	r18
 258:	0f 90       	pop	r0
 25a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 25e:	0f 90       	pop	r0
 260:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <transmit_data>:

#include <avr/io.h>
#include <bit.h>
#include <timer.h>

void transmit_data(unsigned char data) {
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	00 d0       	rcall	.+0      	; 0x270 <transmit_data+0x6>
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	8a 83       	std	Y+2, r24	; 0x02
	for(unsigned char i = 0; i < 8; i++) {
 276:	19 82       	std	Y+1, r1	; 0x01
 278:	27 c0       	rjmp	.+78     	; 0x2c8 <transmit_data+0x5e>
		PORTC = 0x08;
 27a:	88 e2       	ldi	r24, 0x28	; 40
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	28 e0       	ldi	r18, 0x08	; 8
 280:	fc 01       	movw	r30, r24
 282:	20 83       	st	Z, r18
		PORTC |= ((data >> i) & 0x01);
 284:	88 e2       	ldi	r24, 0x28	; 40
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	28 e2       	ldi	r18, 0x28	; 40
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	f9 01       	movw	r30, r18
 28e:	20 81       	ld	r18, Z
 290:	62 2f       	mov	r22, r18
 292:	2a 81       	ldd	r18, Y+2	; 0x02
 294:	22 2f       	mov	r18, r18
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	49 81       	ldd	r20, Y+1	; 0x01
 29a:	44 2f       	mov	r20, r20
 29c:	50 e0       	ldi	r21, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <transmit_data+0x3a>
 2a0:	35 95       	asr	r19
 2a2:	27 95       	ror	r18
 2a4:	4a 95       	dec	r20
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <transmit_data+0x36>
 2a8:	21 70       	andi	r18, 0x01	; 1
 2aa:	26 2b       	or	r18, r22
 2ac:	fc 01       	movw	r30, r24
 2ae:	20 83       	st	Z, r18
		PORTC |= 0x04;
 2b0:	88 e2       	ldi	r24, 0x28	; 40
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	28 e2       	ldi	r18, 0x28	; 40
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	f9 01       	movw	r30, r18
 2ba:	20 81       	ld	r18, Z
 2bc:	24 60       	ori	r18, 0x04	; 4
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
#include <avr/io.h>
#include <bit.h>
#include <timer.h>

void transmit_data(unsigned char data) {
	for(unsigned char i = 0; i < 8; i++) {
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
 2c4:	8f 5f       	subi	r24, 0xFF	; 255
 2c6:	89 83       	std	Y+1, r24	; 0x01
 2c8:	89 81       	ldd	r24, Y+1	; 0x01
 2ca:	88 30       	cpi	r24, 0x08	; 8
 2cc:	b0 f2       	brcs	.-84     	; 0x27a <transmit_data+0x10>
		PORTC = 0x08;
		PORTC |= ((data >> i) & 0x01);
		PORTC |= 0x04;
	}
	PORTC |= 0x02;
 2ce:	88 e2       	ldi	r24, 0x28	; 40
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	28 e2       	ldi	r18, 0x28	; 40
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	f9 01       	movw	r30, r18
 2d8:	20 81       	ld	r18, Z
 2da:	22 60       	ori	r18, 0x02	; 2
 2dc:	fc 01       	movw	r30, r24
 2de:	20 83       	st	Z, r18
	PORTC = 0x00;
 2e0:	88 e2       	ldi	r24, 0x28	; 40
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	fc 01       	movw	r30, r24
 2e6:	10 82       	st	Z, r1
}
 2e8:	00 00       	nop
 2ea:	0f 90       	pop	r0
 2ec:	0f 90       	pop	r0
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <SMSR>:

enum State{init, L0, L1, L2} state;
unsigned char tmp = 0x00;
	
void SMSR() {
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	cd b7       	in	r28, 0x3d	; 61
 2fa:	de b7       	in	r29, 0x3e	; 62
	switch(state) {
 2fc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <state>
 300:	88 2f       	mov	r24, r24
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	91 05       	cpc	r25, r1
 308:	81 f0       	breq	.+32     	; 0x32a <SMSR+0x36>
 30a:	82 30       	cpi	r24, 0x02	; 2
 30c:	91 05       	cpc	r25, r1
 30e:	1c f4       	brge	.+6      	; 0x316 <SMSR+0x22>
 310:	89 2b       	or	r24, r25
 312:	39 f0       	breq	.+14     	; 0x322 <SMSR+0x2e>
 314:	4e c0       	rjmp	.+156    	; 0x3b2 <SMSR+0xbe>
 316:	82 30       	cpi	r24, 0x02	; 2
 318:	91 05       	cpc	r25, r1
 31a:	39 f1       	breq	.+78     	; 0x36a <SMSR+0x76>
 31c:	03 97       	sbiw	r24, 0x03	; 3
 31e:	b9 f1       	breq	.+110    	; 0x38e <SMSR+0x9a>
 320:	48 c0       	rjmp	.+144    	; 0x3b2 <SMSR+0xbe>
		case init:
		state = L0;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
		break;
 328:	44 c0       	rjmp	.+136    	; 0x3b2 <SMSR+0xbe>
		
		case L0:
		if(~PINA & 0x01) {
 32a:	80 e2       	ldi	r24, 0x20	; 32
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	fc 01       	movw	r30, r24
 330:	80 81       	ld	r24, Z
 332:	88 2f       	mov	r24, r24
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	81 70       	andi	r24, 0x01	; 1
 338:	99 27       	eor	r25, r25
 33a:	89 2b       	or	r24, r25
 33c:	21 f4       	brne	.+8      	; 0x346 <SMSR+0x52>
			state = L1;
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
			state = L2;
		}
		else {
			state = L0;
		}
		break;
 344:	36 c0       	rjmp	.+108    	; 0x3b2 <SMSR+0xbe>
		
		case L0:
		if(~PINA & 0x01) {
			state = L1;
		}
		else if(~PINA & 0x02) {
 346:	80 e2       	ldi	r24, 0x20	; 32
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	fc 01       	movw	r30, r24
 34c:	80 81       	ld	r24, Z
 34e:	88 2f       	mov	r24, r24
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	82 70       	andi	r24, 0x02	; 2
 354:	99 27       	eor	r25, r25
 356:	89 2b       	or	r24, r25
 358:	21 f4       	brne	.+8      	; 0x362 <SMSR+0x6e>
			state = L2;
 35a:	83 e0       	ldi	r24, 0x03	; 3
 35c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
		}
		else {
			state = L0;
		}
		break;
 360:	28 c0       	rjmp	.+80     	; 0x3b2 <SMSR+0xbe>
		}
		else if(~PINA & 0x02) {
			state = L2;
		}
		else {
			state = L0;
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
		}
		break;
 368:	24 c0       	rjmp	.+72     	; 0x3b2 <SMSR+0xbe>
		
		case L1:
		if(~PINA & 0x01) {
 36a:	80 e2       	ldi	r24, 0x20	; 32
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	fc 01       	movw	r30, r24
 370:	80 81       	ld	r24, Z
 372:	88 2f       	mov	r24, r24
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	81 70       	andi	r24, 0x01	; 1
 378:	99 27       	eor	r25, r25
 37a:	89 2b       	or	r24, r25
 37c:	21 f4       	brne	.+8      	; 0x386 <SMSR+0x92>
			state = L1;
 37e:	82 e0       	ldi	r24, 0x02	; 2
 380:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
		}
		else {
			state = L0;
		}
		break;
 384:	16 c0       	rjmp	.+44     	; 0x3b2 <SMSR+0xbe>
		case L1:
		if(~PINA & 0x01) {
			state = L1;
		}
		else {
			state = L0;
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
		}
		break;
 38c:	12 c0       	rjmp	.+36     	; 0x3b2 <SMSR+0xbe>
		
		case L2:
		if(~PINA & 0x02) {
 38e:	80 e2       	ldi	r24, 0x20	; 32
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	fc 01       	movw	r30, r24
 394:	80 81       	ld	r24, Z
 396:	88 2f       	mov	r24, r24
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	82 70       	andi	r24, 0x02	; 2
 39c:	99 27       	eor	r25, r25
 39e:	89 2b       	or	r24, r25
 3a0:	21 f4       	brne	.+8      	; 0x3aa <SMSR+0xb6>
			state = L2;
 3a2:	83 e0       	ldi	r24, 0x03	; 3
 3a4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
		}
		else {
			state = L0;
		}
		break;
 3a8:	03 c0       	rjmp	.+6      	; 0x3b0 <SMSR+0xbc>
		case L2:
		if(~PINA & 0x02) {
			state = L2;
		}
		else {
			state = L0;
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <state>
		}
		break;
 3b0:	00 00       	nop
		

		
	}
	
	switch(state) {
 3b2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <state>
 3b6:	88 2f       	mov	r24, r24
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	91 05       	cpc	r25, r1
 3be:	81 f0       	breq	.+32     	; 0x3e0 <SMSR+0xec>
 3c0:	82 30       	cpi	r24, 0x02	; 2
 3c2:	91 05       	cpc	r25, r1
 3c4:	1c f4       	brge	.+6      	; 0x3cc <SMSR+0xd8>
 3c6:	89 2b       	or	r24, r25
 3c8:	39 f0       	breq	.+14     	; 0x3d8 <SMSR+0xe4>
		tmp--;
		transmit_data(tmp);
		break;
		
	}
}
 3ca:	20 c0       	rjmp	.+64     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		

		
	}
	
	switch(state) {
 3cc:	82 30       	cpi	r24, 0x02	; 2
 3ce:	91 05       	cpc	r25, r1
 3d0:	59 f0       	breq	.+22     	; 0x3e8 <SMSR+0xf4>
 3d2:	03 97       	sbiw	r24, 0x03	; 3
 3d4:	91 f0       	breq	.+36     	; 0x3fa <SMSR+0x106>
		tmp--;
		transmit_data(tmp);
		break;
		
	}
}
 3d6:	1a c0       	rjmp	.+52     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		
	}
	
	switch(state) {
		case init:
		tmp = 0x0F;
 3d8:	8f e0       	ldi	r24, 0x0F	; 15
 3da:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tmp>
		break;
 3de:	16 c0       	rjmp	.+44     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		
		case L0:
		transmit_data(tmp);
 3e0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tmp>
 3e4:	42 df       	rcall	.-380    	; 0x26a <transmit_data>
		break;
 3e6:	12 c0       	rjmp	.+36     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		
		case L1:
		tmp++;
 3e8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tmp>
 3ec:	8f 5f       	subi	r24, 0xFF	; 255
 3ee:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tmp>
		transmit_data(tmp);
 3f2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tmp>
 3f6:	39 df       	rcall	.-398    	; 0x26a <transmit_data>
		break;
 3f8:	09 c0       	rjmp	.+18     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		
		case L2:
		tmp--;
 3fa:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tmp>
 3fe:	81 50       	subi	r24, 0x01	; 1
 400:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tmp>
		transmit_data(tmp);
 404:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tmp>
 408:	30 df       	rcall	.-416    	; 0x26a <transmit_data>
		break;
 40a:	00 00       	nop
		
	}
}
 40c:	00 00       	nop
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	08 95       	ret

00000414 <main>:


int main(void)
{
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	cd b7       	in	r28, 0x3d	; 61
 41a:	de b7       	in	r29, 0x3e	; 62
	DDRC = 0xFF;PORTC = 0x00;
 41c:	87 e2       	ldi	r24, 0x27	; 39
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	2f ef       	ldi	r18, 0xFF	; 255
 422:	fc 01       	movw	r30, r24
 424:	20 83       	st	Z, r18
 426:	88 e2       	ldi	r24, 0x28	; 40
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	fc 01       	movw	r30, r24
 42c:	10 82       	st	Z, r1
	DDRA = 0x00; PORTA = 0xFF;
 42e:	81 e2       	ldi	r24, 0x21	; 33
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	fc 01       	movw	r30, r24
 434:	10 82       	st	Z, r1
 436:	82 e2       	ldi	r24, 0x22	; 34
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	2f ef       	ldi	r18, 0xFF	; 255
 43c:	fc 01       	movw	r30, r24
 43e:	20 83       	st	Z, r18
    /* Replace with your application code */
	TimerOn();
 440:	71 de       	rcall	.-798    	; 0x124 <TimerOn>
	TimerSet(300);
 442:	6c e2       	ldi	r22, 0x2C	; 44
 444:	71 e0       	ldi	r23, 0x01	; 1
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	90 e0       	ldi	r25, 0x00	; 0
    while (1) 
    {
		SMSR();
 44a:	3e de       	rcall	.-900    	; 0xc8 <TimerSet>
 44c:	53 df       	rcall	.-346    	; 0x2f4 <SMSR>
		while(!TimerFlag);
 44e:	00 00       	nop
 450:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 454:	88 23       	and	r24, r24
 456:	e1 f3       	breq	.-8      	; 0x450 <main+0x3c>
		TimerFlag = 0;
 458:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
    }
 45c:	f7 cf       	rjmp	.-18     	; 0x44c <main+0x38>

0000045e <_exit>:
 45e:	f8 94       	cli

00000460 <__stop_program>:
 460:	ff cf       	rjmp	.-2      	; 0x460 <__stop_program>
