
Eredo_Lab3_Part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000d04  00000d98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000039  00800110  00800110  00000da8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e51  00000000  00000000  00000ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008fd  00000000  00000000  00001d31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ac0  00000000  00000000  0000262e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  000030f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000679  00000000  00000000  0000341c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006b0  00000000  00000000  00003a95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004145  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	99 c2       	rjmp	.+1330   	; 0x568 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e0       	ldi	r30, 0x04	; 4
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 34       	cpi	r26, 0x49	; 73
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e2 d3       	rcall	.+1988   	; 0x888 <main>
  c4:	1d c6       	rjmp	.+3130   	; 0xd00 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	00 d0       	rcall	.+0      	; 0xce <delay_ms+0x6>
  ce:	00 d0       	rcall	.+0      	; 0xd0 <delay_ms+0x8>
  d0:	00 d0       	rcall	.+0      	; 0xd2 <delay_ms+0xa>
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
  d6:	9e 83       	std	Y+6, r25	; 0x06
  d8:	8d 83       	std	Y+5, r24	; 0x05
  da:	1a 82       	std	Y+2, r1	; 0x02
  dc:	19 82       	std	Y+1, r1	; 0x01
  de:	13 c0       	rjmp	.+38     	; 0x106 <delay_ms+0x3e>
  e0:	1c 82       	std	Y+4, r1	; 0x04
  e2:	1b 82       	std	Y+3, r1	; 0x03
  e4:	06 c0       	rjmp	.+12     	; 0xf2 <delay_ms+0x2a>
  e6:	00 00       	nop
  e8:	8b 81       	ldd	r24, Y+3	; 0x03
  ea:	9c 81       	ldd	r25, Y+4	; 0x04
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	9c 83       	std	Y+4, r25	; 0x04
  f0:	8b 83       	std	Y+3, r24	; 0x03
  f2:	8b 81       	ldd	r24, Y+3	; 0x03
  f4:	9c 81       	ldd	r25, Y+4	; 0x04
  f6:	87 30       	cpi	r24, 0x07	; 7
  f8:	93 40       	sbci	r25, 0x03	; 3
  fa:	ac f3       	brlt	.-22     	; 0xe6 <delay_ms+0x1e>
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	9a 81       	ldd	r25, Y+2	; 0x02
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	9a 83       	std	Y+2, r25	; 0x02
 104:	89 83       	std	Y+1, r24	; 0x01
 106:	29 81       	ldd	r18, Y+1	; 0x01
 108:	3a 81       	ldd	r19, Y+2	; 0x02
 10a:	8d 81       	ldd	r24, Y+5	; 0x05
 10c:	9e 81       	ldd	r25, Y+6	; 0x06
 10e:	28 17       	cp	r18, r24
 110:	39 07       	cpc	r19, r25
 112:	34 f3       	brlt	.-52     	; 0xe0 <delay_ms+0x18>
 114:	00 00       	nop
 116:	26 96       	adiw	r28, 0x06	; 6
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	f8 94       	cli
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	0f be       	out	0x3f, r0	; 63
 120:	cd bf       	out	0x3d, r28	; 61
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <LCD_WriteCommand>:
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	1f 92       	push	r1
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	89 83       	std	Y+1, r24	; 0x01
 134:	82 e2       	ldi	r24, 0x22	; 34
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	22 e2       	ldi	r18, 0x22	; 34
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	f9 01       	movw	r30, r18
 13e:	20 81       	ld	r18, Z
 140:	2e 7f       	andi	r18, 0xFE	; 254
 142:	fc 01       	movw	r30, r24
 144:	20 83       	st	Z, r18
 146:	88 e2       	ldi	r24, 0x28	; 40
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	29 81       	ldd	r18, Y+1	; 0x01
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
 150:	82 e2       	ldi	r24, 0x22	; 34
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	22 e2       	ldi	r18, 0x22	; 34
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	f9 01       	movw	r30, r18
 15a:	20 81       	ld	r18, Z
 15c:	22 60       	ori	r18, 0x02	; 2
 15e:	fc 01       	movw	r30, r24
 160:	20 83       	st	Z, r18
 162:	00 00       	nop
 164:	82 e2       	ldi	r24, 0x22	; 34
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	22 e2       	ldi	r18, 0x22	; 34
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	f9 01       	movw	r30, r18
 16e:	20 81       	ld	r18, Z
 170:	2d 7f       	andi	r18, 0xFD	; 253
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	a6 df       	rcall	.-180    	; 0xc8 <delay_ms>
 17c:	00 00       	nop
 17e:	0f 90       	pop	r0
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <LCD_init>:
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	84 e6       	ldi	r24, 0x64	; 100
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	9a df       	rcall	.-204    	; 0xc8 <delay_ms>
 194:	88 e3       	ldi	r24, 0x38	; 56
 196:	c8 df       	rcall	.-112    	; 0x128 <LCD_WriteCommand>
 198:	86 e0       	ldi	r24, 0x06	; 6
 19a:	c6 df       	rcall	.-116    	; 0x128 <LCD_WriteCommand>
 19c:	8f e0       	ldi	r24, 0x0F	; 15
 19e:	c4 df       	rcall	.-120    	; 0x128 <LCD_WriteCommand>
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	c2 df       	rcall	.-124    	; 0x128 <LCD_WriteCommand>
 1a4:	8a e0       	ldi	r24, 0x0A	; 10
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	8f df       	rcall	.-226    	; 0xc8 <delay_ms>
 1aa:	00 00       	nop
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <LCD_WriteData>:
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	1f 92       	push	r1
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
 1bc:	89 83       	std	Y+1, r24	; 0x01
 1be:	82 e2       	ldi	r24, 0x22	; 34
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	22 e2       	ldi	r18, 0x22	; 34
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	f9 01       	movw	r30, r18
 1c8:	20 81       	ld	r18, Z
 1ca:	21 60       	ori	r18, 0x01	; 1
 1cc:	fc 01       	movw	r30, r24
 1ce:	20 83       	st	Z, r18
 1d0:	88 e2       	ldi	r24, 0x28	; 40
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	29 81       	ldd	r18, Y+1	; 0x01
 1d6:	fc 01       	movw	r30, r24
 1d8:	20 83       	st	Z, r18
 1da:	82 e2       	ldi	r24, 0x22	; 34
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	22 e2       	ldi	r18, 0x22	; 34
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	f9 01       	movw	r30, r18
 1e4:	20 81       	ld	r18, Z
 1e6:	22 60       	ori	r18, 0x02	; 2
 1e8:	fc 01       	movw	r30, r24
 1ea:	20 83       	st	Z, r18
 1ec:	00 00       	nop
 1ee:	82 e2       	ldi	r24, 0x22	; 34
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	22 e2       	ldi	r18, 0x22	; 34
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	f9 01       	movw	r30, r18
 1f8:	20 81       	ld	r18, Z
 1fa:	2d 7f       	andi	r18, 0xFD	; 253
 1fc:	fc 01       	movw	r30, r24
 1fe:	20 83       	st	Z, r18
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	61 df       	rcall	.-318    	; 0xc8 <delay_ms>
 206:	00 00       	nop
 208:	0f 90       	pop	r0
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <LCD_Cursor>:
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	1f 92       	push	r1
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
 21a:	89 83       	std	Y+1, r24	; 0x01
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	81 31       	cpi	r24, 0x11	; 17
 220:	20 f4       	brcc	.+8      	; 0x22a <LCD_Cursor+0x1a>
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	81 58       	subi	r24, 0x81	; 129
 226:	80 df       	rcall	.-256    	; 0x128 <LCD_WriteCommand>
 228:	03 c0       	rjmp	.+6      	; 0x230 <LCD_Cursor+0x20>
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	81 55       	subi	r24, 0x51	; 81
 22e:	7c df       	rcall	.-264    	; 0x128 <LCD_WriteCommand>
 230:	00 00       	nop
 232:	0f 90       	pop	r0
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <SetBit>:
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	00 d0       	rcall	.+0      	; 0x240 <SetBit+0x6>
 240:	1f 92       	push	r1
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
 246:	89 83       	std	Y+1, r24	; 0x01
 248:	6a 83       	std	Y+2, r22	; 0x02
 24a:	4b 83       	std	Y+3, r20	; 0x03
 24c:	8b 81       	ldd	r24, Y+3	; 0x03
 24e:	88 23       	and	r24, r24
 250:	71 f0       	breq	.+28     	; 0x26e <SetBit+0x34>
 252:	8a 81       	ldd	r24, Y+2	; 0x02
 254:	28 2f       	mov	r18, r24
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <SetBit+0x28>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	2a 95       	dec	r18
 264:	e2 f7       	brpl	.-8      	; 0x25e <SetBit+0x24>
 266:	98 2f       	mov	r25, r24
 268:	89 81       	ldd	r24, Y+1	; 0x01
 26a:	89 2b       	or	r24, r25
 26c:	0e c0       	rjmp	.+28     	; 0x28a <SetBit+0x50>
 26e:	8a 81       	ldd	r24, Y+2	; 0x02
 270:	28 2f       	mov	r18, r24
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <SetBit+0x44>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	2a 95       	dec	r18
 280:	e2 f7       	brpl	.-8      	; 0x27a <SetBit+0x40>
 282:	98 2f       	mov	r25, r24
 284:	90 95       	com	r25
 286:	89 81       	ldd	r24, Y+1	; 0x01
 288:	89 23       	and	r24, r25
 28a:	0f 90       	pop	r0
 28c:	0f 90       	pop	r0
 28e:	0f 90       	pop	r0
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <GetBit>:
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	00 d0       	rcall	.+0      	; 0x29c <GetBit+0x6>
 29c:	cd b7       	in	r28, 0x3d	; 61
 29e:	de b7       	in	r29, 0x3e	; 62
 2a0:	89 83       	std	Y+1, r24	; 0x01
 2a2:	6a 83       	std	Y+2, r22	; 0x02
 2a4:	8a 81       	ldd	r24, Y+2	; 0x02
 2a6:	28 2f       	mov	r18, r24
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <GetBit+0x1e>
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	2a 95       	dec	r18
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <GetBit+0x1a>
 2b8:	98 2f       	mov	r25, r24
 2ba:	89 81       	ldd	r24, Y+1	; 0x01
 2bc:	89 23       	and	r24, r25
 2be:	0f 90       	pop	r0
 2c0:	0f 90       	pop	r0
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <GetKeypadKey>:
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
 2d4:	0b e2       	ldi	r16, 0x2B	; 43
 2d6:	10 e0       	ldi	r17, 0x00	; 0
 2d8:	40 e0       	ldi	r20, 0x00	; 0
 2da:	64 e0       	ldi	r22, 0x04	; 4
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
 2de:	ad df       	rcall	.-166    	; 0x23a <SetBit>
 2e0:	f8 01       	movw	r30, r16
 2e2:	80 83       	st	Z, r24
 2e4:	00 00       	nop
 2e6:	89 e2       	ldi	r24, 0x29	; 41
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	fc 01       	movw	r30, r24
 2ec:	80 81       	ld	r24, Z
 2ee:	80 95       	com	r24
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	d1 df       	rcall	.-94     	; 0x296 <GetBit>
 2f4:	88 23       	and	r24, r24
 2f6:	11 f0       	breq	.+4      	; 0x2fc <GetKeypadKey+0x34>
 2f8:	81 e3       	ldi	r24, 0x31	; 49
 2fa:	c1 c0       	rjmp	.+386    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 2fc:	89 e2       	ldi	r24, 0x29	; 41
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	fc 01       	movw	r30, r24
 302:	80 81       	ld	r24, Z
 304:	80 95       	com	r24
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	c6 df       	rcall	.-116    	; 0x296 <GetBit>
 30a:	88 23       	and	r24, r24
 30c:	11 f0       	breq	.+4      	; 0x312 <GetKeypadKey+0x4a>
 30e:	84 e3       	ldi	r24, 0x34	; 52
 310:	b6 c0       	rjmp	.+364    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 312:	89 e2       	ldi	r24, 0x29	; 41
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	fc 01       	movw	r30, r24
 318:	80 81       	ld	r24, Z
 31a:	80 95       	com	r24
 31c:	62 e0       	ldi	r22, 0x02	; 2
 31e:	bb df       	rcall	.-138    	; 0x296 <GetBit>
 320:	88 23       	and	r24, r24
 322:	11 f0       	breq	.+4      	; 0x328 <GetKeypadKey+0x60>
 324:	87 e3       	ldi	r24, 0x37	; 55
 326:	ab c0       	rjmp	.+342    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 328:	89 e2       	ldi	r24, 0x29	; 41
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	fc 01       	movw	r30, r24
 32e:	80 81       	ld	r24, Z
 330:	80 95       	com	r24
 332:	63 e0       	ldi	r22, 0x03	; 3
 334:	b0 df       	rcall	.-160    	; 0x296 <GetBit>
 336:	88 23       	and	r24, r24
 338:	11 f0       	breq	.+4      	; 0x33e <GetKeypadKey+0x76>
 33a:	8a e2       	ldi	r24, 0x2A	; 42
 33c:	a0 c0       	rjmp	.+320    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 33e:	0b e2       	ldi	r16, 0x2B	; 43
 340:	10 e0       	ldi	r17, 0x00	; 0
 342:	40 e0       	ldi	r20, 0x00	; 0
 344:	65 e0       	ldi	r22, 0x05	; 5
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	78 df       	rcall	.-272    	; 0x23a <SetBit>
 34a:	f8 01       	movw	r30, r16
 34c:	80 83       	st	Z, r24
 34e:	00 00       	nop
 350:	89 e2       	ldi	r24, 0x29	; 41
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	fc 01       	movw	r30, r24
 356:	80 81       	ld	r24, Z
 358:	80 95       	com	r24
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	9c df       	rcall	.-200    	; 0x296 <GetBit>
 35e:	88 23       	and	r24, r24
 360:	11 f0       	breq	.+4      	; 0x366 <GetKeypadKey+0x9e>
 362:	82 e3       	ldi	r24, 0x32	; 50
 364:	8c c0       	rjmp	.+280    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 366:	89 e2       	ldi	r24, 0x29	; 41
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	fc 01       	movw	r30, r24
 36c:	80 81       	ld	r24, Z
 36e:	80 95       	com	r24
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	91 df       	rcall	.-222    	; 0x296 <GetBit>
 374:	88 23       	and	r24, r24
 376:	11 f0       	breq	.+4      	; 0x37c <GetKeypadKey+0xb4>
 378:	85 e3       	ldi	r24, 0x35	; 53
 37a:	81 c0       	rjmp	.+258    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 37c:	89 e2       	ldi	r24, 0x29	; 41
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	fc 01       	movw	r30, r24
 382:	80 81       	ld	r24, Z
 384:	80 95       	com	r24
 386:	62 e0       	ldi	r22, 0x02	; 2
 388:	86 df       	rcall	.-244    	; 0x296 <GetBit>
 38a:	88 23       	and	r24, r24
 38c:	11 f0       	breq	.+4      	; 0x392 <GetKeypadKey+0xca>
 38e:	88 e3       	ldi	r24, 0x38	; 56
 390:	76 c0       	rjmp	.+236    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 392:	89 e2       	ldi	r24, 0x29	; 41
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	fc 01       	movw	r30, r24
 398:	80 81       	ld	r24, Z
 39a:	80 95       	com	r24
 39c:	63 e0       	ldi	r22, 0x03	; 3
 39e:	7b df       	rcall	.-266    	; 0x296 <GetBit>
 3a0:	88 23       	and	r24, r24
 3a2:	11 f0       	breq	.+4      	; 0x3a8 <GetKeypadKey+0xe0>
 3a4:	80 e3       	ldi	r24, 0x30	; 48
 3a6:	6b c0       	rjmp	.+214    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 3a8:	0b e2       	ldi	r16, 0x2B	; 43
 3aa:	10 e0       	ldi	r17, 0x00	; 0
 3ac:	40 e0       	ldi	r20, 0x00	; 0
 3ae:	66 e0       	ldi	r22, 0x06	; 6
 3b0:	8f ef       	ldi	r24, 0xFF	; 255
 3b2:	43 df       	rcall	.-378    	; 0x23a <SetBit>
 3b4:	f8 01       	movw	r30, r16
 3b6:	80 83       	st	Z, r24
 3b8:	00 00       	nop
 3ba:	89 e2       	ldi	r24, 0x29	; 41
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	fc 01       	movw	r30, r24
 3c0:	80 81       	ld	r24, Z
 3c2:	80 95       	com	r24
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	67 df       	rcall	.-306    	; 0x296 <GetBit>
 3c8:	88 23       	and	r24, r24
 3ca:	11 f0       	breq	.+4      	; 0x3d0 <GetKeypadKey+0x108>
 3cc:	83 e3       	ldi	r24, 0x33	; 51
 3ce:	57 c0       	rjmp	.+174    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 3d0:	89 e2       	ldi	r24, 0x29	; 41
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	fc 01       	movw	r30, r24
 3d6:	80 81       	ld	r24, Z
 3d8:	80 95       	com	r24
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	5c df       	rcall	.-328    	; 0x296 <GetBit>
 3de:	88 23       	and	r24, r24
 3e0:	11 f0       	breq	.+4      	; 0x3e6 <GetKeypadKey+0x11e>
 3e2:	86 e3       	ldi	r24, 0x36	; 54
 3e4:	4c c0       	rjmp	.+152    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 3e6:	89 e2       	ldi	r24, 0x29	; 41
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	fc 01       	movw	r30, r24
 3ec:	80 81       	ld	r24, Z
 3ee:	80 95       	com	r24
 3f0:	62 e0       	ldi	r22, 0x02	; 2
 3f2:	51 df       	rcall	.-350    	; 0x296 <GetBit>
 3f4:	88 23       	and	r24, r24
 3f6:	11 f0       	breq	.+4      	; 0x3fc <GetKeypadKey+0x134>
 3f8:	89 e3       	ldi	r24, 0x39	; 57
 3fa:	41 c0       	rjmp	.+130    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 3fc:	89 e2       	ldi	r24, 0x29	; 41
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	fc 01       	movw	r30, r24
 402:	80 81       	ld	r24, Z
 404:	80 95       	com	r24
 406:	63 e0       	ldi	r22, 0x03	; 3
 408:	46 df       	rcall	.-372    	; 0x296 <GetBit>
 40a:	88 23       	and	r24, r24
 40c:	11 f0       	breq	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 40e:	83 e2       	ldi	r24, 0x23	; 35
 410:	36 c0       	rjmp	.+108    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 412:	0b e2       	ldi	r16, 0x2B	; 43
 414:	10 e0       	ldi	r17, 0x00	; 0
 416:	40 e0       	ldi	r20, 0x00	; 0
 418:	67 e0       	ldi	r22, 0x07	; 7
 41a:	8f ef       	ldi	r24, 0xFF	; 255
 41c:	0e df       	rcall	.-484    	; 0x23a <SetBit>
 41e:	f8 01       	movw	r30, r16
 420:	80 83       	st	Z, r24
 422:	00 00       	nop
 424:	89 e2       	ldi	r24, 0x29	; 41
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	fc 01       	movw	r30, r24
 42a:	80 81       	ld	r24, Z
 42c:	80 95       	com	r24
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	32 df       	rcall	.-412    	; 0x296 <GetBit>
 432:	88 23       	and	r24, r24
 434:	11 f0       	breq	.+4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 436:	81 e4       	ldi	r24, 0x41	; 65
 438:	22 c0       	rjmp	.+68     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 43a:	89 e2       	ldi	r24, 0x29	; 41
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	fc 01       	movw	r30, r24
 440:	80 81       	ld	r24, Z
 442:	80 95       	com	r24
 444:	61 e0       	ldi	r22, 0x01	; 1
 446:	27 df       	rcall	.-434    	; 0x296 <GetBit>
 448:	88 23       	and	r24, r24
 44a:	11 f0       	breq	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 44c:	82 e4       	ldi	r24, 0x42	; 66
 44e:	17 c0       	rjmp	.+46     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 450:	89 e2       	ldi	r24, 0x29	; 41
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	fc 01       	movw	r30, r24
 456:	80 81       	ld	r24, Z
 458:	80 95       	com	r24
 45a:	62 e0       	ldi	r22, 0x02	; 2
 45c:	1c df       	rcall	.-456    	; 0x296 <GetBit>
 45e:	88 23       	and	r24, r24
 460:	11 f0       	breq	.+4      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 462:	83 e4       	ldi	r24, 0x43	; 67
 464:	0c c0       	rjmp	.+24     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 466:	89 e2       	ldi	r24, 0x29	; 41
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	fc 01       	movw	r30, r24
 46c:	80 81       	ld	r24, Z
 46e:	80 95       	com	r24
 470:	63 e0       	ldi	r22, 0x03	; 3
 472:	11 df       	rcall	.-478    	; 0x296 <GetBit>
 474:	88 23       	and	r24, r24
 476:	11 f0       	breq	.+4      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 478:	84 e4       	ldi	r24, 0x44	; 68
 47a:	01 c0       	rjmp	.+2      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	1f 91       	pop	r17
 484:	0f 91       	pop	r16
 486:	08 95       	ret

00000488 <TimerSet>:
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	00 d0       	rcall	.+0      	; 0x48e <TimerSet+0x6>
 48e:	00 d0       	rcall	.+0      	; 0x490 <TimerSet+0x8>
 490:	cd b7       	in	r28, 0x3d	; 61
 492:	de b7       	in	r29, 0x3e	; 62
 494:	69 83       	std	Y+1, r22	; 0x01
 496:	7a 83       	std	Y+2, r23	; 0x02
 498:	8b 83       	std	Y+3, r24	; 0x03
 49a:	9c 83       	std	Y+4, r25	; 0x04
 49c:	89 81       	ldd	r24, Y+1	; 0x01
 49e:	9a 81       	ldd	r25, Y+2	; 0x02
 4a0:	ab 81       	ldd	r26, Y+3	; 0x03
 4a2:	bc 81       	ldd	r27, Y+4	; 0x04
 4a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 4a8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4ac:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 4b0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 4b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4b8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4bc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 4c0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 4c4:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 4c8:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 4cc:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 4d0:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
 4d4:	00 00       	nop
 4d6:	0f 90       	pop	r0
 4d8:	0f 90       	pop	r0
 4da:	0f 90       	pop	r0
 4dc:	0f 90       	pop	r0
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	08 95       	ret

000004e4 <TimerOn>:
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	cd b7       	in	r28, 0x3d	; 61
 4ea:	de b7       	in	r29, 0x3e	; 62
 4ec:	81 e8       	ldi	r24, 0x81	; 129
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	2b e0       	ldi	r18, 0x0B	; 11
 4f2:	fc 01       	movw	r30, r24
 4f4:	20 83       	st	Z, r18
 4f6:	88 e8       	ldi	r24, 0x88	; 136
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	2d e7       	ldi	r18, 0x7D	; 125
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	fc 01       	movw	r30, r24
 500:	31 83       	std	Z+1, r19	; 0x01
 502:	20 83       	st	Z, r18
 504:	8f e6       	ldi	r24, 0x6F	; 111
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	22 e0       	ldi	r18, 0x02	; 2
 50a:	fc 01       	movw	r30, r24
 50c:	20 83       	st	Z, r18
 50e:	84 e8       	ldi	r24, 0x84	; 132
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	fc 01       	movw	r30, r24
 514:	11 82       	std	Z+1, r1	; 0x01
 516:	10 82       	st	Z, r1
 518:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 51c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 520:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 524:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 528:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 52c:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 530:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 534:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
 538:	8f e5       	ldi	r24, 0x5F	; 95
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	2f e5       	ldi	r18, 0x5F	; 95
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	f9 01       	movw	r30, r18
 542:	20 81       	ld	r18, Z
 544:	20 68       	ori	r18, 0x80	; 128
 546:	fc 01       	movw	r30, r24
 548:	20 83       	st	Z, r18
 54a:	00 00       	nop
 54c:	df 91       	pop	r29
 54e:	cf 91       	pop	r28
 550:	08 95       	ret

00000552 <TimerISR>:

void TimerISR() {
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	cd b7       	in	r28, 0x3d	; 61
 558:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
}
 560:	00 00       	nop
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	08 95       	ret

00000568 <__vector_13>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 568:	1f 92       	push	r1
 56a:	0f 92       	push	r0
 56c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 570:	0f 92       	push	r0
 572:	11 24       	eor	r1, r1
 574:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 578:	0f 92       	push	r0
 57a:	2f 93       	push	r18
 57c:	3f 93       	push	r19
 57e:	4f 93       	push	r20
 580:	5f 93       	push	r21
 582:	6f 93       	push	r22
 584:	7f 93       	push	r23
 586:	8f 93       	push	r24
 588:	9f 93       	push	r25
 58a:	af 93       	push	r26
 58c:	bf 93       	push	r27
 58e:	ef 93       	push	r30
 590:	ff 93       	push	r31
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	cd b7       	in	r28, 0x3d	; 61
 598:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 59a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <_avr_timer_cntcurr>
 59e:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x1>
 5a2:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <_avr_timer_cntcurr+0x2>
 5a6:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <_avr_timer_cntcurr+0x3>
 5aa:	01 97       	sbiw	r24, 0x01	; 1
 5ac:	a1 09       	sbc	r26, r1
 5ae:	b1 09       	sbc	r27, r1
 5b0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 5b4:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 5b8:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 5bc:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 5c0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <_avr_timer_cntcurr>
 5c4:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x1>
 5c8:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <_avr_timer_cntcurr+0x2>
 5cc:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <_avr_timer_cntcurr+0x3>
 5d0:	89 2b       	or	r24, r25
 5d2:	8a 2b       	or	r24, r26
 5d4:	8b 2b       	or	r24, r27
 5d6:	89 f4       	brne	.+34     	; 0x5fa <__vector_13+0x92>
		TimerISR(); 				// Call the ISR that the user uses
 5d8:	bc df       	rcall	.-136    	; 0x552 <TimerISR>
        _avr_timer_cntcurr = _avr_timer_M;
 5da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5e2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 5e6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 5ea:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr>
 5ee:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x1>
 5f2:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_avr_timer_cntcurr+0x2>
 5f6:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_avr_timer_cntcurr+0x3>
    }
}
 5fa:	00 00       	nop
 5fc:	df 91       	pop	r29
 5fe:	cf 91       	pop	r28
 600:	ff 91       	pop	r31
 602:	ef 91       	pop	r30
 604:	bf 91       	pop	r27
 606:	af 91       	pop	r26
 608:	9f 91       	pop	r25
 60a:	8f 91       	pop	r24
 60c:	7f 91       	pop	r23
 60e:	6f 91       	pop	r22
 610:	5f 91       	pop	r21
 612:	4f 91       	pop	r20
 614:	3f 91       	pop	r19
 616:	2f 91       	pop	r18
 618:	0f 90       	pop	r0
 61a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 61e:	0f 90       	pop	r0
 620:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 624:	0f 90       	pop	r0
 626:	1f 90       	pop	r1
 628:	18 95       	reti

0000062a <SPI_MasterInit>:
#include <timer.h>
#include <bit.h>
#include "avr/iom1284.h"

void SPI_MasterInit(void)
{
 62a:	cf 93       	push	r28
 62c:	df 93       	push	r29
 62e:	cd b7       	in	r28, 0x3d	; 61
 630:	de b7       	in	r29, 0x3e	; 62
	/* Set MOSI and SCK output, all others input */
	DDRB = (1<<DDB4)|(1<<DDB5)|(1<<DDB7);
 632:	84 e2       	ldi	r24, 0x24	; 36
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	20 eb       	ldi	r18, 0xB0	; 176
 638:	fc 01       	movw	r30, r24
 63a:	20 83       	st	Z, r18
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 63c:	8c e4       	ldi	r24, 0x4C	; 76
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	21 e5       	ldi	r18, 0x51	; 81
 642:	fc 01       	movw	r30, r24
 644:	20 83       	st	Z, r18
	sei();
 646:	78 94       	sei
}
 648:	00 00       	nop
 64a:	df 91       	pop	r29
 64c:	cf 91       	pop	r28
 64e:	08 95       	ret

00000650 <SPI_MasterTransmit>:

void SPI_MasterTransmit(char cData)
{
 650:	cf 93       	push	r28
 652:	df 93       	push	r29
 654:	00 d0       	rcall	.+0      	; 0x656 <SPI_MasterTransmit+0x6>
 656:	cd b7       	in	r28, 0x3d	; 61
 658:	de b7       	in	r29, 0x3e	; 62
 65a:	8a 83       	std	Y+2, r24	; 0x02
	/* Start transmission */
	SPDR = cData;
 65c:	8e e4       	ldi	r24, 0x4E	; 78
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	2a 81       	ldd	r18, Y+2	; 0x02
 662:	fc 01       	movw	r30, r24
 664:	20 83       	st	Z, r18
	SetBit(PORTB, 4, 0);
 666:	85 e2       	ldi	r24, 0x25	; 37
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	fc 01       	movw	r30, r24
 66c:	80 81       	ld	r24, Z
 66e:	40 e0       	ldi	r20, 0x00	; 0
 670:	64 e0       	ldi	r22, 0x04	; 4
 672:	e3 dd       	rcall	.-1082   	; 0x23a <SetBit>
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF))){
 674:	00 00       	nop
 676:	8d e4       	ldi	r24, 0x4D	; 77
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	fc 01       	movw	r30, r24
 67c:	80 81       	ld	r24, Z
 67e:	88 23       	and	r24, r24
 680:	d4 f7       	brge	.-12     	; 0x676 <SPI_MasterTransmit+0x26>
		;
	}
	unsigned char tmp = SPDR;
 682:	8e e4       	ldi	r24, 0x4E	; 78
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	fc 01       	movw	r30, r24
 688:	80 81       	ld	r24, Z
 68a:	89 83       	std	Y+1, r24	; 0x01
	SetBit(PORTB, 4, 1);
 68c:	85 e2       	ldi	r24, 0x25	; 37
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	fc 01       	movw	r30, r24
 692:	80 81       	ld	r24, Z
 694:	41 e0       	ldi	r20, 0x01	; 1
 696:	64 e0       	ldi	r22, 0x04	; 4
 698:	d0 dd       	rcall	.-1120   	; 0x23a <SetBit>
}
 69a:	00 00       	nop
 69c:	0f 90       	pop	r0
 69e:	0f 90       	pop	r0
 6a0:	df 91       	pop	r29
 6a2:	cf 91       	pop	r28
 6a4:	08 95       	ret

000006a6 <SMPattern>:
char ptrn[10];
unsigned char foo;
unsigned char input;
unsigned long int SMTick1_calc;

int SMPattern(int state) {
 6a6:	cf 93       	push	r28
 6a8:	df 93       	push	r29
 6aa:	00 d0       	rcall	.+0      	; 0x6ac <SMPattern+0x6>
 6ac:	cd b7       	in	r28, 0x3d	; 61
 6ae:	de b7       	in	r29, 0x3e	; 62
 6b0:	9a 83       	std	Y+2, r25	; 0x02
 6b2:	89 83       	std	Y+1, r24	; 0x01
	input = GetKeypadKey();
 6b4:	09 de       	rcall	.-1006   	; 0x2c8 <GetKeypadKey>
 6b6:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <input>
	switch(state) {
 6ba:	89 81       	ldd	r24, Y+1	; 0x01
 6bc:	9a 81       	ldd	r25, Y+2	; 0x02
 6be:	00 97       	sbiw	r24, 0x00	; 0
 6c0:	19 f0       	breq	.+6      	; 0x6c8 <SMPattern+0x22>
 6c2:	01 97       	sbiw	r24, 0x01	; 1
 6c4:	31 f0       	breq	.+12     	; 0x6d2 <SMPattern+0x2c>
 6c6:	3f c0       	rjmp	.+126    	; 0x746 <SMPattern+0xa0>
	case init:
	state = wait;
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	9a 83       	std	Y+2, r25	; 0x02
 6ce:	89 83       	std	Y+1, r24	; 0x01
	break;
 6d0:	3a c0       	rjmp	.+116    	; 0x746 <SMPattern+0xa0>
	
	case wait:
		switch(input) {
 6d2:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <input>
 6d6:	88 2f       	mov	r24, r24
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	82 34       	cpi	r24, 0x42	; 66
 6dc:	91 05       	cpc	r25, r1
 6de:	b1 f0       	breq	.+44     	; 0x70c <SMPattern+0x66>
 6e0:	83 34       	cpi	r24, 0x43	; 67
 6e2:	91 05       	cpc	r25, r1
 6e4:	24 f4       	brge	.+8      	; 0x6ee <SMPattern+0x48>
 6e6:	81 34       	cpi	r24, 0x41	; 65
 6e8:	91 05       	cpc	r25, r1
 6ea:	41 f0       	breq	.+16     	; 0x6fc <SMPattern+0x56>
 6ec:	27 c0       	rjmp	.+78     	; 0x73c <SMPattern+0x96>
 6ee:	83 34       	cpi	r24, 0x43	; 67
 6f0:	91 05       	cpc	r25, r1
 6f2:	a1 f0       	breq	.+40     	; 0x71c <SMPattern+0x76>
 6f4:	84 34       	cpi	r24, 0x44	; 68
 6f6:	91 05       	cpc	r25, r1
 6f8:	c9 f0       	breq	.+50     	; 0x72c <SMPattern+0x86>
 6fa:	20 c0       	rjmp	.+64     	; 0x73c <SMPattern+0x96>
			case 'A':
			PtrnSelect = 0x10;
 6fc:	80 e1       	ldi	r24, 0x10	; 16
 6fe:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <PtrnSelect>
			LCD_Cursor(6);
 702:	86 e0       	ldi	r24, 0x06	; 6
 704:	85 dd       	rcall	.-1270   	; 0x210 <LCD_Cursor>
			LCD_WriteData('1');
 706:	81 e3       	ldi	r24, 0x31	; 49
 708:	54 dd       	rcall	.-1368   	; 0x1b2 <LCD_WriteData>
 70a:	18 c0       	rjmp	.+48     	; 0x73c <SMPattern+0x96>
			break;
 70c:	80 e2       	ldi	r24, 0x20	; 32
			
			case 'B':
			PtrnSelect = 0x20;
 70e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <PtrnSelect>
			LCD_Cursor(6);
 712:	86 e0       	ldi	r24, 0x06	; 6
 714:	7d dd       	rcall	.-1286   	; 0x210 <LCD_Cursor>
			LCD_WriteData('2');
 716:	82 e3       	ldi	r24, 0x32	; 50
 718:	4c dd       	rcall	.-1384   	; 0x1b2 <LCD_WriteData>
 71a:	10 c0       	rjmp	.+32     	; 0x73c <SMPattern+0x96>
			break;
			
			case 'C':
			PtrnSelect = 0x30;
 71c:	80 e3       	ldi	r24, 0x30	; 48
 71e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <PtrnSelect>
			LCD_Cursor(6);
 722:	86 e0       	ldi	r24, 0x06	; 6
 724:	75 dd       	rcall	.-1302   	; 0x210 <LCD_Cursor>
			LCD_WriteData('3');
 726:	83 e3       	ldi	r24, 0x33	; 51
 728:	44 dd       	rcall	.-1400   	; 0x1b2 <LCD_WriteData>
			break;
			
			case 'D':
			PtrnSelect = 0x40;
 72a:	08 c0       	rjmp	.+16     	; 0x73c <SMPattern+0x96>
 72c:	80 e4       	ldi	r24, 0x40	; 64
 72e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <PtrnSelect>
			LCD_Cursor(6);
 732:	86 e0       	ldi	r24, 0x06	; 6
 734:	6d dd       	rcall	.-1318   	; 0x210 <LCD_Cursor>
			LCD_WriteData('4');
 736:	84 e3       	ldi	r24, 0x34	; 52
 738:	3c dd       	rcall	.-1416   	; 0x1b2 <LCD_WriteData>
 73a:	00 00       	nop
			break;
 73c:	81 e0       	ldi	r24, 0x01	; 1
	}
	state = wait;
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	9a 83       	std	Y+2, r25	; 0x02
 742:	89 83       	std	Y+1, r24	; 0x01
 744:	00 00       	nop
	break;
 746:	89 81       	ldd	r24, Y+1	; 0x01
	
	
	}
	
	return state;
 748:	9a 81       	ldd	r25, Y+2	; 0x02
 74a:	0f 90       	pop	r0
}
 74c:	0f 90       	pop	r0
 74e:	df 91       	pop	r29
 750:	cf 91       	pop	r28
 752:	08 95       	ret

00000754 <SMSpd>:
 754:	cf 93       	push	r28

enum State_2{init_2, wait_2};
	
int SMSpd(int state) {
 756:	df 93       	push	r29
 758:	00 d0       	rcall	.+0      	; 0x75a <SMSpd+0x6>
 75a:	cd b7       	in	r28, 0x3d	; 61
 75c:	de b7       	in	r29, 0x3e	; 62
 75e:	9a 83       	std	Y+2, r25	; 0x02
 760:	89 83       	std	Y+1, r24	; 0x01
	input = GetKeypadKey();
 762:	b2 dd       	rcall	.-1180   	; 0x2c8 <GetKeypadKey>
 764:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <input>
	switch(state) {
 768:	89 81       	ldd	r24, Y+1	; 0x01
 76a:	9a 81       	ldd	r25, Y+2	; 0x02
 76c:	00 97       	sbiw	r24, 0x00	; 0
 76e:	19 f0       	breq	.+6      	; 0x776 <SMSpd+0x22>
 770:	01 97       	sbiw	r24, 0x01	; 1
 772:	31 f0       	breq	.+12     	; 0x780 <SMSpd+0x2c>
 774:	53 c0       	rjmp	.+166    	; 0x81c <SMSpd+0xc8>
	case init_2:
	state = wait_2;
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	9a 83       	std	Y+2, r25	; 0x02
 77c:	89 83       	std	Y+1, r24	; 0x01
	break;
 77e:	4e c0       	rjmp	.+156    	; 0x81c <SMSpd+0xc8>
	
	case wait_2:
	switch(input) {
 780:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <input>
 784:	88 2f       	mov	r24, r24
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	83 33       	cpi	r24, 0x33	; 51
 78a:	91 05       	cpc	r25, r1
 78c:	11 f1       	breq	.+68     	; 0x7d2 <SMSpd+0x7e>
 78e:	84 33       	cpi	r24, 0x34	; 52
 790:	91 05       	cpc	r25, r1
 792:	34 f4       	brge	.+12     	; 0x7a0 <SMSpd+0x4c>
 794:	81 33       	cpi	r24, 0x31	; 49
 796:	91 05       	cpc	r25, r1
 798:	61 f0       	breq	.+24     	; 0x7b2 <SMSpd+0x5e>
 79a:	c2 97       	sbiw	r24, 0x32	; 50
 79c:	91 f0       	breq	.+36     	; 0x7c2 <SMSpd+0x6e>
 79e:	39 c0       	rjmp	.+114    	; 0x812 <SMSpd+0xbe>
 7a0:	85 33       	cpi	r24, 0x35	; 53
 7a2:	91 05       	cpc	r25, r1
 7a4:	31 f1       	breq	.+76     	; 0x7f2 <SMSpd+0x9e>
 7a6:	85 33       	cpi	r24, 0x35	; 53
 7a8:	91 05       	cpc	r25, r1
 7aa:	dc f0       	brlt	.+54     	; 0x7e2 <SMSpd+0x8e>
 7ac:	c6 97       	sbiw	r24, 0x36	; 54
 7ae:	49 f1       	breq	.+82     	; 0x802 <SMSpd+0xae>
 7b0:	30 c0       	rjmp	.+96     	; 0x812 <SMSpd+0xbe>
		case '1':
		SpdSelect = 0x01;
 7b2:	81 e0       	ldi	r24, 0x01	; 1
 7b4:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <SpdSelect>
		LCD_Cursor(14);
 7b8:	8e e0       	ldi	r24, 0x0E	; 14
 7ba:	2a dd       	rcall	.-1452   	; 0x210 <LCD_Cursor>
		LCD_WriteData('1');
 7bc:	81 e3       	ldi	r24, 0x31	; 49
 7be:	f9 dc       	rcall	.-1550   	; 0x1b2 <LCD_WriteData>
 7c0:	28 c0       	rjmp	.+80     	; 0x812 <SMSpd+0xbe>
		break;
 7c2:	82 e0       	ldi	r24, 0x02	; 2
		
		case '2':
		SpdSelect = 0x02;
 7c4:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <SpdSelect>
		LCD_Cursor(14);
 7c8:	8e e0       	ldi	r24, 0x0E	; 14
 7ca:	22 dd       	rcall	.-1468   	; 0x210 <LCD_Cursor>
		LCD_WriteData('2');
 7cc:	82 e3       	ldi	r24, 0x32	; 50
 7ce:	f1 dc       	rcall	.-1566   	; 0x1b2 <LCD_WriteData>
 7d0:	20 c0       	rjmp	.+64     	; 0x812 <SMSpd+0xbe>
		break;
		
		case '3':
		SpdSelect = 0x03;
 7d2:	83 e0       	ldi	r24, 0x03	; 3
 7d4:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <SpdSelect>
		LCD_Cursor(14);
 7d8:	8e e0       	ldi	r24, 0x0E	; 14
 7da:	1a dd       	rcall	.-1484   	; 0x210 <LCD_Cursor>
		LCD_WriteData('3');
 7dc:	83 e3       	ldi	r24, 0x33	; 51
 7de:	e9 dc       	rcall	.-1582   	; 0x1b2 <LCD_WriteData>
		break;
		
		case '4':
		SpdSelect = 0x04;
 7e0:	18 c0       	rjmp	.+48     	; 0x812 <SMSpd+0xbe>
 7e2:	84 e0       	ldi	r24, 0x04	; 4
 7e4:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <SpdSelect>
		LCD_Cursor(14);
 7e8:	8e e0       	ldi	r24, 0x0E	; 14
		LCD_WriteData('4');
 7ea:	12 dd       	rcall	.-1500   	; 0x210 <LCD_Cursor>
 7ec:	84 e3       	ldi	r24, 0x34	; 52
		break;
 7ee:	e1 dc       	rcall	.-1598   	; 0x1b2 <LCD_WriteData>
		
		case '5':
		SpdSelect = 0x05;
 7f0:	10 c0       	rjmp	.+32     	; 0x812 <SMSpd+0xbe>
 7f2:	85 e0       	ldi	r24, 0x05	; 5
 7f4:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <SpdSelect>
		LCD_Cursor(14);
 7f8:	8e e0       	ldi	r24, 0x0E	; 14
		LCD_WriteData('5');
 7fa:	0a dd       	rcall	.-1516   	; 0x210 <LCD_Cursor>
 7fc:	85 e3       	ldi	r24, 0x35	; 53
 7fe:	d9 dc       	rcall	.-1614   	; 0x1b2 <LCD_WriteData>
		break;
 800:	08 c0       	rjmp	.+16     	; 0x812 <SMSpd+0xbe>
		
		case '6':
		SpdSelect = 0x06;
 802:	86 e0       	ldi	r24, 0x06	; 6
 804:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <SpdSelect>
		LCD_Cursor(14);
 808:	8e e0       	ldi	r24, 0x0E	; 14
 80a:	02 dd       	rcall	.-1532   	; 0x210 <LCD_Cursor>
 80c:	86 e3       	ldi	r24, 0x36	; 54
		LCD_WriteData('6');
 80e:	d1 dc       	rcall	.-1630   	; 0x1b2 <LCD_WriteData>
 810:	00 00       	nop
 812:	81 e0       	ldi	r24, 0x01	; 1
		break;
 814:	90 e0       	ldi	r25, 0x00	; 0
	}
	state = wait_2;
 816:	9a 83       	std	Y+2, r25	; 0x02
 818:	89 83       	std	Y+1, r24	; 0x01
 81a:	00 00       	nop
 81c:	89 81       	ldd	r24, Y+1	; 0x01
	break;
 81e:	9a 81       	ldd	r25, Y+2	; 0x02
	
	}
	return state;
 820:	0f 90       	pop	r0
 822:	0f 90       	pop	r0
}
 824:	df 91       	pop	r29
 826:	cf 91       	pop	r28
 828:	08 95       	ret

0000082a <SMaster>:
 82a:	cf 93       	push	r28
 82c:	df 93       	push	r29

enum States_3{init_3, Transmit_1};

int SMaster(int state) {
 82e:	00 d0       	rcall	.+0      	; 0x830 <SMaster+0x6>
 830:	cd b7       	in	r28, 0x3d	; 61
 832:	de b7       	in	r29, 0x3e	; 62
 834:	9a 83       	std	Y+2, r25	; 0x02
 836:	89 83       	std	Y+1, r24	; 0x01
	switch(state) {
 838:	89 81       	ldd	r24, Y+1	; 0x01
 83a:	9a 81       	ldd	r25, Y+2	; 0x02
 83c:	00 97       	sbiw	r24, 0x00	; 0
 83e:	19 f0       	breq	.+6      	; 0x846 <SMaster+0x1c>
 840:	01 97       	sbiw	r24, 0x01	; 1
 842:	31 f0       	breq	.+12     	; 0x850 <SMaster+0x26>
 844:	1a c0       	rjmp	.+52     	; 0x87a <SMaster+0x50>
		case init_3:
		state = Transmit_1;
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	9a 83       	std	Y+2, r25	; 0x02
 84c:	89 83       	std	Y+1, r24	; 0x01
		break;
 84e:	15 c0       	rjmp	.+42     	; 0x87a <SMaster+0x50>
		
		case Transmit_1:
		RecievedData = PtrnSelect | SpdSelect;
 850:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <PtrnSelect>
 854:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <SpdSelect>
 858:	89 2b       	or	r24, r25
 85a:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <RecievedData>
		if(PtrnSelect != 0x00 || SpdSelect != 0x00) {
 85e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <PtrnSelect>
 862:	88 23       	and	r24, r24
 864:	21 f4       	brne	.+8      	; 0x86e <SMaster+0x44>
 866:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <SpdSelect>
 86a:	88 23       	and	r24, r24
 86c:	31 f0       	breq	.+12     	; 0x87a <SMaster+0x50>
// 			LCD_ClearScreen();
// 			foo = RecievedData;
// 			sprintf(ptrn,"%d",foo );
// 			LCD_DisplayString(1, ptrn);
			SPI_MasterTransmit( RecievedData);
 86e:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <RecievedData>
 872:	ee de       	rcall	.-548    	; 0x650 <SPI_MasterTransmit>
		}
		else {
			break;
		}
		state = init_3;
 874:	1a 82       	std	Y+2, r1	; 0x02
 876:	19 82       	std	Y+1, r1	; 0x01
		break;
 878:	00 00       	nop
	}
	return state;
 87a:	89 81       	ldd	r24, Y+1	; 0x01
 87c:	9a 81       	ldd	r25, Y+2	; 0x02
}
 87e:	0f 90       	pop	r0
 880:	0f 90       	pop	r0
 882:	df 91       	pop	r29
 884:	cf 91       	pop	r28
 886:	08 95       	ret

00000888 <main>:



int main(void)
{
 888:	0f 93       	push	r16
 88a:	1f 93       	push	r17
 88c:	cf 93       	push	r28
 88e:	df 93       	push	r29
 890:	cd b7       	in	r28, 0x3d	; 61
 892:	de b7       	in	r29, 0x3e	; 62
 894:	e2 97       	sbiw	r28, 0x32	; 50
 896:	0f b6       	in	r0, 0x3f	; 63
 898:	f8 94       	cli
 89a:	de bf       	out	0x3e, r29	; 62
 89c:	0f be       	out	0x3f, r0	; 63
 89e:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF; PORTA = 0x00;
 8a0:	81 e2       	ldi	r24, 0x21	; 33
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	2f ef       	ldi	r18, 0xFF	; 255
 8a6:	fc 01       	movw	r30, r24
 8a8:	20 83       	st	Z, r18
 8aa:	82 e2       	ldi	r24, 0x22	; 34
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	fc 01       	movw	r30, r24
 8b0:	10 82       	st	Z, r1
	DDRB = 0xFF; PORTB = 0x00;
 8b2:	84 e2       	ldi	r24, 0x24	; 36
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	2f ef       	ldi	r18, 0xFF	; 255
 8b8:	fc 01       	movw	r30, r24
 8ba:	20 83       	st	Z, r18
 8bc:	85 e2       	ldi	r24, 0x25	; 37
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	fc 01       	movw	r30, r24
 8c2:	10 82       	st	Z, r1
	DDRC = 0xFF; PORTC = 0x00;
 8c4:	87 e2       	ldi	r24, 0x27	; 39
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	2f ef       	ldi	r18, 0xFF	; 255
 8ca:	fc 01       	movw	r30, r24
 8cc:	20 83       	st	Z, r18
 8ce:	88 e2       	ldi	r24, 0x28	; 40
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	fc 01       	movw	r30, r24
 8d4:	10 82       	st	Z, r1
	DDRD = 0xF0; PORTD = 0x0F;
 8d6:	8a e2       	ldi	r24, 0x2A	; 42
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	20 ef       	ldi	r18, 0xF0	; 240
 8dc:	fc 01       	movw	r30, r24
 8de:	20 83       	st	Z, r18
 8e0:	8b e2       	ldi	r24, 0x2B	; 43
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	2f e0       	ldi	r18, 0x0F	; 15
 8e6:	fc 01       	movw	r30, r24
 8e8:	20 83       	st	Z, r18
	LCD_init();
 8ea:	4d dc       	rcall	.-1894   	; 0x186 <LCD_init>
	unsigned char Patt[] = {'P','t','r','n', ':'};
 8ec:	85 e0       	ldi	r24, 0x05	; 5
 8ee:	e4 e0       	ldi	r30, 0x04	; 4
 8f0:	f1 e0       	ldi	r31, 0x01	; 1
 8f2:	de 01       	movw	r26, r28
 8f4:	90 96       	adiw	r26, 0x20	; 32
 8f6:	01 90       	ld	r0, Z+
 8f8:	0d 92       	st	X+, r0
 8fa:	8a 95       	dec	r24
 8fc:	e1 f7       	brne	.-8      	; 0x8f6 <main+0x6e>
	unsigned char sped[] = {'S', 'p', 'd', ':'};
 8fe:	83 e5       	ldi	r24, 0x53	; 83
 900:	8d a3       	std	Y+37, r24	; 0x25
 902:	80 e7       	ldi	r24, 0x70	; 112
 904:	8e a3       	std	Y+38, r24	; 0x26
 906:	84 e6       	ldi	r24, 0x64	; 100
 908:	8f a3       	std	Y+39, r24	; 0x27
 90a:	8a e3       	ldi	r24, 0x3A	; 58
 90c:	88 a7       	std	Y+40, r24	; 0x28
	unsigned char uC[] = {'u', 'C', ':', '1'};
 90e:	85 e7       	ldi	r24, 0x75	; 117
 910:	89 a7       	std	Y+41, r24	; 0x29
 912:	83 e4       	ldi	r24, 0x43	; 67
 914:	8a a7       	std	Y+42, r24	; 0x2a
 916:	8a e3       	ldi	r24, 0x3A	; 58
 918:	8b a7       	std	Y+43, r24	; 0x2b
 91a:	81 e3       	ldi	r24, 0x31	; 49
 91c:	8c a7       	std	Y+44, r24	; 0x2c
	unsigned char i;
		
	for(i = 0; i < 5; i++) {
 91e:	19 82       	std	Y+1, r1	; 0x01
 920:	11 c0       	rjmp	.+34     	; 0x944 <main+0xbc>
		LCD_Cursor(i + 1);
 922:	89 81       	ldd	r24, Y+1	; 0x01
 924:	8f 5f       	subi	r24, 0xFF	; 255
 926:	74 dc       	rcall	.-1816   	; 0x210 <LCD_Cursor>
		LCD_WriteData(Patt[i]);
 928:	89 81       	ldd	r24, Y+1	; 0x01
 92a:	88 2f       	mov	r24, r24
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	9e 01       	movw	r18, r28
 930:	20 5e       	subi	r18, 0xE0	; 224
 932:	3f 4f       	sbci	r19, 0xFF	; 255
 934:	82 0f       	add	r24, r18
 936:	93 1f       	adc	r25, r19
 938:	fc 01       	movw	r30, r24
 93a:	80 81       	ld	r24, Z
 93c:	3a dc       	rcall	.-1932   	; 0x1b2 <LCD_WriteData>
	unsigned char Patt[] = {'P','t','r','n', ':'};
	unsigned char sped[] = {'S', 'p', 'd', ':'};
	unsigned char uC[] = {'u', 'C', ':', '1'};
	unsigned char i;
		
	for(i = 0; i < 5; i++) {
 93e:	89 81       	ldd	r24, Y+1	; 0x01
 940:	8f 5f       	subi	r24, 0xFF	; 255
 942:	89 83       	std	Y+1, r24	; 0x01
 944:	89 81       	ldd	r24, Y+1	; 0x01
 946:	85 30       	cpi	r24, 0x05	; 5
 948:	60 f3       	brcs	.-40     	; 0x922 <main+0x9a>
		LCD_Cursor(i + 1);
		LCD_WriteData(Patt[i]);
	}
	
	for(i = 0; i < 4; i++) {
 94a:	19 82       	std	Y+1, r1	; 0x01
		LCD_Cursor(i + 10);
 94c:	11 c0       	rjmp	.+34     	; 0x970 <main+0xe8>
 94e:	89 81       	ldd	r24, Y+1	; 0x01
 950:	86 5f       	subi	r24, 0xF6	; 246
 952:	5e dc       	rcall	.-1860   	; 0x210 <LCD_Cursor>
		LCD_WriteData(sped[i]);
 954:	89 81       	ldd	r24, Y+1	; 0x01
 956:	88 2f       	mov	r24, r24
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	9e 01       	movw	r18, r28
 95c:	2b 5d       	subi	r18, 0xDB	; 219
 95e:	3f 4f       	sbci	r19, 0xFF	; 255
 960:	82 0f       	add	r24, r18
 962:	93 1f       	adc	r25, r19
 964:	fc 01       	movw	r30, r24
 966:	80 81       	ld	r24, Z
 968:	24 dc       	rcall	.-1976   	; 0x1b2 <LCD_WriteData>
	for(i = 0; i < 5; i++) {
		LCD_Cursor(i + 1);
		LCD_WriteData(Patt[i]);
	}
	
	for(i = 0; i < 4; i++) {
 96a:	89 81       	ldd	r24, Y+1	; 0x01
 96c:	8f 5f       	subi	r24, 0xFF	; 255
 96e:	89 83       	std	Y+1, r24	; 0x01
 970:	89 81       	ldd	r24, Y+1	; 0x01
 972:	84 30       	cpi	r24, 0x04	; 4
		LCD_Cursor(i + 10);
		LCD_WriteData(sped[i]);
	}
	
	for(i = 0; i < 4; i++) {
 974:	60 f3       	brcs	.-40     	; 0x94e <main+0xc6>
 976:	19 82       	std	Y+1, r1	; 0x01
		LCD_Cursor(i + 17);
 978:	11 c0       	rjmp	.+34     	; 0x99c <main+0x114>
 97a:	89 81       	ldd	r24, Y+1	; 0x01
 97c:	8f 5e       	subi	r24, 0xEF	; 239
 97e:	48 dc       	rcall	.-1904   	; 0x210 <LCD_Cursor>
		LCD_WriteData(uC[i]);
 980:	89 81       	ldd	r24, Y+1	; 0x01
 982:	88 2f       	mov	r24, r24
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	9e 01       	movw	r18, r28
 988:	27 5d       	subi	r18, 0xD7	; 215
 98a:	3f 4f       	sbci	r19, 0xFF	; 255
 98c:	82 0f       	add	r24, r18
 98e:	93 1f       	adc	r25, r19
 990:	fc 01       	movw	r30, r24
 992:	80 81       	ld	r24, Z
 994:	0e dc       	rcall	.-2020   	; 0x1b2 <LCD_WriteData>
	for(i = 0; i < 4; i++) {
		LCD_Cursor(i + 10);
		LCD_WriteData(sped[i]);
	}
	
	for(i = 0; i < 4; i++) {
 996:	89 81       	ldd	r24, Y+1	; 0x01
 998:	8f 5f       	subi	r24, 0xFF	; 255
 99a:	89 83       	std	Y+1, r24	; 0x01
 99c:	89 81       	ldd	r24, Y+1	; 0x01
 99e:	84 30       	cpi	r24, 0x04	; 4
 9a0:	60 f3       	brcs	.-40     	; 0x97a <main+0xf2>
		LCD_Cursor(i + 17);
		LCD_WriteData(uC[i]);
	}
	
	
		SMTick1_calc = 100;
 9a2:	84 e6       	ldi	r24, 0x64	; 100
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	a0 e0       	ldi	r26, 0x00	; 0
 9a8:	b0 e0       	ldi	r27, 0x00	; 0
 9aa:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <SMTick1_calc>
 9ae:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <SMTick1_calc+0x1>
 9b2:	a0 93 39 01 	sts	0x0139, r26	; 0x800139 <SMTick1_calc+0x2>
 9b6:	b0 93 3a 01 	sts	0x013A, r27	; 0x80013a <SMTick1_calc+0x3>
		unsigned long int SMTick2_calc = 50;
 9ba:	82 e3       	ldi	r24, 0x32	; 50
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	a0 e0       	ldi	r26, 0x00	; 0
 9c0:	b0 e0       	ldi	r27, 0x00	; 0
 9c2:	8a 83       	std	Y+2, r24	; 0x02
 9c4:	9b 83       	std	Y+3, r25	; 0x03
 9c6:	ac 83       	std	Y+4, r26	; 0x04
 9c8:	bd 83       	std	Y+5, r27	; 0x05
 		unsigned long int SMTick3_calc = 50;
 9ca:	82 e3       	ldi	r24, 0x32	; 50
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	a0 e0       	ldi	r26, 0x00	; 0
 9d0:	b0 e0       	ldi	r27, 0x00	; 0
 9d2:	8e 83       	std	Y+6, r24	; 0x06
 9d4:	9f 83       	std	Y+7, r25	; 0x07
 9d6:	a8 87       	std	Y+8, r26	; 0x08
 9d8:	b9 87       	std	Y+9, r27	; 0x09
// 		unsigned long int SMTick4_calc = 150;
// 		unsigned long int SMTick5_calc = 10;

		//Calculating GCD
		unsigned long int tmpGCD = 10;
 9da:	8a e0       	ldi	r24, 0x0A	; 10
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	a0 e0       	ldi	r26, 0x00	; 0
 9e0:	b0 e0       	ldi	r27, 0x00	; 0
 9e2:	8a 87       	std	Y+10, r24	; 0x0a
 9e4:	9b 87       	std	Y+11, r25	; 0x0b
 9e6:	ac 87       	std	Y+12, r26	; 0x0c
 9e8:	bd 87       	std	Y+13, r27	; 0x0d

		//Greatest common divisor for all tasks or smallest time unit for tasks.
		unsigned long int GCD = tmpGCD;
 9ea:	8a 85       	ldd	r24, Y+10	; 0x0a
 9ec:	9b 85       	ldd	r25, Y+11	; 0x0b
 9ee:	ac 85       	ldd	r26, Y+12	; 0x0c
 9f0:	bd 85       	ldd	r27, Y+13	; 0x0d
 9f2:	8e 87       	std	Y+14, r24	; 0x0e
 9f4:	9f 87       	std	Y+15, r25	; 0x0f
 9f6:	a8 8b       	std	Y+16, r26	; 0x10
 9f8:	b9 8b       	std	Y+17, r27	; 0x11

		//Recalculate GCD periods for scheduler
		unsigned long int SMTick1_period = SMTick1_calc/GCD;
 9fa:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <SMTick1_calc>
 9fe:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <SMTick1_calc+0x1>
 a02:	a0 91 39 01 	lds	r26, 0x0139	; 0x800139 <SMTick1_calc+0x2>
 a06:	b0 91 3a 01 	lds	r27, 0x013A	; 0x80013a <SMTick1_calc+0x3>
 a0a:	2e 85       	ldd	r18, Y+14	; 0x0e
 a0c:	3f 85       	ldd	r19, Y+15	; 0x0f
 a0e:	48 89       	ldd	r20, Y+16	; 0x10
 a10:	59 89       	ldd	r21, Y+17	; 0x11
 a12:	bc 01       	movw	r22, r24
 a14:	cd 01       	movw	r24, r26
 a16:	52 d1       	rcall	.+676    	; 0xcbc <__udivmodsi4>
 a18:	da 01       	movw	r26, r20
 a1a:	c9 01       	movw	r24, r18
 a1c:	8a 8b       	std	Y+18, r24	; 0x12
 a1e:	9b 8b       	std	Y+19, r25	; 0x13
 a20:	ac 8b       	std	Y+20, r26	; 0x14
 a22:	bd 8b       	std	Y+21, r27	; 0x15
		unsigned long int SMTick2_period = SMTick2_calc/GCD;
 a24:	8a 81       	ldd	r24, Y+2	; 0x02
 a26:	9b 81       	ldd	r25, Y+3	; 0x03
 a28:	ac 81       	ldd	r26, Y+4	; 0x04
 a2a:	bd 81       	ldd	r27, Y+5	; 0x05
 a2c:	2e 85       	ldd	r18, Y+14	; 0x0e
 a2e:	3f 85       	ldd	r19, Y+15	; 0x0f
 a30:	48 89       	ldd	r20, Y+16	; 0x10
 a32:	59 89       	ldd	r21, Y+17	; 0x11
 a34:	bc 01       	movw	r22, r24
 a36:	cd 01       	movw	r24, r26
 a38:	41 d1       	rcall	.+642    	; 0xcbc <__udivmodsi4>
 a3a:	da 01       	movw	r26, r20
 a3c:	c9 01       	movw	r24, r18
 a3e:	8e 8b       	std	Y+22, r24	; 0x16
 a40:	9f 8b       	std	Y+23, r25	; 0x17
 a42:	a8 8f       	std	Y+24, r26	; 0x18
 a44:	b9 8f       	std	Y+25, r27	; 0x19
 		unsigned long int SMTick3_period = SMTick3_calc/GCD;
 a46:	8e 81       	ldd	r24, Y+6	; 0x06
 a48:	9f 81       	ldd	r25, Y+7	; 0x07
 a4a:	a8 85       	ldd	r26, Y+8	; 0x08
 a4c:	b9 85       	ldd	r27, Y+9	; 0x09
 a4e:	2e 85       	ldd	r18, Y+14	; 0x0e
 a50:	3f 85       	ldd	r19, Y+15	; 0x0f
 a52:	48 89       	ldd	r20, Y+16	; 0x10
 a54:	59 89       	ldd	r21, Y+17	; 0x11
 a56:	bc 01       	movw	r22, r24
 a58:	cd 01       	movw	r24, r26
 a5a:	30 d1       	rcall	.+608    	; 0xcbc <__udivmodsi4>
 a5c:	da 01       	movw	r26, r20
 a5e:	c9 01       	movw	r24, r18
 a60:	8a 8f       	std	Y+26, r24	; 0x1a
 a62:	9b 8f       	std	Y+27, r25	; 0x1b
 a64:	ac 8f       	std	Y+28, r26	; 0x1c
 a66:	bd 8f       	std	Y+29, r27	; 0x1d
// 		unsigned long int SMTick4_period = SMTick4_calc/GCD;
// 		unsigned long int SMTick5_period = SMTick5_calc/GCD;

		//Declare an array of tasks
		static task task1, task2, task3;//, task4, task5;
		task *tasks[] = { &task1, &task2, &task3};//, &task4, &task5 };
 a68:	86 e0       	ldi	r24, 0x06	; 6
 a6a:	e9 e0       	ldi	r30, 0x09	; 9
 a6c:	f1 e0       	ldi	r31, 0x01	; 1
 a6e:	de 01       	movw	r26, r28
 a70:	9d 96       	adiw	r26, 0x2d	; 45
 a72:	01 90       	ld	r0, Z+
 a74:	0d 92       	st	X+, r0
 a76:	8a 95       	dec	r24
 a78:	e1 f7       	brne	.-8      	; 0xa72 <main+0x1ea>
		const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
 a7a:	83 e0       	ldi	r24, 0x03	; 3
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	9f 8f       	std	Y+31, r25	; 0x1f
 a80:	8e 8f       	std	Y+30, r24	; 0x1e
		
		task1.state = init;//Task initial state.
 a82:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <task1.1959>
		task1.period = SMTick1_period;//Task Period.
 a86:	8a 89       	ldd	r24, Y+18	; 0x12
 a88:	9b 89       	ldd	r25, Y+19	; 0x13
 a8a:	ac 89       	ldd	r26, Y+20	; 0x14
 a8c:	bd 89       	ldd	r27, Y+21	; 0x15
 a8e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <task1.1959+0x1>
 a92:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <task1.1959+0x2>
 a96:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <task1.1959+0x3>
 a9a:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <task1.1959+0x4>
		task1.elapsedTime = SMTick1_period; // Task current elasped time.
 a9e:	8a 89       	ldd	r24, Y+18	; 0x12
 aa0:	9b 89       	ldd	r25, Y+19	; 0x13
 aa2:	ac 89       	ldd	r26, Y+20	; 0x14
 aa4:	bd 89       	ldd	r27, Y+21	; 0x15
 aa6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <task1.1959+0x5>
 aaa:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <task1.1959+0x6>
 aae:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <task1.1959+0x7>
 ab2:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <task1.1959+0x8>
		task1.TickFct = &SMaster; // Function pointer for the tick.
 ab6:	85 e1       	ldi	r24, 0x15	; 21
 ab8:	94 e0       	ldi	r25, 0x04	; 4
 aba:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <task1.1959+0xa>
 abe:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <task1.1959+0x9>
		
		task2.state = init_2;//Task initial state.
 ac2:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <task2.1960>
		task2.period = SMTick2_period;//Task Period.
 ac6:	8e 89       	ldd	r24, Y+22	; 0x16
 ac8:	9f 89       	ldd	r25, Y+23	; 0x17
 aca:	a8 8d       	ldd	r26, Y+24	; 0x18
 acc:	b9 8d       	ldd	r27, Y+25	; 0x19
 ace:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <task2.1960+0x1>
 ad2:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <task2.1960+0x2>
 ad6:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <task2.1960+0x3>
 ada:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <task2.1960+0x4>
		task2.elapsedTime = SMTick2_period; // Task current elasped time.
 ade:	8e 89       	ldd	r24, Y+22	; 0x16
 ae0:	9f 89       	ldd	r25, Y+23	; 0x17
 ae2:	a8 8d       	ldd	r26, Y+24	; 0x18
 ae4:	b9 8d       	ldd	r27, Y+25	; 0x19
 ae6:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <task2.1960+0x5>
 aea:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <task2.1960+0x6>
 aee:	a0 93 27 01 	sts	0x0127, r26	; 0x800127 <task2.1960+0x7>
 af2:	b0 93 28 01 	sts	0x0128, r27	; 0x800128 <task2.1960+0x8>
		task2.TickFct = &SMPattern; // Function pointer for the tick.
 af6:	83 e5       	ldi	r24, 0x53	; 83
 af8:	93 e0       	ldi	r25, 0x03	; 3
 afa:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <task2.1960+0xa>
 afe:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <task2.1960+0x9>
		
		
		task3.state = init_3;//Task initial state.
 b02:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <task3.1961>
		task3.period = SMTick3_period;//Task Period.
 b06:	8a 8d       	ldd	r24, Y+26	; 0x1a
 b08:	9b 8d       	ldd	r25, Y+27	; 0x1b
 b0a:	ac 8d       	ldd	r26, Y+28	; 0x1c
 b0c:	bd 8d       	ldd	r27, Y+29	; 0x1d
 b0e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <task3.1961+0x1>
 b12:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <task3.1961+0x2>
 b16:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <task3.1961+0x3>
 b1a:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <task3.1961+0x4>
		task3.elapsedTime = SMTick3_period; // Task current elasped time.
 b1e:	8a 8d       	ldd	r24, Y+26	; 0x1a
 b20:	9b 8d       	ldd	r25, Y+27	; 0x1b
 b22:	ac 8d       	ldd	r26, Y+28	; 0x1c
 b24:	bd 8d       	ldd	r27, Y+29	; 0x1d
 b26:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <task3.1961+0x5>
 b2a:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <task3.1961+0x6>
 b2e:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <task3.1961+0x7>
 b32:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <task3.1961+0x8>
		task3.TickFct = &SMSpd; // Function pointer for the tick.
 b36:	8a ea       	ldi	r24, 0xAA	; 170
 b38:	93 e0       	ldi	r25, 0x03	; 3
 b3a:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <task3.1961+0xa>
		
		SPI_MasterInit();
 b3e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <task3.1961+0x9>
		TimerSet(GCD);
 b42:	73 dd       	rcall	.-1306   	; 0x62a <SPI_MasterInit>
 b44:	8e 85       	ldd	r24, Y+14	; 0x0e
 b46:	9f 85       	ldd	r25, Y+15	; 0x0f
 b48:	a8 89       	ldd	r26, Y+16	; 0x10
 b4a:	b9 89       	ldd	r27, Y+17	; 0x11
 b4c:	bc 01       	movw	r22, r24
 b4e:	cd 01       	movw	r24, r26
		TimerOn();
 b50:	9b dc       	rcall	.-1738   	; 0x488 <TimerSet>
 b52:	c8 dc       	rcall	.-1648   	; 0x4e4 <TimerOn>
	
    /* Replace with your application code */
    while (1) 
    {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 b54:	19 82       	std	Y+1, r1	; 0x01
 b56:	a1 c0       	rjmp	.+322    	; 0xc9a <main+0x412>
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 b58:	89 81       	ldd	r24, Y+1	; 0x01
 b5a:	88 2f       	mov	r24, r24
 b5c:	90 e0       	ldi	r25, 0x00	; 0
 b5e:	88 0f       	add	r24, r24
 b60:	99 1f       	adc	r25, r25
 b62:	9e 01       	movw	r18, r28
 b64:	2f 5f       	subi	r18, 0xFF	; 255
 b66:	3f 4f       	sbci	r19, 0xFF	; 255
 b68:	82 0f       	add	r24, r18
 b6a:	93 1f       	adc	r25, r19
 b6c:	8c 96       	adiw	r24, 0x2c	; 44
 b6e:	fc 01       	movw	r30, r24
 b70:	80 81       	ld	r24, Z
 b72:	91 81       	ldd	r25, Z+1	; 0x01
 b74:	fc 01       	movw	r30, r24
 b76:	25 81       	ldd	r18, Z+5	; 0x05
 b78:	36 81       	ldd	r19, Z+6	; 0x06
 b7a:	47 81       	ldd	r20, Z+7	; 0x07
 b7c:	50 85       	ldd	r21, Z+8	; 0x08
 b7e:	89 81       	ldd	r24, Y+1	; 0x01
 b80:	88 2f       	mov	r24, r24
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	88 0f       	add	r24, r24
 b86:	99 1f       	adc	r25, r25
 b88:	be 01       	movw	r22, r28
 b8a:	6f 5f       	subi	r22, 0xFF	; 255
 b8c:	7f 4f       	sbci	r23, 0xFF	; 255
 b8e:	86 0f       	add	r24, r22
 b90:	97 1f       	adc	r25, r23
 b92:	8c 96       	adiw	r24, 0x2c	; 44
 b94:	fc 01       	movw	r30, r24
 b96:	80 81       	ld	r24, Z
 b98:	91 81       	ldd	r25, Z+1	; 0x01
 b9a:	fc 01       	movw	r30, r24
 b9c:	81 81       	ldd	r24, Z+1	; 0x01
 b9e:	92 81       	ldd	r25, Z+2	; 0x02
 ba0:	a3 81       	ldd	r26, Z+3	; 0x03
 ba2:	b4 81       	ldd	r27, Z+4	; 0x04
 ba4:	28 17       	cp	r18, r24
 ba6:	39 07       	cpc	r19, r25
 ba8:	4a 07       	cpc	r20, r26
 baa:	5b 07       	cpc	r21, r27
 bac:	09 f0       	breq	.+2      	; 0xbb0 <main+0x328>
 bae:	49 c0       	rjmp	.+146    	; 0xc42 <main+0x3ba>
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 bb0:	89 81       	ldd	r24, Y+1	; 0x01
 bb2:	88 2f       	mov	r24, r24
 bb4:	90 e0       	ldi	r25, 0x00	; 0
 bb6:	88 0f       	add	r24, r24
 bb8:	99 1f       	adc	r25, r25
 bba:	9e 01       	movw	r18, r28
 bbc:	2f 5f       	subi	r18, 0xFF	; 255
 bbe:	3f 4f       	sbci	r19, 0xFF	; 255
 bc0:	82 0f       	add	r24, r18
 bc2:	93 1f       	adc	r25, r19
 bc4:	8c 96       	adiw	r24, 0x2c	; 44
 bc6:	fc 01       	movw	r30, r24
 bc8:	00 81       	ld	r16, Z
 bca:	11 81       	ldd	r17, Z+1	; 0x01
 bcc:	89 81       	ldd	r24, Y+1	; 0x01
 bce:	88 2f       	mov	r24, r24
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	88 0f       	add	r24, r24
 bd4:	99 1f       	adc	r25, r25
 bd6:	9e 01       	movw	r18, r28
 bd8:	2f 5f       	subi	r18, 0xFF	; 255
 bda:	3f 4f       	sbci	r19, 0xFF	; 255
 bdc:	82 0f       	add	r24, r18
 bde:	93 1f       	adc	r25, r19
 be0:	8c 96       	adiw	r24, 0x2c	; 44
 be2:	fc 01       	movw	r30, r24
 be4:	80 81       	ld	r24, Z
 be6:	91 81       	ldd	r25, Z+1	; 0x01
 be8:	fc 01       	movw	r30, r24
 bea:	21 85       	ldd	r18, Z+9	; 0x09
 bec:	32 85       	ldd	r19, Z+10	; 0x0a
 bee:	89 81       	ldd	r24, Y+1	; 0x01
 bf0:	88 2f       	mov	r24, r24
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	88 0f       	add	r24, r24
 bf6:	99 1f       	adc	r25, r25
 bf8:	ae 01       	movw	r20, r28
 bfa:	4f 5f       	subi	r20, 0xFF	; 255
 bfc:	5f 4f       	sbci	r21, 0xFF	; 255
 bfe:	84 0f       	add	r24, r20
 c00:	95 1f       	adc	r25, r21
 c02:	8c 96       	adiw	r24, 0x2c	; 44
 c04:	fc 01       	movw	r30, r24
 c06:	80 81       	ld	r24, Z
 c08:	91 81       	ldd	r25, Z+1	; 0x01
 c0a:	fc 01       	movw	r30, r24
 c0c:	80 81       	ld	r24, Z
 c0e:	08 2e       	mov	r0, r24
 c10:	00 0c       	add	r0, r0
 c12:	99 0b       	sbc	r25, r25
 c14:	f9 01       	movw	r30, r18
 c16:	09 95       	icall
 c18:	f8 01       	movw	r30, r16
 c1a:	80 83       	st	Z, r24
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 c1c:	89 81       	ldd	r24, Y+1	; 0x01
 c1e:	88 2f       	mov	r24, r24
 c20:	90 e0       	ldi	r25, 0x00	; 0
 c22:	88 0f       	add	r24, r24
 c24:	99 1f       	adc	r25, r25
 c26:	9e 01       	movw	r18, r28
 c28:	2f 5f       	subi	r18, 0xFF	; 255
 c2a:	3f 4f       	sbci	r19, 0xFF	; 255
 c2c:	82 0f       	add	r24, r18
 c2e:	93 1f       	adc	r25, r19
 c30:	8c 96       	adiw	r24, 0x2c	; 44
 c32:	fc 01       	movw	r30, r24
 c34:	80 81       	ld	r24, Z
 c36:	91 81       	ldd	r25, Z+1	; 0x01
 c38:	fc 01       	movw	r30, r24
 c3a:	15 82       	std	Z+5, r1	; 0x05
 c3c:	16 82       	std	Z+6, r1	; 0x06
 c3e:	17 82       	std	Z+7, r1	; 0x07
 c40:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
 c42:	89 81       	ldd	r24, Y+1	; 0x01
 c44:	88 2f       	mov	r24, r24
 c46:	90 e0       	ldi	r25, 0x00	; 0
 c48:	88 0f       	add	r24, r24
 c4a:	99 1f       	adc	r25, r25
 c4c:	9e 01       	movw	r18, r28
 c4e:	2f 5f       	subi	r18, 0xFF	; 255
 c50:	3f 4f       	sbci	r19, 0xFF	; 255
 c52:	82 0f       	add	r24, r18
 c54:	93 1f       	adc	r25, r19
 c56:	8c 96       	adiw	r24, 0x2c	; 44
 c58:	fc 01       	movw	r30, r24
 c5a:	20 81       	ld	r18, Z
 c5c:	31 81       	ldd	r19, Z+1	; 0x01
 c5e:	89 81       	ldd	r24, Y+1	; 0x01
 c60:	88 2f       	mov	r24, r24
 c62:	90 e0       	ldi	r25, 0x00	; 0
 c64:	88 0f       	add	r24, r24
 c66:	99 1f       	adc	r25, r25
 c68:	ae 01       	movw	r20, r28
 c6a:	4f 5f       	subi	r20, 0xFF	; 255
 c6c:	5f 4f       	sbci	r21, 0xFF	; 255
 c6e:	84 0f       	add	r24, r20
 c70:	95 1f       	adc	r25, r21
 c72:	8c 96       	adiw	r24, 0x2c	; 44
 c74:	fc 01       	movw	r30, r24
 c76:	80 81       	ld	r24, Z
 c78:	91 81       	ldd	r25, Z+1	; 0x01
 c7a:	fc 01       	movw	r30, r24
 c7c:	85 81       	ldd	r24, Z+5	; 0x05
 c7e:	96 81       	ldd	r25, Z+6	; 0x06
 c80:	a7 81       	ldd	r26, Z+7	; 0x07
 c82:	b0 85       	ldd	r27, Z+8	; 0x08
 c84:	01 96       	adiw	r24, 0x01	; 1
 c86:	a1 1d       	adc	r26, r1
 c88:	b1 1d       	adc	r27, r1
 c8a:	f9 01       	movw	r30, r18
 c8c:	85 83       	std	Z+5, r24	; 0x05
 c8e:	96 83       	std	Z+6, r25	; 0x06
 c90:	a7 83       	std	Z+7, r26	; 0x07
 c92:	b0 87       	std	Z+8, r27	; 0x08
	
    /* Replace with your application code */
    while (1) 
    {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 c94:	89 81       	ldd	r24, Y+1	; 0x01
 c96:	8f 5f       	subi	r24, 0xFF	; 255
 c98:	89 83       	std	Y+1, r24	; 0x01
 c9a:	89 81       	ldd	r24, Y+1	; 0x01
 c9c:	28 2f       	mov	r18, r24
 c9e:	30 e0       	ldi	r19, 0x00	; 0
 ca0:	8e 8d       	ldd	r24, Y+30	; 0x1e
 ca2:	9f 8d       	ldd	r25, Y+31	; 0x1f
 ca4:	28 17       	cp	r18, r24
 ca6:	39 07       	cpc	r19, r25
 ca8:	08 f4       	brcc	.+2      	; 0xcac <main+0x424>
 caa:	56 cf       	rjmp	.-340    	; 0xb58 <main+0x2d0>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 cac:	00 00       	nop
 cae:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 cb2:	88 23       	and	r24, r24
 cb4:	e1 f3       	breq	.-8      	; 0xcae <main+0x426>
		TimerFlag = 0;
 cb6:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
    }
 cba:	4c cf       	rjmp	.-360    	; 0xb54 <main+0x2cc>

00000cbc <__udivmodsi4>:
 cbc:	a1 e2       	ldi	r26, 0x21	; 33
 cbe:	1a 2e       	mov	r1, r26
 cc0:	aa 1b       	sub	r26, r26
 cc2:	bb 1b       	sub	r27, r27
 cc4:	fd 01       	movw	r30, r26
 cc6:	0d c0       	rjmp	.+26     	; 0xce2 <__udivmodsi4_ep>

00000cc8 <__udivmodsi4_loop>:
 cc8:	aa 1f       	adc	r26, r26
 cca:	bb 1f       	adc	r27, r27
 ccc:	ee 1f       	adc	r30, r30
 cce:	ff 1f       	adc	r31, r31
 cd0:	a2 17       	cp	r26, r18
 cd2:	b3 07       	cpc	r27, r19
 cd4:	e4 07       	cpc	r30, r20
 cd6:	f5 07       	cpc	r31, r21
 cd8:	20 f0       	brcs	.+8      	; 0xce2 <__udivmodsi4_ep>
 cda:	a2 1b       	sub	r26, r18
 cdc:	b3 0b       	sbc	r27, r19
 cde:	e4 0b       	sbc	r30, r20
 ce0:	f5 0b       	sbc	r31, r21

00000ce2 <__udivmodsi4_ep>:
 ce2:	66 1f       	adc	r22, r22
 ce4:	77 1f       	adc	r23, r23
 ce6:	88 1f       	adc	r24, r24
 ce8:	99 1f       	adc	r25, r25
 cea:	1a 94       	dec	r1
 cec:	69 f7       	brne	.-38     	; 0xcc8 <__udivmodsi4_loop>
 cee:	60 95       	com	r22
 cf0:	70 95       	com	r23
 cf2:	80 95       	com	r24
 cf4:	90 95       	com	r25
 cf6:	9b 01       	movw	r18, r22
 cf8:	ac 01       	movw	r20, r24
 cfa:	bd 01       	movw	r22, r26
 cfc:	cf 01       	movw	r24, r30
 cfe:	08 95       	ret

00000d00 <_exit>:
 d00:	f8 94       	cli

00000d02 <__stop_program>:
 d02:	ff cf       	rjmp	.-2      	; 0xd02 <__stop_program>
