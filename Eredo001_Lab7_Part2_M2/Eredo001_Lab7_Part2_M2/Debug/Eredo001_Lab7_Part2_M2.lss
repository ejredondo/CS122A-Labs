
Eredo001_Lab7_Part2_M2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000008e0  00000974  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800108  00800108  0000097c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c90  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000912  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052f  00000000  00000000  00002052  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00002584  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000544  00000000  00000000  000026f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000329  00000000  00000000  00002c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002f61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0f c1       	rjmp	.+542    	; 0x26c <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ee       	ldi	r30, 0xE0	; 224
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 31       	cpi	r26, 0x19	; 25
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	1c d1       	rcall	.+568    	; 0x2fc <main>
  c4:	0b c4       	rjmp	.+2070   	; 0x8dc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
  cc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
  d8:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <_avr_timer_cntcurr>
  dc:	70 93 0a 01 	sts	0x010A, r23	; 0x80010a <_avr_timer_cntcurr+0x1>
  e0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_avr_timer_cntcurr+0x2>
  e4:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <_avr_timer_cntcurr+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 112:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 116:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 11a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_avr_timer_cntcurr>
 11e:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <_avr_timer_cntcurr+0x1>
 122:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <_avr_timer_cntcurr+0x2>
 126:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <_avr_timer_cntcurr+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 144:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_avr_timer_cntcurr>
 148:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x1>
 14c:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <_avr_timer_cntcurr+0x2>
 150:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <_avr_timer_cntcurr+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_avr_timer_cntcurr>
 15e:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <_avr_timer_cntcurr+0x1>
 162:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <_avr_timer_cntcurr+0x2>
 166:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
        _avr_timer_cntcurr = _avr_timer_M;
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 180:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 184:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 188:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_avr_timer_cntcurr>
 18c:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <_avr_timer_cntcurr+0x1>
 190:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <_avr_timer_cntcurr+0x2>
 194:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <_avr_timer_cntcurr+0x3>
    }
}
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <delay_ms>:

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
 1aa:	18 16       	cp	r1, r24
 1ac:	19 06       	cpc	r1, r25
 1ae:	5c f0       	brlt	.+22     	; 0x1c6 <delay_ms+0x1c>
 1b0:	08 95       	ret
		for(j=0;j<775;j++) {
			asm("nop");
 1b2:	00 00       	nop
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	31 09       	sbc	r19, r1
/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
		for(j=0;j<775;j++) {
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <delay_ms+0x8>

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
 1ba:	4f 5f       	subi	r20, 0xFF	; 255
 1bc:	5f 4f       	sbci	r21, 0xFF	; 255
 1be:	84 17       	cp	r24, r20
 1c0:	95 07       	cpc	r25, r21
 1c2:	19 f4       	brne	.+6      	; 0x1ca <delay_ms+0x20>
 1c4:	08 95       	ret
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	50 e0       	ldi	r21, 0x00	; 0
#define RS 0				// pin number of uC connected to pin 4 of LCD disp.
#define E 1					// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
 1ca:	27 e0       	ldi	r18, 0x07	; 7
 1cc:	33 e0       	ldi	r19, 0x03	; 3
 1ce:	f1 cf       	rjmp	.-30     	; 0x1b2 <delay_ms+0x8>

000001d0 <LCD_WriteCommand>:
}

/*-------------------------------------------------------------------------*/

void LCD_WriteCommand (unsigned char Command) {
	CLR_BIT(CONTROL_BUS,RS);
 1d0:	10 98       	cbi	0x02, 0	; 2
	DATA_BUS = Command;
 1d2:	88 b9       	out	0x08, r24	; 8
	SET_BIT(CONTROL_BUS,E);
 1d4:	11 9a       	sbi	0x02, 1	; 2
	asm("nop");
 1d6:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 1d8:	11 98       	cbi	0x02, 1	; 2
	delay_ms(2); // ClearScreen requires 1.52ms to execute
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	e5 cf       	rjmp	.-54     	; 0x1aa <delay_ms>
 1e0:	08 95       	ret

000001e2 <LCD_ClearScreen>:
}

void LCD_ClearScreen(void) {
	LCD_WriteCommand(0x01);
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	f5 cf       	rjmp	.-22     	; 0x1d0 <LCD_WriteCommand>
 1e6:	08 95       	ret

000001e8 <LCD_init>:
}

void LCD_init(void) {
	delay_ms(100); //wait for 100 ms for LCD to power up
 1e8:	84 e6       	ldi	r24, 0x64	; 100
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	de df       	rcall	.-68     	; 0x1aa <delay_ms>
	LCD_WriteCommand(0x38);
 1ee:	88 e3       	ldi	r24, 0x38	; 56
 1f0:	ef df       	rcall	.-34     	; 0x1d0 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 1f2:	86 e0       	ldi	r24, 0x06	; 6
 1f4:	ed df       	rcall	.-38     	; 0x1d0 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 1f6:	8f e0       	ldi	r24, 0x0F	; 15
 1f8:	eb df       	rcall	.-42     	; 0x1d0 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	e9 df       	rcall	.-46     	; 0x1d0 <LCD_WriteCommand>
	delay_ms(10);						 
 1fe:	8a e0       	ldi	r24, 0x0A	; 10
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	d3 cf       	rjmp	.-90     	; 0x1aa <delay_ms>
 204:	08 95       	ret

00000206 <LCD_WriteData>:
 206:	10 9a       	sbi	0x02, 0	; 2
}

void LCD_WriteData(unsigned char Data) {
	SET_BIT(CONTROL_BUS,RS);
	DATA_BUS = Data;
 208:	88 b9       	out	0x08, r24	; 8
	SET_BIT(CONTROL_BUS,E);
 20a:	11 9a       	sbi	0x02, 1	; 2
	asm("nop");
 20c:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 20e:	11 98       	cbi	0x02, 1	; 2
	delay_ms(1);
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	ca cf       	rjmp	.-108    	; 0x1aa <delay_ms>
 216:	08 95       	ret

00000218 <LCD_Cursor>:
}

void LCD_Cursor(unsigned char column) {
	if ( column < 17 ) { // 16x2 LCD: column < 17; 16x1 LCD: column < 9
 218:	81 31       	cpi	r24, 0x11	; 17
 21a:	18 f4       	brcc	.+6      	; 0x222 <LCD_Cursor+0xa>
		LCD_WriteCommand(0x80 + column - 1);
 21c:	81 58       	subi	r24, 0x81	; 129
 21e:	d8 cf       	rjmp	.-80     	; 0x1d0 <LCD_WriteCommand>
 220:	08 95       	ret
		} else { // 6x2 LCD: column - 9; 16x1 LCD: column - 1
		LCD_WriteCommand(0xB8 + column - 9);
 222:	81 55       	subi	r24, 0x51	; 81
 224:	d5 cf       	rjmp	.-86     	; 0x1d0 <LCD_WriteCommand>
 226:	08 95       	ret

00000228 <LCD_DisplayString>:
	}
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	18 2f       	mov	r17, r24
 232:	eb 01       	movw	r28, r22
	LCD_ClearScreen();
 234:	d6 df       	rcall	.-84     	; 0x1e2 <LCD_ClearScreen>
	unsigned char c = column;
	while(*string) {
 236:	88 81       	ld	r24, Y
 238:	88 23       	and	r24, r24
 23a:	51 f0       	breq	.+20     	; 0x250 <LCD_DisplayString+0x28>
		LCD_Cursor(c++);
 23c:	01 e0       	ldi	r16, 0x01	; 1
 23e:	01 0f       	add	r16, r17
 240:	81 2f       	mov	r24, r17
 242:	ea df       	rcall	.-44     	; 0x218 <LCD_Cursor>
		LCD_WriteData(*string++);
 244:	89 91       	ld	r24, Y+
 246:	df df       	rcall	.-66     	; 0x206 <LCD_WriteData>
 248:	10 2f       	mov	r17, r16

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
 24a:	88 81       	ld	r24, Y
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
 24c:	81 11       	cpse	r24, r1
 24e:	f6 cf       	rjmp	.-20     	; 0x23c <LCD_DisplayString+0x14>
 250:	df 91       	pop	r29
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	08 95       	ret

0000025a <SPI_SlaveInit>:
 25a:	80 e4       	ldi	r24, 0x40	; 64

unsigned char receivedData = 0;
void SPI_SlaveInit(void)
{
	/* Set MISO output, all others input */
	DDRB = 0x40; PORTB = 0xBF;
 25c:	84 b9       	out	0x04, r24	; 4
 25e:	8f eb       	ldi	r24, 0xBF	; 191
 260:	85 b9       	out	0x05, r24	; 5
	/* Enable SPI */
	SPCR |= (1<<SPE)|(1<<SPIE);
 262:	8c b5       	in	r24, 0x2c	; 44
 264:	80 6c       	ori	r24, 0xC0	; 192
 266:	8c bd       	out	0x2c, r24	; 44
	sei();
 268:	78 94       	sei
 26a:	08 95       	ret

0000026c <__vector_19>:
}

ISR(SPI_STC_vect)
{
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
 276:	8f 93       	push	r24
	///* Wait for reception complete */
	//while(!(SPSR & (1<<SPIF)))
	//;
	///* Return Data Register */
	//return SPDR;
	receivedData = SPDR;
 278:	8e b5       	in	r24, 0x2e	; 46
 27a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
}
 27e:	8f 91       	pop	r24
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <ServantSM>:

unsigned char RecData[10];
enum Servant1_State{init, receive, display} state;

void ServantSM() {
	switch(state) {
 28a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <state>
 28e:	81 30       	cpi	r24, 0x01	; 1
 290:	41 f0       	breq	.+16     	; 0x2a2 <ServantSM+0x18>
 292:	18 f0       	brcs	.+6      	; 0x29a <ServantSM+0x10>
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	79 f0       	breq	.+30     	; 0x2b6 <ServantSM+0x2c>
 298:	12 c0       	rjmp	.+36     	; 0x2be <ServantSM+0x34>
		case init:
		state = receive;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <state>
		break;
 2a0:	13 c0       	rjmp	.+38     	; 0x2c8 <ServantSM+0x3e>
		
		case receive:
		if(receivedData == 0x20 || receivedData == 0x40) {
 2a2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 2a6:	80 32       	cpi	r24, 0x20	; 32
 2a8:	11 f0       	breq	.+4      	; 0x2ae <ServantSM+0x24>
 2aa:	80 34       	cpi	r24, 0x40	; 64
 2ac:	69 f4       	brne	.+26     	; 0x2c8 <ServantSM+0x3e>
			state = display;
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <state>
 2b4:	1d c0       	rjmp	.+58     	; 0x2f0 <ServantSM+0x66>
			state = receive;
		}
		break;
		
		case display:
		state = receive;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <state>
		break;
 2bc:	05 c0       	rjmp	.+10     	; 0x2c8 <ServantSM+0x3e>
	}
	
	switch(state) {
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	19 f0       	breq	.+6      	; 0x2c8 <ServantSM+0x3e>
 2c2:	82 30       	cpi	r24, 0x02	; 2
 2c4:	d1 f4       	brne	.+52     	; 0x2fa <ServantSM+0x70>
 2c6:	14 c0       	rjmp	.+40     	; 0x2f0 <ServantSM+0x66>
		case init:
		break;
		
		case receive:
		sprintf(RecData, "%d", receivedData);
 2c8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 2cc:	1f 92       	push	r1
 2ce:	8f 93       	push	r24
 2d0:	84 e0       	ldi	r24, 0x04	; 4
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	9f 93       	push	r25
 2d6:	8f 93       	push	r24
 2d8:	8e e0       	ldi	r24, 0x0E	; 14
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	9f 93       	push	r25
 2de:	8f 93       	push	r24
 2e0:	22 d0       	rcall	.+68     	; 0x326 <sprintf>
		break;
 2e2:	0f 90       	pop	r0
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
 2ec:	0f 90       	pop	r0
		
		case display:
		LCD_ClearScreen();
 2ee:	08 95       	ret
 2f0:	78 df       	rcall	.-272    	; 0x1e2 <LCD_ClearScreen>
		LCD_DisplayString(1, RecData);
 2f2:	6e e0       	ldi	r22, 0x0E	; 14
 2f4:	71 e0       	ldi	r23, 0x01	; 1
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	97 cf       	rjmp	.-210    	; 0x228 <LCD_DisplayString>
 2fa:	08 95       	ret

000002fc <main>:
}


int main(void)
{
	DDRA = 0xFF; PORTA = 0x00;
 2fc:	8f ef       	ldi	r24, 0xFF	; 255
 2fe:	81 b9       	out	0x01, r24	; 1
 300:	12 b8       	out	0x02, r1	; 2
	DDRC = 0xFF; PORTC = 0x00;
 302:	87 b9       	out	0x07, r24	; 7
 304:	18 b8       	out	0x08, r1	; 8
	
	LCD_init();
 306:	70 df       	rcall	.-288    	; 0x1e8 <LCD_init>
	SPI_SlaveInit();
 308:	a8 df       	rcall	.-176    	; 0x25a <SPI_SlaveInit>
	TimerOn();
 30a:	ef de       	rcall	.-546    	; 0xea <TimerOn>
 30c:	64 e6       	ldi	r22, 0x64	; 100
	TimerSet(100);
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	d9 de       	rcall	.-590    	; 0xc8 <TimerSet>
	/* Replace with your application code */
	while (1)
	{
		ServantSM();
 316:	b9 df       	rcall	.-142    	; 0x28a <ServantSM>
 318:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <TimerFlag>
		while(!TimerFlag);
 31c:	88 23       	and	r24, r24
 31e:	e1 f3       	breq	.-8      	; 0x318 <main+0x1c>
 320:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <TimerFlag>
		TimerFlag = 0;
 324:	f8 cf       	rjmp	.-16     	; 0x316 <main+0x1a>

00000326 <sprintf>:
	}
 326:	0f 93       	push	r16
 328:	1f 93       	push	r17
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	cd b7       	in	r28, 0x3d	; 61
 330:	de b7       	in	r29, 0x3e	; 62
 332:	2e 97       	sbiw	r28, 0x0e	; 14
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	f8 94       	cli
 338:	de bf       	out	0x3e, r29	; 62
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	cd bf       	out	0x3d, r28	; 61
 33e:	0d 89       	ldd	r16, Y+21	; 0x15
 340:	1e 89       	ldd	r17, Y+22	; 0x16
 342:	86 e0       	ldi	r24, 0x06	; 6
 344:	8c 83       	std	Y+4, r24	; 0x04
 346:	1a 83       	std	Y+2, r17	; 0x02
 348:	09 83       	std	Y+1, r16	; 0x01
 34a:	8f ef       	ldi	r24, 0xFF	; 255
 34c:	9f e7       	ldi	r25, 0x7F	; 127
 34e:	9e 83       	std	Y+6, r25	; 0x06
 350:	8d 83       	std	Y+5, r24	; 0x05
 352:	ae 01       	movw	r20, r28
 354:	47 5e       	subi	r20, 0xE7	; 231
 356:	5f 4f       	sbci	r21, 0xFF	; 255
 358:	6f 89       	ldd	r22, Y+23	; 0x17
 35a:	78 8d       	ldd	r23, Y+24	; 0x18
 35c:	ce 01       	movw	r24, r28
 35e:	01 96       	adiw	r24, 0x01	; 1
 360:	10 d0       	rcall	.+32     	; 0x382 <vfprintf>
 362:	ef 81       	ldd	r30, Y+7	; 0x07
 364:	f8 85       	ldd	r31, Y+8	; 0x08
 366:	e0 0f       	add	r30, r16
 368:	f1 1f       	adc	r31, r17
 36a:	10 82       	st	Z, r1
 36c:	2e 96       	adiw	r28, 0x0e	; 14
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	f8 94       	cli
 372:	de bf       	out	0x3e, r29	; 62
 374:	0f be       	out	0x3f, r0	; 63
 376:	cd bf       	out	0x3d, r28	; 61
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	1f 91       	pop	r17
 37e:	0f 91       	pop	r16
 380:	08 95       	ret

00000382 <vfprintf>:
 382:	2f 92       	push	r2
 384:	3f 92       	push	r3
 386:	4f 92       	push	r4
 388:	5f 92       	push	r5
 38a:	6f 92       	push	r6
 38c:	7f 92       	push	r7
 38e:	8f 92       	push	r8
 390:	9f 92       	push	r9
 392:	af 92       	push	r10
 394:	bf 92       	push	r11
 396:	cf 92       	push	r12
 398:	df 92       	push	r13
 39a:	ef 92       	push	r14
 39c:	ff 92       	push	r15
 39e:	0f 93       	push	r16
 3a0:	1f 93       	push	r17
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	cd b7       	in	r28, 0x3d	; 61
 3a8:	de b7       	in	r29, 0x3e	; 62
 3aa:	2b 97       	sbiw	r28, 0x0b	; 11
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	f8 94       	cli
 3b0:	de bf       	out	0x3e, r29	; 62
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	cd bf       	out	0x3d, r28	; 61
 3b6:	6c 01       	movw	r12, r24
 3b8:	7b 01       	movw	r14, r22
 3ba:	8a 01       	movw	r16, r20
 3bc:	fc 01       	movw	r30, r24
 3be:	17 82       	std	Z+7, r1	; 0x07
 3c0:	16 82       	std	Z+6, r1	; 0x06
 3c2:	83 81       	ldd	r24, Z+3	; 0x03
 3c4:	81 ff       	sbrs	r24, 1
 3c6:	bf c1       	rjmp	.+894    	; 0x746 <__LOCK_REGION_LENGTH__+0x346>
 3c8:	ce 01       	movw	r24, r28
 3ca:	01 96       	adiw	r24, 0x01	; 1
 3cc:	3c 01       	movw	r6, r24
 3ce:	f6 01       	movw	r30, r12
 3d0:	93 81       	ldd	r25, Z+3	; 0x03
 3d2:	f7 01       	movw	r30, r14
 3d4:	93 fd       	sbrc	r25, 3
 3d6:	85 91       	lpm	r24, Z+
 3d8:	93 ff       	sbrs	r25, 3
 3da:	81 91       	ld	r24, Z+
 3dc:	7f 01       	movw	r14, r30
 3de:	88 23       	and	r24, r24
 3e0:	09 f4       	brne	.+2      	; 0x3e4 <vfprintf+0x62>
 3e2:	ad c1       	rjmp	.+858    	; 0x73e <__LOCK_REGION_LENGTH__+0x33e>
 3e4:	85 32       	cpi	r24, 0x25	; 37
 3e6:	39 f4       	brne	.+14     	; 0x3f6 <vfprintf+0x74>
 3e8:	93 fd       	sbrc	r25, 3
 3ea:	85 91       	lpm	r24, Z+
 3ec:	93 ff       	sbrs	r25, 3
 3ee:	81 91       	ld	r24, Z+
 3f0:	7f 01       	movw	r14, r30
 3f2:	85 32       	cpi	r24, 0x25	; 37
 3f4:	21 f4       	brne	.+8      	; 0x3fe <vfprintf+0x7c>
 3f6:	b6 01       	movw	r22, r12
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	d6 d1       	rcall	.+940    	; 0x7a8 <fputc>
 3fc:	e8 cf       	rjmp	.-48     	; 0x3ce <vfprintf+0x4c>
 3fe:	91 2c       	mov	r9, r1
 400:	21 2c       	mov	r2, r1
 402:	31 2c       	mov	r3, r1
 404:	ff e1       	ldi	r31, 0x1F	; 31
 406:	f3 15       	cp	r31, r3
 408:	d8 f0       	brcs	.+54     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 40a:	8b 32       	cpi	r24, 0x2B	; 43
 40c:	79 f0       	breq	.+30     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 40e:	38 f4       	brcc	.+14     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 410:	80 32       	cpi	r24, 0x20	; 32
 412:	79 f0       	breq	.+30     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 414:	83 32       	cpi	r24, 0x23	; 35
 416:	a1 f4       	brne	.+40     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 418:	23 2d       	mov	r18, r3
 41a:	20 61       	ori	r18, 0x10	; 16
 41c:	1d c0       	rjmp	.+58     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 41e:	8d 32       	cpi	r24, 0x2D	; 45
 420:	61 f0       	breq	.+24     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 422:	80 33       	cpi	r24, 0x30	; 48
 424:	69 f4       	brne	.+26     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 426:	23 2d       	mov	r18, r3
 428:	21 60       	ori	r18, 0x01	; 1
 42a:	16 c0       	rjmp	.+44     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 42c:	83 2d       	mov	r24, r3
 42e:	82 60       	ori	r24, 0x02	; 2
 430:	38 2e       	mov	r3, r24
 432:	e3 2d       	mov	r30, r3
 434:	e4 60       	ori	r30, 0x04	; 4
 436:	3e 2e       	mov	r3, r30
 438:	2a c0       	rjmp	.+84     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 43a:	f3 2d       	mov	r31, r3
 43c:	f8 60       	ori	r31, 0x08	; 8
 43e:	1d c0       	rjmp	.+58     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 440:	37 fc       	sbrc	r3, 7
 442:	2d c0       	rjmp	.+90     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 444:	20 ed       	ldi	r18, 0xD0	; 208
 446:	28 0f       	add	r18, r24
 448:	2a 30       	cpi	r18, 0x0A	; 10
 44a:	40 f0       	brcs	.+16     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 44c:	8e 32       	cpi	r24, 0x2E	; 46
 44e:	b9 f4       	brne	.+46     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 450:	36 fc       	sbrc	r3, 6
 452:	75 c1       	rjmp	.+746    	; 0x73e <__LOCK_REGION_LENGTH__+0x33e>
 454:	23 2d       	mov	r18, r3
 456:	20 64       	ori	r18, 0x40	; 64
 458:	32 2e       	mov	r3, r18
 45a:	19 c0       	rjmp	.+50     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 45c:	36 fe       	sbrs	r3, 6
 45e:	06 c0       	rjmp	.+12     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 460:	8a e0       	ldi	r24, 0x0A	; 10
 462:	98 9e       	mul	r9, r24
 464:	20 0d       	add	r18, r0
 466:	11 24       	eor	r1, r1
 468:	92 2e       	mov	r9, r18
 46a:	11 c0       	rjmp	.+34     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 46c:	ea e0       	ldi	r30, 0x0A	; 10
 46e:	2e 9e       	mul	r2, r30
 470:	20 0d       	add	r18, r0
 472:	11 24       	eor	r1, r1
 474:	22 2e       	mov	r2, r18
 476:	f3 2d       	mov	r31, r3
 478:	f0 62       	ori	r31, 0x20	; 32
 47a:	3f 2e       	mov	r3, r31
 47c:	08 c0       	rjmp	.+16     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 47e:	8c 36       	cpi	r24, 0x6C	; 108
 480:	21 f4       	brne	.+8      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 482:	83 2d       	mov	r24, r3
 484:	80 68       	ori	r24, 0x80	; 128
 486:	38 2e       	mov	r3, r24
 488:	02 c0       	rjmp	.+4      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 48a:	88 36       	cpi	r24, 0x68	; 104
 48c:	41 f4       	brne	.+16     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 48e:	f7 01       	movw	r30, r14
 490:	93 fd       	sbrc	r25, 3
 492:	85 91       	lpm	r24, Z+
 494:	93 ff       	sbrs	r25, 3
 496:	81 91       	ld	r24, Z+
 498:	7f 01       	movw	r14, r30
 49a:	81 11       	cpse	r24, r1
 49c:	b3 cf       	rjmp	.-154    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 49e:	98 2f       	mov	r25, r24
 4a0:	9f 7d       	andi	r25, 0xDF	; 223
 4a2:	95 54       	subi	r25, 0x45	; 69
 4a4:	93 30       	cpi	r25, 0x03	; 3
 4a6:	28 f4       	brcc	.+10     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4a8:	0c 5f       	subi	r16, 0xFC	; 252
 4aa:	1f 4f       	sbci	r17, 0xFF	; 255
 4ac:	9f e3       	ldi	r25, 0x3F	; 63
 4ae:	99 83       	std	Y+1, r25	; 0x01
 4b0:	0d c0       	rjmp	.+26     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4b2:	83 36       	cpi	r24, 0x63	; 99
 4b4:	31 f0       	breq	.+12     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4b6:	83 37       	cpi	r24, 0x73	; 115
 4b8:	71 f0       	breq	.+28     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4ba:	83 35       	cpi	r24, 0x53	; 83
 4bc:	09 f0       	breq	.+2      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4be:	55 c0       	rjmp	.+170    	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 4c0:	20 c0       	rjmp	.+64     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 4c2:	f8 01       	movw	r30, r16
 4c4:	80 81       	ld	r24, Z
 4c6:	89 83       	std	Y+1, r24	; 0x01
 4c8:	0e 5f       	subi	r16, 0xFE	; 254
 4ca:	1f 4f       	sbci	r17, 0xFF	; 255
 4cc:	88 24       	eor	r8, r8
 4ce:	83 94       	inc	r8
 4d0:	91 2c       	mov	r9, r1
 4d2:	53 01       	movw	r10, r6
 4d4:	12 c0       	rjmp	.+36     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4d6:	28 01       	movw	r4, r16
 4d8:	f2 e0       	ldi	r31, 0x02	; 2
 4da:	4f 0e       	add	r4, r31
 4dc:	51 1c       	adc	r5, r1
 4de:	f8 01       	movw	r30, r16
 4e0:	a0 80       	ld	r10, Z
 4e2:	b1 80       	ldd	r11, Z+1	; 0x01
 4e4:	36 fe       	sbrs	r3, 6
 4e6:	03 c0       	rjmp	.+6      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4e8:	69 2d       	mov	r22, r9
 4ea:	70 e0       	ldi	r23, 0x00	; 0
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4ee:	6f ef       	ldi	r22, 0xFF	; 255
 4f0:	7f ef       	ldi	r23, 0xFF	; 255
 4f2:	c5 01       	movw	r24, r10
 4f4:	4e d1       	rcall	.+668    	; 0x792 <strnlen>
 4f6:	4c 01       	movw	r8, r24
 4f8:	82 01       	movw	r16, r4
 4fa:	f3 2d       	mov	r31, r3
 4fc:	ff 77       	andi	r31, 0x7F	; 127
 4fe:	3f 2e       	mov	r3, r31
 500:	15 c0       	rjmp	.+42     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 502:	28 01       	movw	r4, r16
 504:	22 e0       	ldi	r18, 0x02	; 2
 506:	42 0e       	add	r4, r18
 508:	51 1c       	adc	r5, r1
 50a:	f8 01       	movw	r30, r16
 50c:	a0 80       	ld	r10, Z
 50e:	b1 80       	ldd	r11, Z+1	; 0x01
 510:	36 fe       	sbrs	r3, 6
 512:	03 c0       	rjmp	.+6      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 514:	69 2d       	mov	r22, r9
 516:	70 e0       	ldi	r23, 0x00	; 0
 518:	02 c0       	rjmp	.+4      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 51a:	6f ef       	ldi	r22, 0xFF	; 255
 51c:	7f ef       	ldi	r23, 0xFF	; 255
 51e:	c5 01       	movw	r24, r10
 520:	2d d1       	rcall	.+602    	; 0x77c <strnlen_P>
 522:	4c 01       	movw	r8, r24
 524:	f3 2d       	mov	r31, r3
 526:	f0 68       	ori	r31, 0x80	; 128
 528:	3f 2e       	mov	r3, r31
 52a:	82 01       	movw	r16, r4
 52c:	33 fc       	sbrc	r3, 3
 52e:	19 c0       	rjmp	.+50     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 530:	82 2d       	mov	r24, r2
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	88 16       	cp	r8, r24
 536:	99 06       	cpc	r9, r25
 538:	a0 f4       	brcc	.+40     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 53a:	b6 01       	movw	r22, r12
 53c:	80 e2       	ldi	r24, 0x20	; 32
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	33 d1       	rcall	.+614    	; 0x7a8 <fputc>
 542:	2a 94       	dec	r2
 544:	f5 cf       	rjmp	.-22     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 546:	f5 01       	movw	r30, r10
 548:	37 fc       	sbrc	r3, 7
 54a:	85 91       	lpm	r24, Z+
 54c:	37 fe       	sbrs	r3, 7
 54e:	81 91       	ld	r24, Z+
 550:	5f 01       	movw	r10, r30
 552:	b6 01       	movw	r22, r12
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	28 d1       	rcall	.+592    	; 0x7a8 <fputc>
 558:	21 10       	cpse	r2, r1
 55a:	2a 94       	dec	r2
 55c:	21 e0       	ldi	r18, 0x01	; 1
 55e:	82 1a       	sub	r8, r18
 560:	91 08       	sbc	r9, r1
 562:	81 14       	cp	r8, r1
 564:	91 04       	cpc	r9, r1
 566:	79 f7       	brne	.-34     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 568:	e1 c0       	rjmp	.+450    	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
 56a:	84 36       	cpi	r24, 0x64	; 100
 56c:	11 f0       	breq	.+4      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
 56e:	89 36       	cpi	r24, 0x69	; 105
 570:	39 f5       	brne	.+78     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 572:	f8 01       	movw	r30, r16
 574:	37 fe       	sbrs	r3, 7
 576:	07 c0       	rjmp	.+14     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
 578:	60 81       	ld	r22, Z
 57a:	71 81       	ldd	r23, Z+1	; 0x01
 57c:	82 81       	ldd	r24, Z+2	; 0x02
 57e:	93 81       	ldd	r25, Z+3	; 0x03
 580:	0c 5f       	subi	r16, 0xFC	; 252
 582:	1f 4f       	sbci	r17, 0xFF	; 255
 584:	08 c0       	rjmp	.+16     	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 586:	60 81       	ld	r22, Z
 588:	71 81       	ldd	r23, Z+1	; 0x01
 58a:	07 2e       	mov	r0, r23
 58c:	00 0c       	add	r0, r0
 58e:	88 0b       	sbc	r24, r24
 590:	99 0b       	sbc	r25, r25
 592:	0e 5f       	subi	r16, 0xFE	; 254
 594:	1f 4f       	sbci	r17, 0xFF	; 255
 596:	f3 2d       	mov	r31, r3
 598:	ff 76       	andi	r31, 0x6F	; 111
 59a:	3f 2e       	mov	r3, r31
 59c:	97 ff       	sbrs	r25, 7
 59e:	09 c0       	rjmp	.+18     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 5a0:	90 95       	com	r25
 5a2:	80 95       	com	r24
 5a4:	70 95       	com	r23
 5a6:	61 95       	neg	r22
 5a8:	7f 4f       	sbci	r23, 0xFF	; 255
 5aa:	8f 4f       	sbci	r24, 0xFF	; 255
 5ac:	9f 4f       	sbci	r25, 0xFF	; 255
 5ae:	f0 68       	ori	r31, 0x80	; 128
 5b0:	3f 2e       	mov	r3, r31
 5b2:	2a e0       	ldi	r18, 0x0A	; 10
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	a3 01       	movw	r20, r6
 5b8:	33 d1       	rcall	.+614    	; 0x820 <__ultoa_invert>
 5ba:	88 2e       	mov	r8, r24
 5bc:	86 18       	sub	r8, r6
 5be:	44 c0       	rjmp	.+136    	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
 5c0:	85 37       	cpi	r24, 0x75	; 117
 5c2:	31 f4       	brne	.+12     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 5c4:	23 2d       	mov	r18, r3
 5c6:	2f 7e       	andi	r18, 0xEF	; 239
 5c8:	b2 2e       	mov	r11, r18
 5ca:	2a e0       	ldi	r18, 0x0A	; 10
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	25 c0       	rjmp	.+74     	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
 5d0:	93 2d       	mov	r25, r3
 5d2:	99 7f       	andi	r25, 0xF9	; 249
 5d4:	b9 2e       	mov	r11, r25
 5d6:	8f 36       	cpi	r24, 0x6F	; 111
 5d8:	c1 f0       	breq	.+48     	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
 5da:	18 f4       	brcc	.+6      	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
 5dc:	88 35       	cpi	r24, 0x58	; 88
 5de:	79 f0       	breq	.+30     	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
 5e0:	ae c0       	rjmp	.+348    	; 0x73e <__LOCK_REGION_LENGTH__+0x33e>
 5e2:	80 37       	cpi	r24, 0x70	; 112
 5e4:	19 f0       	breq	.+6      	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 5e6:	88 37       	cpi	r24, 0x78	; 120
 5e8:	21 f0       	breq	.+8      	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
 5ea:	a9 c0       	rjmp	.+338    	; 0x73e <__LOCK_REGION_LENGTH__+0x33e>
 5ec:	e9 2f       	mov	r30, r25
 5ee:	e0 61       	ori	r30, 0x10	; 16
 5f0:	be 2e       	mov	r11, r30
 5f2:	b4 fe       	sbrs	r11, 4
 5f4:	0d c0       	rjmp	.+26     	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 5f6:	fb 2d       	mov	r31, r11
 5f8:	f4 60       	ori	r31, 0x04	; 4
 5fa:	bf 2e       	mov	r11, r31
 5fc:	09 c0       	rjmp	.+18     	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 5fe:	34 fe       	sbrs	r3, 4
 600:	0a c0       	rjmp	.+20     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 602:	29 2f       	mov	r18, r25
 604:	26 60       	ori	r18, 0x06	; 6
 606:	b2 2e       	mov	r11, r18
 608:	06 c0       	rjmp	.+12     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 60a:	28 e0       	ldi	r18, 0x08	; 8
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	05 c0       	rjmp	.+10     	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
 610:	20 e1       	ldi	r18, 0x10	; 16
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	02 c0       	rjmp	.+4      	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
 616:	20 e1       	ldi	r18, 0x10	; 16
 618:	32 e0       	ldi	r19, 0x02	; 2
 61a:	f8 01       	movw	r30, r16
 61c:	b7 fe       	sbrs	r11, 7
 61e:	07 c0       	rjmp	.+14     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 620:	60 81       	ld	r22, Z
 622:	71 81       	ldd	r23, Z+1	; 0x01
 624:	82 81       	ldd	r24, Z+2	; 0x02
 626:	93 81       	ldd	r25, Z+3	; 0x03
 628:	0c 5f       	subi	r16, 0xFC	; 252
 62a:	1f 4f       	sbci	r17, 0xFF	; 255
 62c:	06 c0       	rjmp	.+12     	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
 62e:	60 81       	ld	r22, Z
 630:	71 81       	ldd	r23, Z+1	; 0x01
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	0e 5f       	subi	r16, 0xFE	; 254
 638:	1f 4f       	sbci	r17, 0xFF	; 255
 63a:	a3 01       	movw	r20, r6
 63c:	f1 d0       	rcall	.+482    	; 0x820 <__ultoa_invert>
 63e:	88 2e       	mov	r8, r24
 640:	86 18       	sub	r8, r6
 642:	fb 2d       	mov	r31, r11
 644:	ff 77       	andi	r31, 0x7F	; 127
 646:	3f 2e       	mov	r3, r31
 648:	36 fe       	sbrs	r3, 6
 64a:	0d c0       	rjmp	.+26     	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
 64c:	23 2d       	mov	r18, r3
 64e:	2e 7f       	andi	r18, 0xFE	; 254
 650:	a2 2e       	mov	r10, r18
 652:	89 14       	cp	r8, r9
 654:	58 f4       	brcc	.+22     	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 656:	34 fe       	sbrs	r3, 4
 658:	0b c0       	rjmp	.+22     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 65a:	32 fc       	sbrc	r3, 2
 65c:	09 c0       	rjmp	.+18     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 65e:	83 2d       	mov	r24, r3
 660:	8e 7e       	andi	r24, 0xEE	; 238
 662:	a8 2e       	mov	r10, r24
 664:	05 c0       	rjmp	.+10     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 666:	b8 2c       	mov	r11, r8
 668:	a3 2c       	mov	r10, r3
 66a:	03 c0       	rjmp	.+6      	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
 66c:	b8 2c       	mov	r11, r8
 66e:	01 c0       	rjmp	.+2      	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
 670:	b9 2c       	mov	r11, r9
 672:	a4 fe       	sbrs	r10, 4
 674:	0f c0       	rjmp	.+30     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
 676:	fe 01       	movw	r30, r28
 678:	e8 0d       	add	r30, r8
 67a:	f1 1d       	adc	r31, r1
 67c:	80 81       	ld	r24, Z
 67e:	80 33       	cpi	r24, 0x30	; 48
 680:	21 f4       	brne	.+8      	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
 682:	9a 2d       	mov	r25, r10
 684:	99 7e       	andi	r25, 0xE9	; 233
 686:	a9 2e       	mov	r10, r25
 688:	09 c0       	rjmp	.+18     	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
 68a:	a2 fe       	sbrs	r10, 2
 68c:	06 c0       	rjmp	.+12     	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
 68e:	b3 94       	inc	r11
 690:	b3 94       	inc	r11
 692:	04 c0       	rjmp	.+8      	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
 694:	8a 2d       	mov	r24, r10
 696:	86 78       	andi	r24, 0x86	; 134
 698:	09 f0       	breq	.+2      	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
 69a:	b3 94       	inc	r11
 69c:	a3 fc       	sbrc	r10, 3
 69e:	10 c0       	rjmp	.+32     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
 6a0:	a0 fe       	sbrs	r10, 0
 6a2:	06 c0       	rjmp	.+12     	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
 6a4:	b2 14       	cp	r11, r2
 6a6:	80 f4       	brcc	.+32     	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
 6a8:	28 0c       	add	r2, r8
 6aa:	92 2c       	mov	r9, r2
 6ac:	9b 18       	sub	r9, r11
 6ae:	0d c0       	rjmp	.+26     	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
 6b0:	b2 14       	cp	r11, r2
 6b2:	58 f4       	brcc	.+22     	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
 6b4:	b6 01       	movw	r22, r12
 6b6:	80 e2       	ldi	r24, 0x20	; 32
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	76 d0       	rcall	.+236    	; 0x7a8 <fputc>
 6bc:	b3 94       	inc	r11
 6be:	f8 cf       	rjmp	.-16     	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
 6c0:	b2 14       	cp	r11, r2
 6c2:	18 f4       	brcc	.+6      	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
 6c4:	2b 18       	sub	r2, r11
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
 6c8:	98 2c       	mov	r9, r8
 6ca:	21 2c       	mov	r2, r1
 6cc:	a4 fe       	sbrs	r10, 4
 6ce:	0f c0       	rjmp	.+30     	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
 6d0:	b6 01       	movw	r22, r12
 6d2:	80 e3       	ldi	r24, 0x30	; 48
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	68 d0       	rcall	.+208    	; 0x7a8 <fputc>
 6d8:	a2 fe       	sbrs	r10, 2
 6da:	16 c0       	rjmp	.+44     	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
 6dc:	a1 fc       	sbrc	r10, 1
 6de:	03 c0       	rjmp	.+6      	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
 6e0:	88 e7       	ldi	r24, 0x78	; 120
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <__LOCK_REGION_LENGTH__+0x2ea>
 6e6:	88 e5       	ldi	r24, 0x58	; 88
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	b6 01       	movw	r22, r12
 6ec:	0c c0       	rjmp	.+24     	; 0x706 <__LOCK_REGION_LENGTH__+0x306>
 6ee:	8a 2d       	mov	r24, r10
 6f0:	86 78       	andi	r24, 0x86	; 134
 6f2:	51 f0       	breq	.+20     	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
 6f4:	a1 fe       	sbrs	r10, 1
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
 6f8:	8b e2       	ldi	r24, 0x2B	; 43
 6fa:	01 c0       	rjmp	.+2      	; 0x6fe <__LOCK_REGION_LENGTH__+0x2fe>
 6fc:	80 e2       	ldi	r24, 0x20	; 32
 6fe:	a7 fc       	sbrc	r10, 7
 700:	8d e2       	ldi	r24, 0x2D	; 45
 702:	b6 01       	movw	r22, r12
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	50 d0       	rcall	.+160    	; 0x7a8 <fputc>
 708:	89 14       	cp	r8, r9
 70a:	30 f4       	brcc	.+12     	; 0x718 <__LOCK_REGION_LENGTH__+0x318>
 70c:	b6 01       	movw	r22, r12
 70e:	80 e3       	ldi	r24, 0x30	; 48
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	4a d0       	rcall	.+148    	; 0x7a8 <fputc>
 714:	9a 94       	dec	r9
 716:	f8 cf       	rjmp	.-16     	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
 718:	8a 94       	dec	r8
 71a:	f3 01       	movw	r30, r6
 71c:	e8 0d       	add	r30, r8
 71e:	f1 1d       	adc	r31, r1
 720:	80 81       	ld	r24, Z
 722:	b6 01       	movw	r22, r12
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	40 d0       	rcall	.+128    	; 0x7a8 <fputc>
 728:	81 10       	cpse	r8, r1
 72a:	f6 cf       	rjmp	.-20     	; 0x718 <__LOCK_REGION_LENGTH__+0x318>
 72c:	22 20       	and	r2, r2
 72e:	09 f4       	brne	.+2      	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
 730:	4e ce       	rjmp	.-868    	; 0x3ce <vfprintf+0x4c>
 732:	b6 01       	movw	r22, r12
 734:	80 e2       	ldi	r24, 0x20	; 32
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	37 d0       	rcall	.+110    	; 0x7a8 <fputc>
 73a:	2a 94       	dec	r2
 73c:	f7 cf       	rjmp	.-18     	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
 73e:	f6 01       	movw	r30, r12
 740:	86 81       	ldd	r24, Z+6	; 0x06
 742:	97 81       	ldd	r25, Z+7	; 0x07
 744:	02 c0       	rjmp	.+4      	; 0x74a <__LOCK_REGION_LENGTH__+0x34a>
 746:	8f ef       	ldi	r24, 0xFF	; 255
 748:	9f ef       	ldi	r25, 0xFF	; 255
 74a:	2b 96       	adiw	r28, 0x0b	; 11
 74c:	0f b6       	in	r0, 0x3f	; 63
 74e:	f8 94       	cli
 750:	de bf       	out	0x3e, r29	; 62
 752:	0f be       	out	0x3f, r0	; 63
 754:	cd bf       	out	0x3d, r28	; 61
 756:	df 91       	pop	r29
 758:	cf 91       	pop	r28
 75a:	1f 91       	pop	r17
 75c:	0f 91       	pop	r16
 75e:	ff 90       	pop	r15
 760:	ef 90       	pop	r14
 762:	df 90       	pop	r13
 764:	cf 90       	pop	r12
 766:	bf 90       	pop	r11
 768:	af 90       	pop	r10
 76a:	9f 90       	pop	r9
 76c:	8f 90       	pop	r8
 76e:	7f 90       	pop	r7
 770:	6f 90       	pop	r6
 772:	5f 90       	pop	r5
 774:	4f 90       	pop	r4
 776:	3f 90       	pop	r3
 778:	2f 90       	pop	r2
 77a:	08 95       	ret

0000077c <strnlen_P>:
 77c:	fc 01       	movw	r30, r24
 77e:	05 90       	lpm	r0, Z+
 780:	61 50       	subi	r22, 0x01	; 1
 782:	70 40       	sbci	r23, 0x00	; 0
 784:	01 10       	cpse	r0, r1
 786:	d8 f7       	brcc	.-10     	; 0x77e <strnlen_P+0x2>
 788:	80 95       	com	r24
 78a:	90 95       	com	r25
 78c:	8e 0f       	add	r24, r30
 78e:	9f 1f       	adc	r25, r31
 790:	08 95       	ret

00000792 <strnlen>:
 792:	fc 01       	movw	r30, r24
 794:	61 50       	subi	r22, 0x01	; 1
 796:	70 40       	sbci	r23, 0x00	; 0
 798:	01 90       	ld	r0, Z+
 79a:	01 10       	cpse	r0, r1
 79c:	d8 f7       	brcc	.-10     	; 0x794 <strnlen+0x2>
 79e:	80 95       	com	r24
 7a0:	90 95       	com	r25
 7a2:	8e 0f       	add	r24, r30
 7a4:	9f 1f       	adc	r25, r31
 7a6:	08 95       	ret

000007a8 <fputc>:
 7a8:	0f 93       	push	r16
 7aa:	1f 93       	push	r17
 7ac:	cf 93       	push	r28
 7ae:	df 93       	push	r29
 7b0:	fb 01       	movw	r30, r22
 7b2:	23 81       	ldd	r18, Z+3	; 0x03
 7b4:	21 fd       	sbrc	r18, 1
 7b6:	03 c0       	rjmp	.+6      	; 0x7be <fputc+0x16>
 7b8:	8f ef       	ldi	r24, 0xFF	; 255
 7ba:	9f ef       	ldi	r25, 0xFF	; 255
 7bc:	2c c0       	rjmp	.+88     	; 0x816 <fputc+0x6e>
 7be:	22 ff       	sbrs	r18, 2
 7c0:	16 c0       	rjmp	.+44     	; 0x7ee <fputc+0x46>
 7c2:	46 81       	ldd	r20, Z+6	; 0x06
 7c4:	57 81       	ldd	r21, Z+7	; 0x07
 7c6:	24 81       	ldd	r18, Z+4	; 0x04
 7c8:	35 81       	ldd	r19, Z+5	; 0x05
 7ca:	42 17       	cp	r20, r18
 7cc:	53 07       	cpc	r21, r19
 7ce:	44 f4       	brge	.+16     	; 0x7e0 <fputc+0x38>
 7d0:	a0 81       	ld	r26, Z
 7d2:	b1 81       	ldd	r27, Z+1	; 0x01
 7d4:	9d 01       	movw	r18, r26
 7d6:	2f 5f       	subi	r18, 0xFF	; 255
 7d8:	3f 4f       	sbci	r19, 0xFF	; 255
 7da:	31 83       	std	Z+1, r19	; 0x01
 7dc:	20 83       	st	Z, r18
 7de:	8c 93       	st	X, r24
 7e0:	26 81       	ldd	r18, Z+6	; 0x06
 7e2:	37 81       	ldd	r19, Z+7	; 0x07
 7e4:	2f 5f       	subi	r18, 0xFF	; 255
 7e6:	3f 4f       	sbci	r19, 0xFF	; 255
 7e8:	37 83       	std	Z+7, r19	; 0x07
 7ea:	26 83       	std	Z+6, r18	; 0x06
 7ec:	14 c0       	rjmp	.+40     	; 0x816 <fputc+0x6e>
 7ee:	8b 01       	movw	r16, r22
 7f0:	ec 01       	movw	r28, r24
 7f2:	fb 01       	movw	r30, r22
 7f4:	00 84       	ldd	r0, Z+8	; 0x08
 7f6:	f1 85       	ldd	r31, Z+9	; 0x09
 7f8:	e0 2d       	mov	r30, r0
 7fa:	09 95       	icall
 7fc:	89 2b       	or	r24, r25
 7fe:	e1 f6       	brne	.-72     	; 0x7b8 <fputc+0x10>
 800:	d8 01       	movw	r26, r16
 802:	16 96       	adiw	r26, 0x06	; 6
 804:	8d 91       	ld	r24, X+
 806:	9c 91       	ld	r25, X
 808:	17 97       	sbiw	r26, 0x07	; 7
 80a:	01 96       	adiw	r24, 0x01	; 1
 80c:	17 96       	adiw	r26, 0x07	; 7
 80e:	9c 93       	st	X, r25
 810:	8e 93       	st	-X, r24
 812:	16 97       	sbiw	r26, 0x06	; 6
 814:	ce 01       	movw	r24, r28
 816:	df 91       	pop	r29
 818:	cf 91       	pop	r28
 81a:	1f 91       	pop	r17
 81c:	0f 91       	pop	r16
 81e:	08 95       	ret

00000820 <__ultoa_invert>:
 820:	fa 01       	movw	r30, r20
 822:	aa 27       	eor	r26, r26
 824:	28 30       	cpi	r18, 0x08	; 8
 826:	51 f1       	breq	.+84     	; 0x87c <__ultoa_invert+0x5c>
 828:	20 31       	cpi	r18, 0x10	; 16
 82a:	81 f1       	breq	.+96     	; 0x88c <__ultoa_invert+0x6c>
 82c:	e8 94       	clt
 82e:	6f 93       	push	r22
 830:	6e 7f       	andi	r22, 0xFE	; 254
 832:	6e 5f       	subi	r22, 0xFE	; 254
 834:	7f 4f       	sbci	r23, 0xFF	; 255
 836:	8f 4f       	sbci	r24, 0xFF	; 255
 838:	9f 4f       	sbci	r25, 0xFF	; 255
 83a:	af 4f       	sbci	r26, 0xFF	; 255
 83c:	b1 e0       	ldi	r27, 0x01	; 1
 83e:	3e d0       	rcall	.+124    	; 0x8bc <__ultoa_invert+0x9c>
 840:	b4 e0       	ldi	r27, 0x04	; 4
 842:	3c d0       	rcall	.+120    	; 0x8bc <__ultoa_invert+0x9c>
 844:	67 0f       	add	r22, r23
 846:	78 1f       	adc	r23, r24
 848:	89 1f       	adc	r24, r25
 84a:	9a 1f       	adc	r25, r26
 84c:	a1 1d       	adc	r26, r1
 84e:	68 0f       	add	r22, r24
 850:	79 1f       	adc	r23, r25
 852:	8a 1f       	adc	r24, r26
 854:	91 1d       	adc	r25, r1
 856:	a1 1d       	adc	r26, r1
 858:	6a 0f       	add	r22, r26
 85a:	71 1d       	adc	r23, r1
 85c:	81 1d       	adc	r24, r1
 85e:	91 1d       	adc	r25, r1
 860:	a1 1d       	adc	r26, r1
 862:	20 d0       	rcall	.+64     	; 0x8a4 <__ultoa_invert+0x84>
 864:	09 f4       	brne	.+2      	; 0x868 <__ultoa_invert+0x48>
 866:	68 94       	set
 868:	3f 91       	pop	r19
 86a:	2a e0       	ldi	r18, 0x0A	; 10
 86c:	26 9f       	mul	r18, r22
 86e:	11 24       	eor	r1, r1
 870:	30 19       	sub	r19, r0
 872:	30 5d       	subi	r19, 0xD0	; 208
 874:	31 93       	st	Z+, r19
 876:	de f6       	brtc	.-74     	; 0x82e <__ultoa_invert+0xe>
 878:	cf 01       	movw	r24, r30
 87a:	08 95       	ret
 87c:	46 2f       	mov	r20, r22
 87e:	47 70       	andi	r20, 0x07	; 7
 880:	40 5d       	subi	r20, 0xD0	; 208
 882:	41 93       	st	Z+, r20
 884:	b3 e0       	ldi	r27, 0x03	; 3
 886:	0f d0       	rcall	.+30     	; 0x8a6 <__ultoa_invert+0x86>
 888:	c9 f7       	brne	.-14     	; 0x87c <__ultoa_invert+0x5c>
 88a:	f6 cf       	rjmp	.-20     	; 0x878 <__ultoa_invert+0x58>
 88c:	46 2f       	mov	r20, r22
 88e:	4f 70       	andi	r20, 0x0F	; 15
 890:	40 5d       	subi	r20, 0xD0	; 208
 892:	4a 33       	cpi	r20, 0x3A	; 58
 894:	18 f0       	brcs	.+6      	; 0x89c <__ultoa_invert+0x7c>
 896:	49 5d       	subi	r20, 0xD9	; 217
 898:	31 fd       	sbrc	r19, 1
 89a:	40 52       	subi	r20, 0x20	; 32
 89c:	41 93       	st	Z+, r20
 89e:	02 d0       	rcall	.+4      	; 0x8a4 <__ultoa_invert+0x84>
 8a0:	a9 f7       	brne	.-22     	; 0x88c <__ultoa_invert+0x6c>
 8a2:	ea cf       	rjmp	.-44     	; 0x878 <__ultoa_invert+0x58>
 8a4:	b4 e0       	ldi	r27, 0x04	; 4
 8a6:	a6 95       	lsr	r26
 8a8:	97 95       	ror	r25
 8aa:	87 95       	ror	r24
 8ac:	77 95       	ror	r23
 8ae:	67 95       	ror	r22
 8b0:	ba 95       	dec	r27
 8b2:	c9 f7       	brne	.-14     	; 0x8a6 <__ultoa_invert+0x86>
 8b4:	00 97       	sbiw	r24, 0x00	; 0
 8b6:	61 05       	cpc	r22, r1
 8b8:	71 05       	cpc	r23, r1
 8ba:	08 95       	ret
 8bc:	9b 01       	movw	r18, r22
 8be:	ac 01       	movw	r20, r24
 8c0:	0a 2e       	mov	r0, r26
 8c2:	06 94       	lsr	r0
 8c4:	57 95       	ror	r21
 8c6:	47 95       	ror	r20
 8c8:	37 95       	ror	r19
 8ca:	27 95       	ror	r18
 8cc:	ba 95       	dec	r27
 8ce:	c9 f7       	brne	.-14     	; 0x8c2 <__ultoa_invert+0xa2>
 8d0:	62 0f       	add	r22, r18
 8d2:	73 1f       	adc	r23, r19
 8d4:	84 1f       	adc	r24, r20
 8d6:	95 1f       	adc	r25, r21
 8d8:	a0 1d       	adc	r26, r0
 8da:	08 95       	ret

000008dc <_exit>:
 8dc:	f8 94       	cli

000008de <__stop_program>:
 8de:	ff cf       	rjmp	.-2      	; 0x8de <__stop_program>
