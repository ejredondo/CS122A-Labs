
Eredo001_Lab5_Part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000270  00000304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000270  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800104  00800104  00000308  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b86  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090a  00000000  00000000  00000f66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000448  00000000  00000000  00001870  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00001cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f9  00000000  00000000  00001d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000100  00000000  00000000  00002285  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002385  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e7       	ldi	r30, 0x70	; 112
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 30       	cpi	r26, 0x0E	; 14
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	bf d0       	rcall	.+382    	; 0x242 <main>
  c4:	d3 c0       	rjmp	.+422    	; 0x26c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
  cc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
  d8:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
  dc:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
  e0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
  e4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 112:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 116:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 11a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 11e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 122:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 126:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 144:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 148:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 14c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 150:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 15e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 162:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 166:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
        _avr_timer_cntcurr = _avr_timer_M;
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 180:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 184:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 188:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 18c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 190:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 194:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
    }
}
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <transmit_data>:
// 			PORTC |= ((data >> i) & 0x01);
// 			PORTC |= 0x04 & 0x0F;
// 		}
// 		PORTC |= 0x02 & 0x0F;
// 		PORTC = 0x00 & 0x0F;
for(int i = 15; i >= 0; i--)
 1aa:	2f e0       	ldi	r18, 0x0F	; 15
 1ac:	30 e0       	ldi	r19, 0x00	; 0
{
	PORTC = 0x88;
 1ae:	58 e8       	ldi	r21, 0x88	; 136
	PORTC |= ((x >> i) & 0x0001);   // for first 4
 1b0:	e8 2f       	mov	r30, r24
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
// 		}
// 		PORTC |= 0x02 & 0x0F;
// 		PORTC = 0x00 & 0x0F;
for(int i = 15; i >= 0; i--)
{
	PORTC = 0x88;
 1b4:	58 b9       	out	0x08, r21	; 8
	PORTC |= ((x >> i) & 0x0001);   // for first 4
 1b6:	48 b1       	in	r20, 0x08	; 8
 1b8:	bf 01       	movw	r22, r30
 1ba:	02 2e       	mov	r0, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <transmit_data+0x18>
 1be:	75 95       	asr	r23
 1c0:	67 95       	ror	r22
 1c2:	0a 94       	dec	r0
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <transmit_data+0x14>
 1c6:	96 2f       	mov	r25, r22
 1c8:	91 70       	andi	r25, 0x01	; 1
 1ca:	94 2b       	or	r25, r20
 1cc:	98 b9       	out	0x08, r25	; 8
	PORTC |= 0x44;
 1ce:	98 b1       	in	r25, 0x08	; 8
 1d0:	94 64       	ori	r25, 0x44	; 68
 1d2:	98 b9       	out	0x08, r25	; 8
	PORTC |= 0x22;
 1d4:	98 b1       	in	r25, 0x08	; 8
 1d6:	92 62       	ori	r25, 0x22	; 34
 1d8:	98 b9       	out	0x08, r25	; 8
// 			PORTC |= ((data >> i) & 0x01);
// 			PORTC |= 0x04 & 0x0F;
// 		}
// 		PORTC |= 0x02 & 0x0F;
// 		PORTC = 0x00 & 0x0F;
for(int i = 15; i >= 0; i--)
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	31 09       	sbc	r19, r1
 1de:	50 f7       	brcc	.-44     	; 0x1b4 <transmit_data+0xa>
	PORTC = 0x88;
	PORTC |= ((x >> i) & 0x0001);   // for first 4
	PORTC |= 0x44;
	PORTC |= 0x22;
}
PORTC |= 0x22;
 1e0:	88 b1       	in	r24, 0x08	; 8
 1e2:	82 62       	ori	r24, 0x22	; 34
 1e4:	88 b9       	out	0x08, r24	; 8
PORTC = 0x00;
 1e6:	18 b8       	out	0x08, r1	; 8
 1e8:	08 95       	ret

000001ea <LEDS_Tick>:
// }

enum States {start, s1, s2} State;
void LEDS_Tick()
{
	switch(State)
 1ea:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <State>
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	59 f0       	breq	.+22     	; 0x208 <LEDS_Tick+0x1e>
 1f2:	18 f0       	brcs	.+6      	; 0x1fa <LEDS_Tick+0x10>
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	a1 f0       	breq	.+40     	; 0x220 <LEDS_Tick+0x36>
 1f8:	08 95       	ret
	{
		case start:
		transmit_data(y);
 1fa:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <y>
 1fe:	d5 df       	rcall	.-86     	; 0x1aa <transmit_data>
		State = s1;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <State>
		break;
 206:	08 95       	ret
		
		case s1:
		transmit_data(y);
 208:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <y>
 20c:	ce df       	rcall	.-100    	; 0x1aa <transmit_data>
		y = y << 1;
 20e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <y>
 212:	88 0f       	add	r24, r24
 214:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <y>
		{
			State = s2;
		}
		else
		{
			State  = s1;
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <State>
 21e:	08 95       	ret
		}
		break;
		
		case s2:
		transmit_data(y);
 220:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <y>
 224:	c2 df       	rcall	.-124    	; 0x1aa <transmit_data>
		y = y >> 1;
 226:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <y>
 22a:	86 95       	lsr	r24
 22c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <y>
		if(y == 0x0001)
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	19 f4       	brne	.+6      	; 0x23a <LEDS_Tick+0x50>
		{
			State = s1;
 234:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <State>
 238:	08 95       	ret
		}
		else
		{
			State = s2;
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <State>
 240:	08 95       	ret

00000242 <main>:
	}
}

int main(void)
{
	DDRC = 0xFF; PORTC = 0x00;
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	87 b9       	out	0x07, r24	; 7
 246:	18 b8       	out	0x08, r1	; 8
	DDRB = 0x00; PORTB = 0xFF;
 248:	14 b8       	out	0x04, r1	; 4
 24a:	85 b9       	out	0x05, r24	; 5
	DDRA = 0x00; PORTA = 0xFF;
 24c:	11 b8       	out	0x01, r1	; 1
 24e:	82 b9       	out	0x02, r24	; 2
	/* Replace with your application code */
	
	TimerOn();
 250:	4c df       	rcall	.-360    	; 0xea <TimerOn>
	TimerSet(300);
 252:	6c e2       	ldi	r22, 0x2C	; 44
 254:	71 e0       	ldi	r23, 0x01	; 1
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	90 e0       	ldi	r25, 0x00	; 0
	while (1)
	{
		LEDS_Tick();
 25a:	36 df       	rcall	.-404    	; 0xc8 <TimerSet>
 25c:	c6 df       	rcall	.-116    	; 0x1ea <LEDS_Tick>
		while(!TimerFlag);
 25e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <TimerFlag>
 262:	88 23       	and	r24, r24
 264:	e1 f3       	breq	.-8      	; 0x25e <main+0x1c>
		TimerFlag = 0;
 266:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <TimerFlag>
	}
 26a:	f8 cf       	rjmp	.-16     	; 0x25c <main+0x1a>

0000026c <_exit>:
 26c:	f8 94       	cli

0000026e <__stop_program>:
 26e:	ff cf       	rjmp	.-2      	; 0x26e <__stop_program>
