
Eredo001_Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000516  000005aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000516  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800104  00800104  000005ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bf7  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000984  00000000  00000000  0000126f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ca  00000000  00000000  00001bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  000020c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000549  00000000  00000000  000021e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000522  00000000  00000000  0000272d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002c4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	14 c1       	rjmp	.+552    	; 0x25e <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e1       	ldi	r30, 0x16	; 22
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 32       	cpi	r26, 0x27	; 39
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	50 d1       	rcall	.+672    	; 0x364 <main>
  c4:	26 c2       	rjmp	.+1100   	; 0x512 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SMTick1>:
		if(c==0){return b;}
		a = b;
		b = c;
	}
	return 0;
}
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	91 05       	cpc	r25, r1
  cc:	19 f1       	breq	.+70     	; 0x114 <SMTick1+0x4c>
  ce:	1c f4       	brge	.+6      	; 0xd6 <SMTick1+0xe>
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	c9 f0       	breq	.+50     	; 0x106 <SMTick1+0x3e>
  d4:	06 c0       	rjmp	.+12     	; 0xe2 <SMTick1+0x1a>
  d6:	82 30       	cpi	r24, 0x02	; 2
  d8:	91 05       	cpc	r25, r1
  da:	19 f1       	breq	.+70     	; 0x122 <SMTick1+0x5a>
  dc:	83 30       	cpi	r24, 0x03	; 3
  de:	91 05       	cpc	r25, r1
  e0:	91 f0       	breq	.+36     	; 0x106 <SMTick1+0x3e>
  e2:	81 30       	cpi	r24, 0x01	; 1
  e4:	91 05       	cpc	r25, r1
  e6:	79 f0       	breq	.+30     	; 0x106 <SMTick1+0x3e>
  e8:	1c f4       	brge	.+6      	; 0xf0 <SMTick1+0x28>
  ea:	00 97       	sbiw	r24, 0x00	; 0
  ec:	41 f0       	breq	.+16     	; 0xfe <SMTick1+0x36>
  ee:	08 95       	ret
  f0:	82 30       	cpi	r24, 0x02	; 2
  f2:	91 05       	cpc	r25, r1
  f4:	79 f0       	breq	.+30     	; 0x114 <SMTick1+0x4c>
  f6:	83 30       	cpi	r24, 0x03	; 3
  f8:	91 05       	cpc	r25, r1
  fa:	c9 f4       	brne	.+50     	; 0x12e <SMTick1+0x66>
  fc:	12 c0       	rjmp	.+36     	; 0x122 <SMTick1+0x5a>
  fe:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <Three_LED>
 102:	15 b8       	out	0x05, r1	; 5
 104:	08 95       	ret
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <Three_LED>
 10c:	85 b9       	out	0x05, r24	; 5
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	08 95       	ret
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <Three_LED>
 11a:	85 b9       	out	0x05, r24	; 5
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	08 95       	ret
 122:	84 e0       	ldi	r24, 0x04	; 4
 124:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <Three_LED>
 128:	85 b9       	out	0x05, r24	; 5
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	08 95       	ret

00000130 <SMTick2>:
 130:	20 b1       	in	r18, 0x00	; 0
 132:	21 70       	andi	r18, 0x01	; 1
 134:	00 97       	sbiw	r24, 0x00	; 0
 136:	21 f0       	breq	.+8      	; 0x140 <SMTick2+0x10>
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	91 05       	cpc	r25, r1
 13c:	49 f0       	breq	.+18     	; 0x150 <SMTick2+0x20>
 13e:	0e c0       	rjmp	.+28     	; 0x15c <SMTick2+0x2c>
 140:	41 e0       	ldi	r20, 0x01	; 1
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	21 11       	cpse	r18, r1
 146:	01 c0       	rjmp	.+2      	; 0x14a <SMTick2+0x1a>
 148:	40 e0       	ldi	r20, 0x00	; 0
 14a:	84 2f       	mov	r24, r20
 14c:	93 2f       	mov	r25, r19
 14e:	06 c0       	rjmp	.+12     	; 0x15c <SMTick2+0x2c>
 150:	21 11       	cpse	r18, r1
 152:	0a c0       	rjmp	.+20     	; 0x168 <SMTick2+0x38>
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <state>
 15a:	0e c0       	rjmp	.+28     	; 0x178 <SMTick2+0x48>
 15c:	00 97       	sbiw	r24, 0x00	; 0
 15e:	21 f0       	breq	.+8      	; 0x168 <SMTick2+0x38>
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	91 05       	cpc	r25, r1
 164:	91 f4       	brne	.+36     	; 0x18a <SMTick2+0x5a>
 166:	08 c0       	rjmp	.+16     	; 0x178 <SMTick2+0x48>
 168:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <led>
 16c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <Three_LED>
 170:	85 b9       	out	0x05, r24	; 5
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	08 95       	ret
 178:	88 e0       	ldi	r24, 0x08	; 8
 17a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <led>
 17e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <Three_LED>
 182:	88 60       	ori	r24, 0x08	; 8
 184:	85 b9       	out	0x05, r24	; 5
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	08 95       	ret

0000018c <TimerISR>:
 18c:	cf 92       	push	r12
 18e:	df 92       	push	r13
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <i.1614>
 19e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <tasksNum>
 1a2:	88 23       	and	r24, r24
 1a4:	09 f4       	brne	.+2      	; 0x1a8 <TimerISR+0x1c>
 1a6:	53 c0       	rjmp	.+166    	; 0x24e <TimerISR+0xc2>
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	1b e0       	ldi	r17, 0x0B	; 11
 1ac:	c0 91 21 01 	lds	r28, 0x0121	; 0x800121 <tasks>
 1b0:	d0 91 22 01 	lds	r29, 0x0122	; 0x800122 <tasks+0x1>
 1b4:	18 9f       	mul	r17, r24
 1b6:	c0 0d       	add	r28, r0
 1b8:	d1 1d       	adc	r29, r1
 1ba:	11 24       	eor	r1, r1
 1bc:	4d 81       	ldd	r20, Y+5	; 0x05
 1be:	5e 81       	ldd	r21, Y+6	; 0x06
 1c0:	6f 81       	ldd	r22, Y+7	; 0x07
 1c2:	78 85       	ldd	r23, Y+8	; 0x08
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	9a 81       	ldd	r25, Y+2	; 0x02
 1c8:	ab 81       	ldd	r26, Y+3	; 0x03
 1ca:	bc 81       	ldd	r27, Y+4	; 0x04
 1cc:	48 17       	cp	r20, r24
 1ce:	59 07       	cpc	r21, r25
 1d0:	6a 07       	cpc	r22, r26
 1d2:	7b 07       	cpc	r23, r27
 1d4:	b0 f0       	brcs	.+44     	; 0x202 <TimerISR+0x76>
 1d6:	88 81       	ld	r24, Y
 1d8:	e9 85       	ldd	r30, Y+9	; 0x09
 1da:	fa 85       	ldd	r31, Y+10	; 0x0a
 1dc:	08 2e       	mov	r0, r24
 1de:	00 0c       	add	r0, r0
 1e0:	99 0b       	sbc	r25, r25
 1e2:	09 95       	icall
 1e4:	88 83       	st	Y, r24
 1e6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <i.1614>
 1ea:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <tasks>
 1ee:	f0 91 22 01 	lds	r31, 0x0122	; 0x800122 <tasks+0x1>
 1f2:	18 9f       	mul	r17, r24
 1f4:	e0 0d       	add	r30, r0
 1f6:	f1 1d       	adc	r31, r1
 1f8:	11 24       	eor	r1, r1
 1fa:	15 82       	std	Z+5, r1	; 0x05
 1fc:	16 82       	std	Z+6, r1	; 0x06
 1fe:	17 82       	std	Z+7, r1	; 0x07
 200:	10 86       	std	Z+8, r1	; 0x08
 202:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <i.1614>
 206:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <tasks>
 20a:	f0 91 22 01 	lds	r31, 0x0122	; 0x800122 <tasks+0x1>
 20e:	18 9f       	mul	r17, r24
 210:	e0 0d       	add	r30, r0
 212:	f1 1d       	adc	r31, r1
 214:	11 24       	eor	r1, r1
 216:	c5 80       	ldd	r12, Z+5	; 0x05
 218:	d6 80       	ldd	r13, Z+6	; 0x06
 21a:	e7 80       	ldd	r14, Z+7	; 0x07
 21c:	f0 84       	ldd	r15, Z+8	; 0x08
 21e:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 222:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 226:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 22a:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 22e:	4c 0d       	add	r20, r12
 230:	5d 1d       	adc	r21, r13
 232:	6e 1d       	adc	r22, r14
 234:	7f 1d       	adc	r23, r15
 236:	45 83       	std	Z+5, r20	; 0x05
 238:	56 83       	std	Z+6, r21	; 0x06
 23a:	67 83       	std	Z+7, r22	; 0x07
 23c:	70 87       	std	Z+8, r23	; 0x08
 23e:	8f 5f       	subi	r24, 0xFF	; 255
 240:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <i.1614>
 244:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <tasksNum>
 248:	89 17       	cp	r24, r25
 24a:	08 f4       	brcc	.+2      	; 0x24e <TimerISR+0xc2>
 24c:	af cf       	rjmp	.-162    	; 0x1ac <TimerISR+0x20>
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	ff 90       	pop	r15
 256:	ef 90       	pop	r14
 258:	df 90       	pop	r13
 25a:	cf 90       	pop	r12
 25c:	08 95       	ret

0000025e <__vector_13>:
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	0b b6       	in	r0, 0x3b	; 59
 26a:	0f 92       	push	r0
 26c:	2f 93       	push	r18
 26e:	3f 93       	push	r19
 270:	4f 93       	push	r20
 272:	5f 93       	push	r21
 274:	6f 93       	push	r22
 276:	7f 93       	push	r23
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25
 27c:	af 93       	push	r26
 27e:	bf 93       	push	r27
 280:	ef 93       	push	r30
 282:	ff 93       	push	r31
 284:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <tasksPeriodCntDown>
 288:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <tasksPeriodCntDown+0x1>
 28c:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <tasksPeriodCntDown+0x2>
 290:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <tasksPeriodCntDown+0x3>
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	a1 09       	sbc	r26, r1
 298:	b1 09       	sbc	r27, r1
 29a:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <tasksPeriodCntDown>
 29e:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <tasksPeriodCntDown+0x1>
 2a2:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <tasksPeriodCntDown+0x2>
 2a6:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <tasksPeriodCntDown+0x3>
 2aa:	89 2b       	or	r24, r25
 2ac:	8a 2b       	or	r24, r26
 2ae:	8b 2b       	or	r24, r27
 2b0:	89 f4       	brne	.+34     	; 0x2d4 <__vector_13+0x76>
 2b2:	6c df       	rcall	.-296    	; 0x18c <TimerISR>
 2b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2b8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2bc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2c0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2c4:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <tasksPeriodCntDown>
 2c8:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <tasksPeriodCntDown+0x1>
 2cc:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <tasksPeriodCntDown+0x2>
 2d0:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <tasksPeriodCntDown+0x3>
 2d4:	ff 91       	pop	r31
 2d6:	ef 91       	pop	r30
 2d8:	bf 91       	pop	r27
 2da:	af 91       	pop	r26
 2dc:	9f 91       	pop	r25
 2de:	8f 91       	pop	r24
 2e0:	7f 91       	pop	r23
 2e2:	6f 91       	pop	r22
 2e4:	5f 91       	pop	r21
 2e6:	4f 91       	pop	r20
 2e8:	3f 91       	pop	r19
 2ea:	2f 91       	pop	r18
 2ec:	0f 90       	pop	r0
 2ee:	0b be       	out	0x3b, r0	; 59
 2f0:	0f 90       	pop	r0
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <TimerSet>:
 2fa:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 2fe:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 302:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 306:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 30a:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <tasksPeriodCntDown>
 30e:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <tasksPeriodCntDown+0x1>
 312:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <tasksPeriodCntDown+0x2>
 316:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <tasksPeriodCntDown+0x3>
 31a:	08 95       	ret

0000031c <TimerOn>:
 31c:	8b e0       	ldi	r24, 0x0B	; 11
 31e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 322:	8d e7       	ldi	r24, 0x7D	; 125
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 32a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 334:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 338:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 33c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 340:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 344:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 348:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 34c:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <tasksPeriodCntDown>
 350:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <tasksPeriodCntDown+0x1>
 354:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <tasksPeriodCntDown+0x2>
 358:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <tasksPeriodCntDown+0x3>
 35c:	8f b7       	in	r24, 0x3f	; 63
 35e:	80 68       	ori	r24, 0x80	; 128
 360:	8f bf       	out	0x3f, r24	; 63
 362:	08 95       	ret

00000364 <main>:
}



int main(void)
{
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	00 d0       	rcall	.+0      	; 0x36a <main+0x6>
 36a:	00 d0       	rcall	.+0      	; 0x36c <main+0x8>
 36c:	cd b7       	in	r28, 0x3d	; 61
 36e:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF;
 370:	11 b8       	out	0x01, r1	; 1
 372:	8f ef       	ldi	r24, 0xFF	; 255
 374:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 376:	84 b9       	out	0x04, r24	; 4
 378:	15 b8       	out	0x05, r1	; 5
 37a:	0f 2e       	mov	r0, r31
 37c:	f8 ee       	ldi	r31, 0xE8	; 232
 37e:	ef 2e       	mov	r14, r31
 380:	f0 2d       	mov	r31, r0
 382:	0f 2e       	mov	r0, r31
 384:	f3 e0       	ldi	r31, 0x03	; 3
 386:	ff 2e       	mov	r15, r31
 388:	f0 2d       	mov	r31, r0
 38a:	00 e0       	ldi	r16, 0x00	; 0
 38c:	10 e0       	ldi	r17, 0x00	; 0
 38e:	54 ef       	ldi	r21, 0xF4	; 244
 390:	41 e0       	ldi	r20, 0x01	; 1
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	20 e0       	ldi	r18, 0x00	; 0
 396:	04 c0       	rjmp	.+8      	; 0x3a0 <main+0x3c>
	unsigned long int c;
	while(1){
		c = a%b;
		if(c==0){return b;}
		a = b;
		b = c;
 398:	e6 2e       	mov	r14, r22
 39a:	f7 2e       	mov	r15, r23
 39c:	08 2f       	mov	r16, r24
 39e:	19 2f       	mov	r17, r25

unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 3a0:	65 2f       	mov	r22, r21
 3a2:	74 2f       	mov	r23, r20
 3a4:	83 2f       	mov	r24, r19
 3a6:	92 2f       	mov	r25, r18
 3a8:	2e 2d       	mov	r18, r14
 3aa:	3f 2d       	mov	r19, r15
 3ac:	40 2f       	mov	r20, r16
 3ae:	51 2f       	mov	r21, r17
 3b0:	8e d0       	rcall	.+284    	; 0x4ce <__udivmodsi4>
 3b2:	5e 2d       	mov	r21, r14
 3b4:	4f 2d       	mov	r20, r15
 3b6:	30 2f       	mov	r19, r16
 3b8:	21 2f       	mov	r18, r17
		if(c==0){return b;}
 3ba:	61 15       	cp	r22, r1
 3bc:	71 05       	cpc	r23, r1
 3be:	81 05       	cpc	r24, r1
 3c0:	91 05       	cpc	r25, r1
 3c2:	51 f7       	brne	.-44     	; 0x398 <main+0x34>

		//Greatest common divisor for all tasks or smallest time unit for tasks.
		unsigned long int GCD = tmpGCD;

		//Recalculate GCD periods for scheduler
		unsigned long int SMTick1_period = SMTick1_calc/GCD;
 3c4:	64 ef       	ldi	r22, 0xF4	; 244
 3c6:	71 e0       	ldi	r23, 0x01	; 1
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	2e 2d       	mov	r18, r14
 3ce:	3f 2d       	mov	r19, r15
 3d0:	40 2f       	mov	r20, r16
 3d2:	51 2f       	mov	r21, r17
 3d4:	7c d0       	rcall	.+248    	; 0x4ce <__udivmodsi4>
 3d6:	49 01       	movw	r8, r18
 3d8:	5a 01       	movw	r10, r20
		unsigned long int SMTick2_period = SMTick2_calc/GCD;
 3da:	68 ee       	ldi	r22, 0xE8	; 232
 3dc:	73 e0       	ldi	r23, 0x03	; 3
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	2e 2d       	mov	r18, r14
 3e4:	3f 2d       	mov	r19, r15
 3e6:	40 2f       	mov	r20, r16
 3e8:	51 2f       	mov	r21, r17
 3ea:	71 d0       	rcall	.+226    	; 0x4ce <__udivmodsi4>

		//Declare an array of tasks
		static task task1, task2;
		task *tasks[] = { &task1, &task2};
 3ec:	af e0       	ldi	r26, 0x0F	; 15
 3ee:	b1 e0       	ldi	r27, 0x01	; 1
 3f0:	ba 83       	std	Y+2, r27	; 0x02
 3f2:	a9 83       	std	Y+1, r26	; 0x01
 3f4:	e4 e0       	ldi	r30, 0x04	; 4
 3f6:	f1 e0       	ldi	r31, 0x01	; 1
 3f8:	fc 83       	std	Y+4, r31	; 0x04
 3fa:	eb 83       	std	Y+3, r30	; 0x03
		const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

		// Task 1
		task1.state = init;//Task initial state.
 3fc:	1c 92       	st	X, r1
		task1.period = SMTick1_period;//Task Period.
 3fe:	11 96       	adiw	r26, 0x01	; 1
 400:	8d 92       	st	X+, r8
 402:	9d 92       	st	X+, r9
 404:	ad 92       	st	X+, r10
 406:	bc 92       	st	X, r11
 408:	14 97       	sbiw	r26, 0x04	; 4
		task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 40a:	15 96       	adiw	r26, 0x05	; 5
 40c:	8d 92       	st	X+, r8
 40e:	9d 92       	st	X+, r9
 410:	ad 92       	st	X+, r10
 412:	bc 92       	st	X, r11
 414:	18 97       	sbiw	r26, 0x08	; 8
		task1.TickFct = &SMTick1;//Function pointer for the tick.
 416:	84 e6       	ldi	r24, 0x64	; 100
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	1a 96       	adiw	r26, 0x0a	; 10
 41c:	9c 93       	st	X, r25
 41e:	8e 93       	st	-X, r24
 420:	19 97       	sbiw	r26, 0x09	; 9

		// Task 2
		task2.state = ledWait;//Task initial state.
 422:	10 82       	st	Z, r1
		task2.period = SMTick2_period;//Task Period.
 424:	21 83       	std	Z+1, r18	; 0x01
 426:	32 83       	std	Z+2, r19	; 0x02
 428:	43 83       	std	Z+3, r20	; 0x03
 42a:	54 83       	std	Z+4, r21	; 0x04
		task2.elapsedTime = SMTick2_period;//Task current elapsed time.
 42c:	25 83       	std	Z+5, r18	; 0x05
 42e:	36 83       	std	Z+6, r19	; 0x06
 430:	47 83       	std	Z+7, r20	; 0x07
 432:	50 87       	std	Z+8, r21	; 0x08
		task2.TickFct = &SMTick2;//Function pointer for the tick.
 434:	88 e9       	ldi	r24, 0x98	; 152
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	92 87       	std	Z+10, r25	; 0x0a
 43a:	81 87       	std	Z+9, r24	; 0x09

		// Set the timer and turn it on
		TimerSet(GCD);
 43c:	6e 2d       	mov	r22, r14
 43e:	7f 2d       	mov	r23, r15
 440:	80 2f       	mov	r24, r16
 442:	91 2f       	mov	r25, r17
		TimerOn();
 444:	5a df       	rcall	.-332    	; 0x2fa <TimerSet>
 446:	6a df       	rcall	.-300    	; 0x31c <TimerOn>
 448:	7e 01       	movw	r14, r28
 44a:	85 e0       	ldi	r24, 0x05	; 5
 44c:	e8 0e       	add	r14, r24
 44e:	f1 1c       	adc	r15, r1
 450:	de 01       	movw	r26, r28
 452:	11 96       	adiw	r26, 0x01	; 1
 454:	6d 01       	movw	r12, r26
		unsigned short i; // Scheduler for-loop iterator
		while(1) {
			// Scheduler code
			for ( i = 0; i < numTasks; i++ ) {
				// Task is ready to tick
				if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 456:	f6 01       	movw	r30, r12
 458:	01 91       	ld	r16, Z+
 45a:	11 91       	ld	r17, Z+
 45c:	6f 01       	movw	r12, r30
 45e:	d8 01       	movw	r26, r16
 460:	15 96       	adiw	r26, 0x05	; 5
 462:	4d 91       	ld	r20, X+
 464:	5d 91       	ld	r21, X+
 466:	6d 91       	ld	r22, X+
 468:	7c 91       	ld	r23, X
 46a:	18 97       	sbiw	r26, 0x08	; 8
 46c:	11 96       	adiw	r26, 0x01	; 1
 46e:	8d 91       	ld	r24, X+
 470:	9d 91       	ld	r25, X+
 472:	0d 90       	ld	r0, X+
 474:	bc 91       	ld	r27, X
 476:	a0 2d       	mov	r26, r0
 478:	48 17       	cp	r20, r24
 47a:	59 07       	cpc	r21, r25
 47c:	6a 07       	cpc	r22, r26
 47e:	7b 07       	cpc	r23, r27
 480:	81 f4       	brne	.+32     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
					// Setting next state for task
					tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 482:	f8 01       	movw	r30, r16
 484:	80 81       	ld	r24, Z
 486:	01 84       	ldd	r0, Z+9	; 0x09
 488:	f2 85       	ldd	r31, Z+10	; 0x0a
 48a:	e0 2d       	mov	r30, r0
 48c:	08 2e       	mov	r0, r24
 48e:	00 0c       	add	r0, r0
 490:	99 0b       	sbc	r25, r25
 492:	09 95       	icall
 494:	d8 01       	movw	r26, r16
 496:	8c 93       	st	X, r24
					// Reset the elapsed time for next tick.
					tasks[i]->elapsedTime = 0;
 498:	f8 01       	movw	r30, r16
 49a:	15 82       	std	Z+5, r1	; 0x05
 49c:	16 82       	std	Z+6, r1	; 0x06
 49e:	17 82       	std	Z+7, r1	; 0x07
 4a0:	10 86       	std	Z+8, r1	; 0x08
				}
				tasks[i]->elapsedTime += 1;
 4a2:	f8 01       	movw	r30, r16
 4a4:	85 81       	ldd	r24, Z+5	; 0x05
 4a6:	96 81       	ldd	r25, Z+6	; 0x06
 4a8:	a7 81       	ldd	r26, Z+7	; 0x07
 4aa:	b0 85       	ldd	r27, Z+8	; 0x08
 4ac:	01 96       	adiw	r24, 0x01	; 1
 4ae:	a1 1d       	adc	r26, r1
 4b0:	b1 1d       	adc	r27, r1
 4b2:	85 83       	std	Z+5, r24	; 0x05
 4b4:	96 83       	std	Z+6, r25	; 0x06
 4b6:	a7 83       	std	Z+7, r26	; 0x07
 4b8:	b0 87       	std	Z+8, r27	; 0x08
		TimerOn();

		unsigned short i; // Scheduler for-loop iterator
		while(1) {
			// Scheduler code
			for ( i = 0; i < numTasks; i++ ) {
 4ba:	ce 14       	cp	r12, r14
 4bc:	df 04       	cpc	r13, r15
 4be:	59 f6       	brne	.-106    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
					// Reset the elapsed time for next tick.
					tasks[i]->elapsedTime = 0;
				}
				tasks[i]->elapsedTime += 1;
			}
			while(!TimerFlag);
 4c0:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <TimerFlag>
 4c4:	88 23       	and	r24, r24
 4c6:	e1 f3       	breq	.-8      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
			TimerFlag = 0;
 4c8:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <TimerFlag>
		}
 4cc:	c1 cf       	rjmp	.-126    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>

000004ce <__udivmodsi4>:
 4ce:	a1 e2       	ldi	r26, 0x21	; 33
 4d0:	1a 2e       	mov	r1, r26
 4d2:	aa 1b       	sub	r26, r26
 4d4:	bb 1b       	sub	r27, r27
 4d6:	fd 01       	movw	r30, r26
 4d8:	0d c0       	rjmp	.+26     	; 0x4f4 <__udivmodsi4_ep>

000004da <__udivmodsi4_loop>:
 4da:	aa 1f       	adc	r26, r26
 4dc:	bb 1f       	adc	r27, r27
 4de:	ee 1f       	adc	r30, r30
 4e0:	ff 1f       	adc	r31, r31
 4e2:	a2 17       	cp	r26, r18
 4e4:	b3 07       	cpc	r27, r19
 4e6:	e4 07       	cpc	r30, r20
 4e8:	f5 07       	cpc	r31, r21
 4ea:	20 f0       	brcs	.+8      	; 0x4f4 <__udivmodsi4_ep>
 4ec:	a2 1b       	sub	r26, r18
 4ee:	b3 0b       	sbc	r27, r19
 4f0:	e4 0b       	sbc	r30, r20
 4f2:	f5 0b       	sbc	r31, r21

000004f4 <__udivmodsi4_ep>:
 4f4:	66 1f       	adc	r22, r22
 4f6:	77 1f       	adc	r23, r23
 4f8:	88 1f       	adc	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	1a 94       	dec	r1
 4fe:	69 f7       	brne	.-38     	; 0x4da <__udivmodsi4_loop>
 500:	60 95       	com	r22
 502:	70 95       	com	r23
 504:	80 95       	com	r24
 506:	90 95       	com	r25
 508:	9b 01       	movw	r18, r22
 50a:	ac 01       	movw	r20, r24
 50c:	bd 01       	movw	r22, r26
 50e:	cf 01       	movw	r24, r30
 510:	08 95       	ret

00000512 <_exit>:
 512:	f8 94       	cli

00000514 <__stop_program>:
 514:	ff cf       	rjmp	.-2      	; 0x514 <__stop_program>
